
test_screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7b0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000bce14  0800b970  0800b970  0001b970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080c8784  080c8784  000e01e0  2**0
                  CONTENTS
  4 .ARM          00000000  080c8784  080c8784  000e01e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080c8784  080c8784  000e01e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080c8784  080c8784  000d8784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080c8788  080c8788  000d8788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080c878c  000e0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200001e0  080c896c  000e01e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  080c896c  000e04d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000e01e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018afc  00000000  00000000  000e0210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000318e  00000000  00000000  000f8d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  000fbea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001520  00000000  00000000  000fd550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd95  00000000  00000000  000fea70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a302  00000000  00000000  0012c805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119445  00000000  00000000  00146b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0025ff4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007218  00000000  00000000  0025ff9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b958 	.word	0x0800b958

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0800b958 	.word	0x0800b958

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <DelayUs>:
#include "ILI9341_STM32_Driver.h"
#include "ILI9341_GFX.h"

/* imprecise small delay */
__STATIC_INLINE void DelayUs(volatile uint32_t us)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	us *= (SystemCoreClock / 1000000);
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <DelayUs+0x38>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <DelayUs+0x3c>)
 8000c86:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8a:	0c9b      	lsrs	r3, r3, #18
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	fb02 f303 	mul.w	r3, r2, r3
 8000c92:	607b      	str	r3, [r7, #4]
	while (us--);
 8000c94:	bf00      	nop
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	1e5a      	subs	r2, r3, #1
 8000c9a:	607a      	str	r2, [r7, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d1fa      	bne.n	8000c96 <DelayUs+0x1e>
}
 8000ca0:	bf00      	nop
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000004 	.word	0x20000004
 8000cb4:	431bde83 	.word	0x431bde83

08000cb8 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b08d      	sub	sp, #52	; 0x34
 8000cbc:	af02      	add	r7, sp, #8
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	73fb      	strb	r3, [r7, #15]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	81bb      	strh	r3, [r7, #12]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b1e      	cmp	r3, #30
 8000cd4:	d961      	bls.n	8000d9a <ILI9341_DrawChar+0xe2>
 8000cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db5d      	blt.n	8000d9a <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	785b      	ldrb	r3, [r3, #1]
 8000ce8:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	789b      	ldrb	r3, [r3, #2]
 8000cee:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	78db      	ldrb	r3, [r3, #3]
 8000cf4:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	3b20      	subs	r3, #32
 8000cfa:	7ffa      	ldrb	r2, [r7, #31]
 8000cfc:	fb02 f303 	mul.w	r3, r2, r3
 8000d00:	3304      	adds	r3, #4
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	4413      	add	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000d08:	7fbb      	ldrb	r3, [r7, #30]
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	7f7b      	ldrb	r3, [r7, #29]
 8000d0e:	b29c      	uxth	r4, r3
 8000d10:	88f9      	ldrh	r1, [r7, #6]
 8000d12:	89b8      	ldrh	r0, [r7, #12]
 8000d14:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	4623      	mov	r3, r4
 8000d1a:	f000 fc61 	bl	80015e0 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
 8000d22:	e035      	b.n	8000d90 <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
 8000d28:	e02b      	b.n	8000d82 <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000d2a:	7f3b      	ldrb	r3, [r7, #28]
 8000d2c:	6a3a      	ldr	r2, [r7, #32]
 8000d2e:	fb03 f202 	mul.w	r2, r3, r2
 8000d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d34:	10db      	asrs	r3, r3, #3
 8000d36:	f003 031f 	and.w	r3, r3, #31
 8000d3a:	4413      	add	r3, r2
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4413      	add	r3, r2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	f003 0307 	and.w	r3, r3, #7
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8000d54:	7dfa      	ldrb	r2, [r7, #23]
 8000d56:	7dbb      	ldrb	r3, [r7, #22]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d00d      	beq.n	8000d7c <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	89bb      	ldrh	r3, [r7, #12]
 8000d66:	4413      	add	r3, r2
 8000d68:	b298      	uxth	r0, r3
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	4413      	add	r3, r2
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000d76:	4619      	mov	r1, r3
 8000d78:	f000 fbcc 	bl	8001514 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000d7c:	6a3b      	ldr	r3, [r7, #32]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	623b      	str	r3, [r7, #32]
 8000d82:	7fbb      	ldrb	r3, [r7, #30]
 8000d84:	6a3a      	ldr	r2, [r7, #32]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	dbcf      	blt.n	8000d2a <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d90:	7f7b      	ldrb	r3, [r7, #29]
 8000d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d94:	429a      	cmp	r2, r3
 8000d96:	dbc5      	blt.n	8000d24 <ILI9341_DrawChar+0x6c>
 8000d98:	e000      	b.n	8000d9c <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 8000d9a:	bf00      	nop
			}
		}
	}
}
 8000d9c:	372c      	adds	r7, #44	; 0x2c
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd90      	pop	{r4, r7, pc}

08000da2 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b08a      	sub	sp, #40	; 0x28
 8000da6:	af02      	add	r7, sp, #8
 8000da8:	60f8      	str	r0, [r7, #12]
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	4611      	mov	r1, r2
 8000dae:	461a      	mov	r2, r3
 8000db0:	460b      	mov	r3, r1
 8000db2:	80fb      	strh	r3, [r7, #6]
 8000db4:	4613      	mov	r3, r2
 8000db6:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	785b      	ldrb	r3, [r3, #1]
 8000dc2:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8000dc4:	e02d      	b.n	8000e22 <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	7818      	ldrb	r0, [r3, #0]
 8000dca:	88b9      	ldrh	r1, [r7, #4]
 8000dcc:	88fa      	ldrh	r2, [r7, #6]
 8000dce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	f7ff ff6d 	bl	8000cb8 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	3b20      	subs	r3, #32
 8000de4:	7ffa      	ldrb	r2, [r7, #31]
 8000de6:	fb02 f303 	mul.w	r3, r2, r3
 8000dea:	3304      	adds	r3, #4
 8000dec:	68ba      	ldr	r2, [r7, #8]
 8000dee:	4413      	add	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000df8:	7dfb      	ldrb	r3, [r7, #23]
 8000dfa:	1c9a      	adds	r2, r3, #2
 8000dfc:	7fbb      	ldrb	r3, [r7, #30]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	da07      	bge.n	8000e12 <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8000e02:	7dfb      	ldrb	r3, [r7, #23]
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	4413      	add	r3, r2
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	80fb      	strh	r3, [r7, #6]
 8000e10:	e004      	b.n	8000e1c <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 8000e12:	7fbb      	ldrb	r3, [r7, #30]
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	4413      	add	r3, r2
 8000e1a:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1cd      	bne.n	8000dc6 <ILI9341_DrawText+0x24>
	}
}
 8000e2a:	bf00      	nop
 8000e2c:	bf00      	nop
 8000e2e:	3720      	adds	r7, #32
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <ILI9341_DrawImage>:

void ILI9341_DrawImage(const uint8_t* image, uint8_t orientation)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	70fb      	strb	r3, [r7, #3]
	if(orientation == SCREEN_HORIZONTAL_1)
 8000e40:	78fb      	ldrb	r3, [r7, #3]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d10a      	bne.n	8000e5c <ILI9341_DrawImage+0x28>
	{
		ILI9341_SetRotation(SCREEN_HORIZONTAL_1);
 8000e46:	2001      	movs	r0, #1
 8000e48:	f000 fa76 	bl	8001338 <ILI9341_SetRotation>
		ILI9341_SetAddress(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8000e4c:	23f0      	movs	r3, #240	; 0xf0
 8000e4e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e52:	2100      	movs	r1, #0
 8000e54:	2000      	movs	r0, #0
 8000e56:	f000 f8eb 	bl	8001030 <ILI9341_SetAddress>
 8000e5a:	e028      	b.n	8000eae <ILI9341_DrawImage+0x7a>
	}
	else if(orientation == SCREEN_HORIZONTAL_2)
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d10a      	bne.n	8000e78 <ILI9341_DrawImage+0x44>
	{
		ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8000e62:	2003      	movs	r0, #3
 8000e64:	f000 fa68 	bl	8001338 <ILI9341_SetRotation>
		ILI9341_SetAddress(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8000e68:	23f0      	movs	r3, #240	; 0xf0
 8000e6a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2000      	movs	r0, #0
 8000e72:	f000 f8dd 	bl	8001030 <ILI9341_SetAddress>
 8000e76:	e01a      	b.n	8000eae <ILI9341_DrawImage+0x7a>
	}
	else if(orientation == SCREEN_VERTICAL_2)
 8000e78:	78fb      	ldrb	r3, [r7, #3]
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d10a      	bne.n	8000e94 <ILI9341_DrawImage+0x60>
	{
		ILI9341_SetRotation(SCREEN_VERTICAL_2);
 8000e7e:	2002      	movs	r0, #2
 8000e80:	f000 fa5a 	bl	8001338 <ILI9341_SetRotation>
		ILI9341_SetAddress(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8000e84:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e88:	22f0      	movs	r2, #240	; 0xf0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f000 f8cf 	bl	8001030 <ILI9341_SetAddress>
 8000e92:	e00c      	b.n	8000eae <ILI9341_DrawImage+0x7a>
	}
	else if(orientation == SCREEN_VERTICAL_1)
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d109      	bne.n	8000eae <ILI9341_DrawImage+0x7a>
	{
		ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f000 fa4c 	bl	8001338 <ILI9341_SetRotation>
		ILI9341_SetAddress(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8000ea0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ea4:	22f0      	movs	r2, #240	; 0xf0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f000 f8c1 	bl	8001030 <ILI9341_SetAddress>
	}

	uint32_t counter = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
	for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	e011      	b.n	8000edc <ILI9341_DrawImage+0xa8>
	{
		ILI9341_WriteBuffer((uint8_t*)(image + counter), BURST_MAX_SIZE);
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f896 	bl	8000ff4 <ILI9341_WriteBuffer>
		counter += BURST_MAX_SIZE;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000ece:	60fb      	str	r3, [r7, #12]

		/* DMA Tx is too fast, It needs some delay */
		DelayUs(1);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f7ff fed1 	bl	8000c78 <DelayUs>
	for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8000ee2:	d9e9      	bls.n	8000eb8 <ILI9341_DrawImage+0x84>
	}
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_SPI_TxCpltCallback+0x24>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d105      	bne.n	8000f0c <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f06:	4804      	ldr	r0, [pc, #16]	; (8000f18 <HAL_SPI_TxCpltCallback+0x28>)
 8000f08:	f003 fe46 	bl	8004b98 <HAL_GPIO_WritePin>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000330 	.word	0x20000330
 8000f18:	48000c00 	.word	0x48000c00

08000f1c <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000f26:	bf00      	nop
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <ILI9341_SPI_Tx+0x30>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d1f8      	bne.n	8000f28 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <ILI9341_SPI_Tx+0x30>)
 8000f3e:	f006 fa5b 	bl	80073f8 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000330 	.word	0x20000330

08000f50 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000f5c:	bf00      	nop
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <ILI9341_SPI_TxBuffer+0x30>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d1f8      	bne.n	8000f5e <ILI9341_SPI_TxBuffer+0xe>
//	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
	HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
 8000f6c:	887a      	ldrh	r2, [r7, #2]
 8000f6e:	230a      	movs	r3, #10
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4803      	ldr	r0, [pc, #12]	; (8000f80 <ILI9341_SPI_TxBuffer+0x30>)
 8000f74:	f006 f8d1 	bl	800711a <HAL_SPI_Transmit>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000330 	.word	0x20000330

08000f84 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f94:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <ILI9341_WriteCommand+0x34>)
 8000f96:	f003 fdff 	bl	8004b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <ILI9341_WriteCommand+0x34>)
 8000fa2:	f003 fdf9 	bl	8004b98 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ffb7 	bl	8000f1c <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	48000c00 	.word	0x48000c00

08000fbc <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fcc:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <ILI9341_WriteData+0x34>)
 8000fce:	f003 fde3 	bl	8004b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <ILI9341_WriteData+0x34>)
 8000fda:	f003 fddd 	bl	8004b98 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff9b 	bl	8000f1c <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	48000c00 	.word	0x48000c00

08000ff4 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001006:	4809      	ldr	r0, [pc, #36]	; (800102c <ILI9341_WriteBuffer+0x38>)
 8001008:	f003 fdc6 	bl	8004b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <ILI9341_WriteBuffer+0x38>)
 8001014:	f003 fdc0 	bl	8004b98 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8001018:	887b      	ldrh	r3, [r7, #2]
 800101a:	4619      	mov	r1, r3
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff97 	bl	8000f50 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	48000c00 	.word	0x48000c00

08001030 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	4604      	mov	r4, r0
 8001038:	4608      	mov	r0, r1
 800103a:	4611      	mov	r1, r2
 800103c:	461a      	mov	r2, r3
 800103e:	4623      	mov	r3, r4
 8001040:	80fb      	strh	r3, [r7, #6]
 8001042:	4603      	mov	r3, r0
 8001044:	80bb      	strh	r3, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	807b      	strh	r3, [r7, #2]
 800104a:	4613      	mov	r3, r2
 800104c:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	b29b      	uxth	r3, r3
 8001054:	b2db      	uxtb	r3, r3
 8001056:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	b29b      	uxth	r3, r3
 8001064:	b2db      	uxtb	r3, r3
 8001066:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 800106e:	202a      	movs	r0, #42	; 0x2a
 8001070:	f7ff ff88 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2104      	movs	r1, #4
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ffba 	bl	8000ff4 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8001080:	88bb      	ldrh	r3, [r7, #4]
 8001082:	0a1b      	lsrs	r3, r3, #8
 8001084:	b29b      	uxth	r3, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 800108a:	88bb      	ldrh	r3, [r7, #4]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8001090:	883b      	ldrh	r3, [r7, #0]
 8001092:	0a1b      	lsrs	r3, r3, #8
 8001094:	b29b      	uxth	r3, r3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 800109a:	883b      	ldrh	r3, [r7, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80010a0:	202b      	movs	r0, #43	; 0x2b
 80010a2:	f7ff ff6f 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	2104      	movs	r1, #4
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffa1 	bl	8000ff4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 80010b2:	202c      	movs	r0, #44	; 0x2c
 80010b4:	f7ff ff66 	bl	8000f84 <ILI9341_WriteCommand>
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd90      	pop	{r4, r7, pc}

080010c0 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ca:	480e      	ldr	r0, [pc, #56]	; (8001104 <ILI9341_Reset+0x44>)
 80010cc:	f003 fd64 	bl	8004b98 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80010d0:	200a      	movs	r0, #10
 80010d2:	f001 fe57 	bl	8002d84 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <ILI9341_Reset+0x48>)
 80010de:	f003 fd5b 	bl	8004b98 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80010e2:	200a      	movs	r0, #10
 80010e4:	f001 fe4e 	bl	8002d84 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <ILI9341_Reset+0x44>)
 80010f0:	f003 fd52 	bl	8004b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 80010f4:	2201      	movs	r2, #1
 80010f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010fa:	4803      	ldr	r0, [pc, #12]	; (8001108 <ILI9341_Reset+0x48>)
 80010fc:	f003 fd4c 	bl	8004b98 <HAL_GPIO_WritePin>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	48001400 	.word	0x48001400
 8001108:	48000c00 	.word	0x48000c00

0800110c <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001110:	2201      	movs	r2, #1
 8001112:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001116:	4802      	ldr	r0, [pc, #8]	; (8001120 <ILI9341_Enable+0x14>)
 8001118:	f003 fd3e 	bl	8004b98 <HAL_GPIO_WritePin>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	48001400 	.word	0x48001400

08001124 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8001128:	f7ff fff0 	bl	800110c <ILI9341_Enable>
	ILI9341_Reset();
 800112c:	f7ff ffc8 	bl	80010c0 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff ff27 	bl	8000f84 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8001136:	200a      	movs	r0, #10
 8001138:	f001 fe24 	bl	8002d84 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 800113c:	20cb      	movs	r0, #203	; 0xcb
 800113e:	f7ff ff21 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8001142:	2039      	movs	r0, #57	; 0x39
 8001144:	f7ff ff3a 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8001148:	202c      	movs	r0, #44	; 0x2c
 800114a:	f7ff ff37 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff ff34 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8001154:	2034      	movs	r0, #52	; 0x34
 8001156:	f7ff ff31 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 800115a:	2002      	movs	r0, #2
 800115c:	f7ff ff2e 	bl	8000fbc <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8001160:	20cf      	movs	r0, #207	; 0xcf
 8001162:	f7ff ff0f 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001166:	2000      	movs	r0, #0
 8001168:	f7ff ff28 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 800116c:	20c1      	movs	r0, #193	; 0xc1
 800116e:	f7ff ff25 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8001172:	2030      	movs	r0, #48	; 0x30
 8001174:	f7ff ff22 	bl	8000fbc <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8001178:	20e8      	movs	r0, #232	; 0xe8
 800117a:	f7ff ff03 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 800117e:	2085      	movs	r0, #133	; 0x85
 8001180:	f7ff ff1c 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001184:	2000      	movs	r0, #0
 8001186:	f7ff ff19 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 800118a:	2078      	movs	r0, #120	; 0x78
 800118c:	f7ff ff16 	bl	8000fbc <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8001190:	20ea      	movs	r0, #234	; 0xea
 8001192:	f7ff fef7 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001196:	2000      	movs	r0, #0
 8001198:	f7ff ff10 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800119c:	2000      	movs	r0, #0
 800119e:	f7ff ff0d 	bl	8000fbc <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 80011a2:	20ed      	movs	r0, #237	; 0xed
 80011a4:	f7ff feee 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 80011a8:	2064      	movs	r0, #100	; 0x64
 80011aa:	f7ff ff07 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80011ae:	2003      	movs	r0, #3
 80011b0:	f7ff ff04 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 80011b4:	2012      	movs	r0, #18
 80011b6:	f7ff ff01 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 80011ba:	2081      	movs	r0, #129	; 0x81
 80011bc:	f7ff fefe 	bl	8000fbc <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 80011c0:	20f7      	movs	r0, #247	; 0xf7
 80011c2:	f7ff fedf 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 80011c6:	2020      	movs	r0, #32
 80011c8:	f7ff fef8 	bl	8000fbc <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 80011cc:	20c0      	movs	r0, #192	; 0xc0
 80011ce:	f7ff fed9 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 80011d2:	2023      	movs	r0, #35	; 0x23
 80011d4:	f7ff fef2 	bl	8000fbc <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 80011d8:	20c1      	movs	r0, #193	; 0xc1
 80011da:	f7ff fed3 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 80011de:	2010      	movs	r0, #16
 80011e0:	f7ff feec 	bl	8000fbc <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 80011e4:	20c5      	movs	r0, #197	; 0xc5
 80011e6:	f7ff fecd 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 80011ea:	203e      	movs	r0, #62	; 0x3e
 80011ec:	f7ff fee6 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 80011f0:	2028      	movs	r0, #40	; 0x28
 80011f2:	f7ff fee3 	bl	8000fbc <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 80011f6:	20c7      	movs	r0, #199	; 0xc7
 80011f8:	f7ff fec4 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 80011fc:	2086      	movs	r0, #134	; 0x86
 80011fe:	f7ff fedd 	bl	8000fbc <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8001202:	2036      	movs	r0, #54	; 0x36
 8001204:	f7ff febe 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8001208:	2048      	movs	r0, #72	; 0x48
 800120a:	f7ff fed7 	bl	8000fbc <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 800120e:	203a      	movs	r0, #58	; 0x3a
 8001210:	f7ff feb8 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8001214:	2055      	movs	r0, #85	; 0x55
 8001216:	f7ff fed1 	bl	8000fbc <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 800121a:	20b1      	movs	r0, #177	; 0xb1
 800121c:	f7ff feb2 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff fecb 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8001226:	2018      	movs	r0, #24
 8001228:	f7ff fec8 	bl	8000fbc <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 800122c:	20b6      	movs	r0, #182	; 0xb6
 800122e:	f7ff fea9 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8001232:	2008      	movs	r0, #8
 8001234:	f7ff fec2 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8001238:	2082      	movs	r0, #130	; 0x82
 800123a:	f7ff febf 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 800123e:	2027      	movs	r0, #39	; 0x27
 8001240:	f7ff febc 	bl	8000fbc <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8001244:	20f2      	movs	r0, #242	; 0xf2
 8001246:	f7ff fe9d 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff feb6 	bl	8000fbc <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8001250:	2026      	movs	r0, #38	; 0x26
 8001252:	f7ff fe97 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8001256:	2001      	movs	r0, #1
 8001258:	f7ff feb0 	bl	8000fbc <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 800125c:	20e0      	movs	r0, #224	; 0xe0
 800125e:	f7ff fe91 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8001262:	200f      	movs	r0, #15
 8001264:	f7ff feaa 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001268:	2031      	movs	r0, #49	; 0x31
 800126a:	f7ff fea7 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 800126e:	202b      	movs	r0, #43	; 0x2b
 8001270:	f7ff fea4 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001274:	200c      	movs	r0, #12
 8001276:	f7ff fea1 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800127a:	200e      	movs	r0, #14
 800127c:	f7ff fe9e 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001280:	2008      	movs	r0, #8
 8001282:	f7ff fe9b 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8001286:	204e      	movs	r0, #78	; 0x4e
 8001288:	f7ff fe98 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 800128c:	20f1      	movs	r0, #241	; 0xf1
 800128e:	f7ff fe95 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8001292:	2037      	movs	r0, #55	; 0x37
 8001294:	f7ff fe92 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001298:	2007      	movs	r0, #7
 800129a:	f7ff fe8f 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 800129e:	2010      	movs	r0, #16
 80012a0:	f7ff fe8c 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80012a4:	2003      	movs	r0, #3
 80012a6:	f7ff fe89 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80012aa:	200e      	movs	r0, #14
 80012ac:	f7ff fe86 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 80012b0:	2009      	movs	r0, #9
 80012b2:	f7ff fe83 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80012b6:	2000      	movs	r0, #0
 80012b8:	f7ff fe80 	bl	8000fbc <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 80012bc:	20e1      	movs	r0, #225	; 0xe1
 80012be:	f7ff fe61 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff fe7a 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80012c8:	200e      	movs	r0, #14
 80012ca:	f7ff fe77 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 80012ce:	2014      	movs	r0, #20
 80012d0:	f7ff fe74 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f7ff fe71 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 80012da:	2011      	movs	r0, #17
 80012dc:	f7ff fe6e 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80012e0:	2007      	movs	r0, #7
 80012e2:	f7ff fe6b 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80012e6:	2031      	movs	r0, #49	; 0x31
 80012e8:	f7ff fe68 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80012ec:	20c1      	movs	r0, #193	; 0xc1
 80012ee:	f7ff fe65 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 80012f2:	2048      	movs	r0, #72	; 0x48
 80012f4:	f7ff fe62 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80012f8:	2008      	movs	r0, #8
 80012fa:	f7ff fe5f 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80012fe:	200f      	movs	r0, #15
 8001300:	f7ff fe5c 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001304:	200c      	movs	r0, #12
 8001306:	f7ff fe59 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800130a:	2031      	movs	r0, #49	; 0x31
 800130c:	f7ff fe56 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8001310:	2036      	movs	r0, #54	; 0x36
 8001312:	f7ff fe53 	bl	8000fbc <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001316:	200f      	movs	r0, #15
 8001318:	f7ff fe50 	bl	8000fbc <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 800131c:	2011      	movs	r0, #17
 800131e:	f7ff fe31 	bl	8000f84 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8001322:	2064      	movs	r0, #100	; 0x64
 8001324:	f001 fd2e 	bl	8002d84 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8001328:	2029      	movs	r0, #41	; 0x29
 800132a:	f7ff fe2b 	bl	8000f84 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 800132e:	2000      	movs	r0, #0
 8001330:	f000 f802 	bl	8001338 <ILI9341_SetRotation>
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}

08001338 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8001342:	2036      	movs	r0, #54	; 0x36
 8001344:	f7ff fe1e 	bl	8000f84 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8001348:	2001      	movs	r0, #1
 800134a:	f001 fd1b 	bl	8002d84 <HAL_Delay>

	switch(rotation)
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b03      	cmp	r3, #3
 8001352:	d837      	bhi.n	80013c4 <ILI9341_SetRotation+0x8c>
 8001354:	a201      	add	r2, pc, #4	; (adr r2, 800135c <ILI9341_SetRotation+0x24>)
 8001356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135a:	bf00      	nop
 800135c:	0800136d 	.word	0x0800136d
 8001360:	08001383 	.word	0x08001383
 8001364:	08001399 	.word	0x08001399
 8001368:	080013af 	.word	0x080013af
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 800136c:	2048      	movs	r0, #72	; 0x48
 800136e:	f7ff fe25 	bl	8000fbc <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <ILI9341_SetRotation+0x98>)
 8001374:	22f0      	movs	r2, #240	; 0xf0
 8001376:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <ILI9341_SetRotation+0x9c>)
 800137a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800137e:	801a      	strh	r2, [r3, #0]
		break;
 8001380:	e021      	b.n	80013c6 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8001382:	2028      	movs	r0, #40	; 0x28
 8001384:	f7ff fe1a 	bl	8000fbc <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <ILI9341_SetRotation+0x98>)
 800138a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800138e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001390:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <ILI9341_SetRotation+0x9c>)
 8001392:	22f0      	movs	r2, #240	; 0xf0
 8001394:	801a      	strh	r2, [r3, #0]
		break;
 8001396:	e016      	b.n	80013c6 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8001398:	2088      	movs	r0, #136	; 0x88
 800139a:	f7ff fe0f 	bl	8000fbc <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <ILI9341_SetRotation+0x98>)
 80013a0:	22f0      	movs	r2, #240	; 0xf0
 80013a2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <ILI9341_SetRotation+0x9c>)
 80013a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80013aa:	801a      	strh	r2, [r3, #0]
		break;
 80013ac:	e00b      	b.n	80013c6 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 80013ae:	20e8      	movs	r0, #232	; 0xe8
 80013b0:	f7ff fe04 	bl	8000fbc <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <ILI9341_SetRotation+0x98>)
 80013b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80013ba:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <ILI9341_SetRotation+0x9c>)
 80013be:	22f0      	movs	r2, #240	; 0xf0
 80013c0:	801a      	strh	r2, [r3, #0]
		break;
 80013c2:	e000      	b.n	80013c6 <ILI9341_SetRotation+0x8e>
	default:
		break;
 80013c4:	bf00      	nop
	}
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000002 	.word	0x20000002
 80013d4:	20000000 	.word	0x20000000

080013d8 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 80013d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013dc:	b08d      	sub	sp, #52	; 0x34
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	6039      	str	r1, [r7, #0]
 80013e4:	80fb      	strh	r3, [r7, #6]
 80013e6:	466b      	mov	r3, sp
 80013e8:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013f6:	d202      	bcs.n	80013fe <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
 80013fc:	e002      	b.n	8001404 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 80013fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001404:	2201      	movs	r2, #1
 8001406:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800140a:	4840      	ldr	r0, [pc, #256]	; (800150c <ILI9341_DrawColorBurst+0x134>)
 800140c:	f003 fbc4 	bl	8004b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001416:	483d      	ldr	r0, [pc, #244]	; (800150c <ILI9341_DrawColorBurst+0x134>)
 8001418:	f003 fbbe 	bl	8004b98 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	0a1b      	lsrs	r3, r3, #8
 8001420:	b29b      	uxth	r3, r3
 8001422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8001426:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001428:	460b      	mov	r3, r1
 800142a:	3b01      	subs	r3, #1
 800142c:	61fb      	str	r3, [r7, #28]
 800142e:	2300      	movs	r3, #0
 8001430:	4688      	mov	r8, r1
 8001432:	4699      	mov	r9, r3
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001440:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001444:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001448:	2300      	movs	r3, #0
 800144a:	460c      	mov	r4, r1
 800144c:	461d      	mov	r5, r3
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	00eb      	lsls	r3, r5, #3
 8001458:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800145c:	00e2      	lsls	r2, r4, #3
 800145e:	1dcb      	adds	r3, r1, #7
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	ebad 0d03 	sub.w	sp, sp, r3
 8001468:	466b      	mov	r3, sp
 800146a:	3300      	adds	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 800146e:	2300      	movs	r3, #0
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
 8001472:	e00e      	b.n	8001492 <ILI9341_DrawColorBurst+0xba>
	{
		BurstBuffer[j] = chifted;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001478:	4413      	add	r3, r2
 800147a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800147e:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8001480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001482:	3301      	adds	r3, #1
 8001484:	88fa      	ldrh	r2, [r7, #6]
 8001486:	b2d1      	uxtb	r1, r2
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 800148c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148e:	3302      	adds	r3, #2
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
 8001492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	429a      	cmp	r2, r3
 8001498:	d3ec      	bcc.n	8001474 <ILI9341_DrawColorBurst+0x9c>
	}

	uint32_t SendingSize = size * 2;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a8:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80014b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014b4:	fb01 f202 	mul.w	r2, r1, r2
 80014b8:	1a9b      	subs	r3, r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d010      	beq.n	80014e4 <ILI9341_DrawColorBurst+0x10c>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014c6:	e009      	b.n	80014dc <ILI9341_DrawColorBurst+0x104>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	230a      	movs	r3, #10
 80014ce:	69b9      	ldr	r1, [r7, #24]
 80014d0:	480f      	ldr	r0, [pc, #60]	; (8001510 <ILI9341_DrawColorBurst+0x138>)
 80014d2:	f005 fe22 	bl	800711a <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 80014d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d8:	3301      	adds	r3, #1
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d3f1      	bcc.n	80014c8 <ILI9341_DrawColorBurst+0xf0>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	230a      	movs	r3, #10
 80014ea:	69b9      	ldr	r1, [r7, #24]
 80014ec:	4808      	ldr	r0, [pc, #32]	; (8001510 <ILI9341_DrawColorBurst+0x138>)
 80014ee:	f005 fe14 	bl	800711a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80014f2:	2201      	movs	r2, #1
 80014f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <ILI9341_DrawColorBurst+0x134>)
 80014fa:	f003 fb4d 	bl	8004b98 <HAL_GPIO_WritePin>
 80014fe:	46b5      	mov	sp, r6
}
 8001500:	bf00      	nop
 8001502:	3734      	adds	r7, #52	; 0x34
 8001504:	46bd      	mov	sp, r7
 8001506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800150a:	bf00      	nop
 800150c:	48000c00 	.word	0x48000c00
 8001510:	20000330 	.word	0x20000330

08001514 <ILI9341_DrawPixel>:
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
}

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	80fb      	strh	r3, [r7, #6]
 800151e:	460b      	mov	r3, r1
 8001520:	80bb      	strh	r3, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001526:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <ILI9341_DrawPixel+0xc4>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	b29b      	uxth	r3, r3
 800152c:	88fa      	ldrh	r2, [r7, #6]
 800152e:	429a      	cmp	r2, r3
 8001530:	d24d      	bcs.n	80015ce <ILI9341_DrawPixel+0xba>
 8001532:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <ILI9341_DrawPixel+0xc8>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	b29b      	uxth	r3, r3
 8001538:	88ba      	ldrh	r2, [r7, #4]
 800153a:	429a      	cmp	r2, r3
 800153c:	d247      	bcs.n	80015ce <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	b29b      	uxth	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	753b      	strb	r3, [r7, #20]
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	757b      	strb	r3, [r7, #21]
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	3301      	adds	r3, #1
 8001552:	121b      	asrs	r3, r3, #8
 8001554:	b2db      	uxtb	r3, r3
 8001556:	75bb      	strb	r3, [r7, #22]
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	3301      	adds	r3, #1
 800155e:	b2db      	uxtb	r3, r3
 8001560:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8001562:	88bb      	ldrh	r3, [r7, #4]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	b29b      	uxth	r3, r3
 8001568:	b2db      	uxtb	r3, r3
 800156a:	743b      	strb	r3, [r7, #16]
 800156c:	88bb      	ldrh	r3, [r7, #4]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	747b      	strb	r3, [r7, #17]
 8001572:	88bb      	ldrh	r3, [r7, #4]
 8001574:	3301      	adds	r3, #1
 8001576:	121b      	asrs	r3, r3, #8
 8001578:	b2db      	uxtb	r3, r3
 800157a:	74bb      	strb	r3, [r7, #18]
 800157c:	88bb      	ldrh	r3, [r7, #4]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	3301      	adds	r3, #1
 8001582:	b2db      	uxtb	r3, r3
 8001584:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	b29b      	uxth	r3, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	733b      	strb	r3, [r7, #12]
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001596:	202a      	movs	r0, #42	; 0x2a
 8001598:	f7ff fcf4 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2104      	movs	r1, #4
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fd26 	bl	8000ff4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 80015a8:	202b      	movs	r0, #43	; 0x2b
 80015aa:	f7ff fceb 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 80015ae:	f107 0310 	add.w	r3, r7, #16
 80015b2:	2104      	movs	r1, #4
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fd1d 	bl	8000ff4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 80015ba:	202c      	movs	r0, #44	; 0x2c
 80015bc:	f7ff fce2 	bl	8000f84 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2102      	movs	r1, #2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fd14 	bl	8000ff4 <ILI9341_WriteBuffer>
 80015cc:	e000      	b.n	80015d0 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80015ce:	bf00      	nop
}
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000002 	.word	0x20000002
 80015dc:	20000000 	.word	0x20000000

080015e0 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4604      	mov	r4, r0
 80015e8:	4608      	mov	r0, r1
 80015ea:	4611      	mov	r1, r2
 80015ec:	461a      	mov	r2, r3
 80015ee:	4623      	mov	r3, r4
 80015f0:	80fb      	strh	r3, [r7, #6]
 80015f2:	4603      	mov	r3, r0
 80015f4:	80bb      	strh	r3, [r7, #4]
 80015f6:	460b      	mov	r3, r1
 80015f8:	807b      	strh	r3, [r7, #2]
 80015fa:	4613      	mov	r3, r2
 80015fc:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80015fe:	4b24      	ldr	r3, [pc, #144]	; (8001690 <ILI9341_DrawRectangle+0xb0>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	88fa      	ldrh	r2, [r7, #6]
 8001606:	429a      	cmp	r2, r3
 8001608:	d23d      	bcs.n	8001686 <ILI9341_DrawRectangle+0xa6>
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <ILI9341_DrawRectangle+0xb4>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	b29b      	uxth	r3, r3
 8001610:	88ba      	ldrh	r2, [r7, #4]
 8001612:	429a      	cmp	r2, r3
 8001614:	d237      	bcs.n	8001686 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8001616:	88fa      	ldrh	r2, [r7, #6]
 8001618:	887b      	ldrh	r3, [r7, #2]
 800161a:	4413      	add	r3, r2
 800161c:	4a1c      	ldr	r2, [pc, #112]	; (8001690 <ILI9341_DrawRectangle+0xb0>)
 800161e:	8812      	ldrh	r2, [r2, #0]
 8001620:	b292      	uxth	r2, r2
 8001622:	4293      	cmp	r3, r2
 8001624:	dd05      	ble.n	8001632 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <ILI9341_DrawRectangle+0xb0>)
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	b29a      	uxth	r2, r3
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8001632:	88ba      	ldrh	r2, [r7, #4]
 8001634:	883b      	ldrh	r3, [r7, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a16      	ldr	r2, [pc, #88]	; (8001694 <ILI9341_DrawRectangle+0xb4>)
 800163a:	8812      	ldrh	r2, [r2, #0]
 800163c:	b292      	uxth	r2, r2
 800163e:	4293      	cmp	r3, r2
 8001640:	dd05      	ble.n	800164e <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <ILI9341_DrawRectangle+0xb4>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	b29a      	uxth	r2, r3
 8001648:	88bb      	ldrh	r3, [r7, #4]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 800164e:	88fa      	ldrh	r2, [r7, #6]
 8001650:	887b      	ldrh	r3, [r7, #2]
 8001652:	4413      	add	r3, r2
 8001654:	b29b      	uxth	r3, r3
 8001656:	3b01      	subs	r3, #1
 8001658:	b29c      	uxth	r4, r3
 800165a:	88ba      	ldrh	r2, [r7, #4]
 800165c:	883b      	ldrh	r3, [r7, #0]
 800165e:	4413      	add	r3, r2
 8001660:	b29b      	uxth	r3, r3
 8001662:	3b01      	subs	r3, #1
 8001664:	b29b      	uxth	r3, r3
 8001666:	88b9      	ldrh	r1, [r7, #4]
 8001668:	88f8      	ldrh	r0, [r7, #6]
 800166a:	4622      	mov	r2, r4
 800166c:	f7ff fce0 	bl	8001030 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001670:	883b      	ldrh	r3, [r7, #0]
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	fb02 f303 	mul.w	r3, r2, r3
 8001678:	461a      	mov	r2, r3
 800167a:	8b3b      	ldrh	r3, [r7, #24]
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff feaa 	bl	80013d8 <ILI9341_DrawColorBurst>
 8001684:	e000      	b.n	8001688 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001686:	bf00      	nop
}
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bd90      	pop	{r4, r7, pc}
 800168e:	bf00      	nop
 8001690:	20000002 	.word	0x20000002
 8001694:	20000000 	.word	0x20000000

08001698 <info_page>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void info_page(float t, float h, int l, int id){
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af02      	add	r7, sp, #8
 800169e:	ed87 0a03 	vstr	s0, [r7, #12]
 80016a2:	edc7 0a02 	vstr	s1, [r7, #8]
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
//	ILI9341_FillScreen(WHITE);
//	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
//	HAL_Delay(1000);
	static char BufferText[30];
	// Temperature
	sprintf(BufferText, "Temperature : %f F", t*1.8 + 32);
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f7fe ff64 	bl	8000578 <__aeabi_f2d>
 80016b0:	a34d      	add	r3, pc, #308	; (adr r3, 80017e8 <info_page+0x150>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe ffb7 	bl	8000628 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	4b3c      	ldr	r3, [pc, #240]	; (80017b8 <info_page+0x120>)
 80016c8:	f7fe fdf8 	bl	80002bc <__adddf3>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	493a      	ldr	r1, [pc, #232]	; (80017bc <info_page+0x124>)
 80016d2:	483b      	ldr	r0, [pc, #236]	; (80017c0 <info_page+0x128>)
 80016d4:	f007 fec8 	bl	8009468 <siprintf>
	ILI9341_DrawText(BufferText, FONT4, 90, 50, GREEN, WHITE);
 80016d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2332      	movs	r3, #50	; 0x32
 80016e6:	225a      	movs	r2, #90	; 0x5a
 80016e8:	4936      	ldr	r1, [pc, #216]	; (80017c4 <info_page+0x12c>)
 80016ea:	4835      	ldr	r0, [pc, #212]	; (80017c0 <info_page+0x128>)
 80016ec:	f7ff fb59 	bl	8000da2 <ILI9341_DrawText>
	// Humidity
	sprintf(BufferText, "Humidity : %f %%", h/41.0);
 80016f0:	68b8      	ldr	r0, [r7, #8]
 80016f2:	f7fe ff41 	bl	8000578 <__aeabi_f2d>
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <info_page+0x130>)
 80016fc:	f7ff f8be 	bl	800087c <__aeabi_ddiv>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4931      	ldr	r1, [pc, #196]	; (80017cc <info_page+0x134>)
 8001706:	482e      	ldr	r0, [pc, #184]	; (80017c0 <info_page+0x128>)
 8001708:	f007 feae 	bl	8009468 <siprintf>
	ILI9341_DrawText(BufferText, FONT4, 90, 80, BLUE, WHITE);
 800170c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	231f      	movs	r3, #31
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2350      	movs	r3, #80	; 0x50
 8001718:	225a      	movs	r2, #90	; 0x5a
 800171a:	492a      	ldr	r1, [pc, #168]	; (80017c4 <info_page+0x12c>)
 800171c:	4828      	ldr	r0, [pc, #160]	; (80017c0 <info_page+0x128>)
 800171e:	f7ff fb40 	bl	8000da2 <ILI9341_DrawText>
	// Lightness:
	sprintf(BufferText, "Water : enough!");
 8001722:	492b      	ldr	r1, [pc, #172]	; (80017d0 <info_page+0x138>)
 8001724:	4826      	ldr	r0, [pc, #152]	; (80017c0 <info_page+0x128>)
 8001726:	f007 fe9f 	bl	8009468 <siprintf>
	ILI9341_DrawText(BufferText, FONT4, 90, 110, BLACK, WHITE);
 800172a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	2300      	movs	r3, #0
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	236e      	movs	r3, #110	; 0x6e
 8001736:	225a      	movs	r2, #90	; 0x5a
 8001738:	4922      	ldr	r1, [pc, #136]	; (80017c4 <info_page+0x12c>)
 800173a:	4821      	ldr	r0, [pc, #132]	; (80017c0 <info_page+0x128>)
 800173c:	f7ff fb31 	bl	8000da2 <ILI9341_DrawText>
	// Status
	switch(id){
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	2b04      	cmp	r3, #4
 8001744:	d820      	bhi.n	8001788 <info_page+0xf0>
 8001746:	a201      	add	r2, pc, #4	; (adr r2, 800174c <info_page+0xb4>)
 8001748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174c:	08001761 	.word	0x08001761
 8001750:	0800176b 	.word	0x0800176b
 8001754:	08001775 	.word	0x08001775
 8001758:	08001789 	.word	0x08001789
 800175c:	0800177f 	.word	0x0800177f
	case 0:
			sprintf(BufferText, "Status : Very good ");
 8001760:	491c      	ldr	r1, [pc, #112]	; (80017d4 <info_page+0x13c>)
 8001762:	4817      	ldr	r0, [pc, #92]	; (80017c0 <info_page+0x128>)
 8001764:	f007 fe80 	bl	8009468 <siprintf>
			break;
 8001768:	e013      	b.n	8001792 <info_page+0xfa>
	case 1:
			sprintf(BufferText, "Status : Really hot");
 800176a:	491b      	ldr	r1, [pc, #108]	; (80017d8 <info_page+0x140>)
 800176c:	4814      	ldr	r0, [pc, #80]	; (80017c0 <info_page+0x128>)
 800176e:	f007 fe7b 	bl	8009468 <siprintf>
			break;
 8001772:	e00e      	b.n	8001792 <info_page+0xfa>
	case 2:
			sprintf(BufferText, "Status : So cold ~~");
 8001774:	4919      	ldr	r1, [pc, #100]	; (80017dc <info_page+0x144>)
 8001776:	4812      	ldr	r0, [pc, #72]	; (80017c0 <info_page+0x128>)
 8001778:	f007 fe76 	bl	8009468 <siprintf>
			break;
 800177c:	e009      	b.n	8001792 <info_page+0xfa>
	case 4:
			sprintf(BufferText, "Status : Need water");
 800177e:	4918      	ldr	r1, [pc, #96]	; (80017e0 <info_page+0x148>)
 8001780:	480f      	ldr	r0, [pc, #60]	; (80017c0 <info_page+0x128>)
 8001782:	f007 fe71 	bl	8009468 <siprintf>
			break;
 8001786:	e004      	b.n	8001792 <info_page+0xfa>
	default:
			sprintf(BufferText, "Status : Sleeping  ");
 8001788:	4916      	ldr	r1, [pc, #88]	; (80017e4 <info_page+0x14c>)
 800178a:	480d      	ldr	r0, [pc, #52]	; (80017c0 <info_page+0x128>)
 800178c:	f007 fe6c 	bl	8009468 <siprintf>
			break;
 8001790:	bf00      	nop
	}
	ILI9341_DrawText(BufferText, FONT4, 90, 140, ORANGE, WHITE);
 8001792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	238c      	movs	r3, #140	; 0x8c
 80017a0:	225a      	movs	r2, #90	; 0x5a
 80017a2:	4908      	ldr	r1, [pc, #32]	; (80017c4 <info_page+0x12c>)
 80017a4:	4806      	ldr	r0, [pc, #24]	; (80017c0 <info_page+0x128>)
 80017a6:	f7ff fafc 	bl	8000da2 <ILI9341_DrawText>
	HAL_Delay(200);
 80017aa:	20c8      	movs	r0, #200	; 0xc8
 80017ac:	f001 faea 	bl	8002d84 <HAL_Delay>
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40400000 	.word	0x40400000
 80017bc:	0800b970 	.word	0x0800b970
 80017c0:	2000048c 	.word	0x2000048c
 80017c4:	0800ba24 	.word	0x0800ba24
 80017c8:	40448000 	.word	0x40448000
 80017cc:	0800b984 	.word	0x0800b984
 80017d0:	0800b998 	.word	0x0800b998
 80017d4:	0800b9a8 	.word	0x0800b9a8
 80017d8:	0800b9bc 	.word	0x0800b9bc
 80017dc:	0800b9d0 	.word	0x0800b9d0
 80017e0:	0800b9e4 	.word	0x0800b9e4
 80017e4:	0800b9f8 	.word	0x0800b9f8
 80017e8:	cccccccd 	.word	0xcccccccd
 80017ec:	3ffccccc 	.word	0x3ffccccc

080017f0 <decider>:
		ILI9341_DrawText(BufferText, FONT3, 10, 190, BLUE, BLACK);
	}
	HAL_Delay(500);
}

int decider(float tem, float hum){
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80017fa:	edc7 0a00 	vstr	s1, [r7]
	float tem_low = (65-32)/1.8;
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <decider+0x6c>)
 8001800:	617b      	str	r3, [r7, #20]
	float tem_high = (75-32) / 1.8;
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <decider+0x70>)
 8001804:	613b      	str	r3, [r7, #16]
	float hum_low = 1000;
 8001806:	4b17      	ldr	r3, [pc, #92]	; (8001864 <decider+0x74>)
 8001808:	60fb      	str	r3, [r7, #12]

	if (tem<tem_low)
 800180a:	ed97 7a01 	vldr	s14, [r7, #4]
 800180e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001812:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181a:	d501      	bpl.n	8001820 <decider+0x30>
		return 2;
 800181c:	2302      	movs	r3, #2
 800181e:	e016      	b.n	800184e <decider+0x5e>

	if (hum<hum_low)
 8001820:	ed97 7a00 	vldr	s14, [r7]
 8001824:	edd7 7a03 	vldr	s15, [r7, #12]
 8001828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800182c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001830:	d501      	bpl.n	8001836 <decider+0x46>
		return 4;
 8001832:	2304      	movs	r3, #4
 8001834:	e00b      	b.n	800184e <decider+0x5e>

	if (tem>tem_high)
 8001836:	ed97 7a01 	vldr	s14, [r7, #4]
 800183a:	edd7 7a04 	vldr	s15, [r7, #16]
 800183e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001846:	dd01      	ble.n	800184c <decider+0x5c>
		return 1;
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <decider+0x5e>

	return 0;
 800184c:	2300      	movs	r3, #0

}
 800184e:	4618      	mov	r0, r3
 8001850:	371c      	adds	r7, #28
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	4192aaab 	.word	0x4192aaab
 8001860:	41bf1c72 	.word	0x41bf1c72
 8001864:	447a0000 	.word	0x447a0000

08001868 <test_emoji>:

void test_emoji(int id){
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	switch(id){
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b04      	cmp	r3, #4
 8001874:	d820      	bhi.n	80018b8 <test_emoji+0x50>
 8001876:	a201      	add	r2, pc, #4	; (adr r2, 800187c <test_emoji+0x14>)
 8001878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187c:	08001891 	.word	0x08001891
 8001880:	0800189b 	.word	0x0800189b
 8001884:	080018a5 	.word	0x080018a5
 8001888:	080018b9 	.word	0x080018b9
 800188c:	080018af 	.word	0x080018af
	case 0:
			ILI9341_DrawImage(nice, SCREEN_HORIZONTAL_2);
 8001890:	2103      	movs	r1, #3
 8001892:	480f      	ldr	r0, [pc, #60]	; (80018d0 <test_emoji+0x68>)
 8001894:	f7ff face 	bl	8000e34 <ILI9341_DrawImage>
			break;
 8001898:	e013      	b.n	80018c2 <test_emoji+0x5a>
	case 1:
			ILI9341_DrawImage(hot, SCREEN_HORIZONTAL_2);
 800189a:	2103      	movs	r1, #3
 800189c:	480d      	ldr	r0, [pc, #52]	; (80018d4 <test_emoji+0x6c>)
 800189e:	f7ff fac9 	bl	8000e34 <ILI9341_DrawImage>
			break;
 80018a2:	e00e      	b.n	80018c2 <test_emoji+0x5a>
	case 2:
			ILI9341_DrawImage(cold, SCREEN_HORIZONTAL_2);
 80018a4:	2103      	movs	r1, #3
 80018a6:	480c      	ldr	r0, [pc, #48]	; (80018d8 <test_emoji+0x70>)
 80018a8:	f7ff fac4 	bl	8000e34 <ILI9341_DrawImage>
			break;
 80018ac:	e009      	b.n	80018c2 <test_emoji+0x5a>
	case 4:
			ILI9341_DrawImage(thirsty, SCREEN_HORIZONTAL_2);
 80018ae:	2103      	movs	r1, #3
 80018b0:	480a      	ldr	r0, [pc, #40]	; (80018dc <test_emoji+0x74>)
 80018b2:	f7ff fabf 	bl	8000e34 <ILI9341_DrawImage>
			break;
 80018b6:	e004      	b.n	80018c2 <test_emoji+0x5a>
	default:
			ILI9341_DrawImage(sleep, SCREEN_HORIZONTAL_2);
 80018b8:	2103      	movs	r1, #3
 80018ba:	4809      	ldr	r0, [pc, #36]	; (80018e0 <test_emoji+0x78>)
 80018bc:	f7ff faba 	bl	8000e34 <ILI9341_DrawImage>
			break;
 80018c0:	bf00      	nop
	}
	HAL_Delay(100);
 80018c2:	2064      	movs	r0, #100	; 0x64
 80018c4:	f001 fa5e 	bl	8002d84 <HAL_Delay>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	0800cb68 	.word	0x0800cb68
 80018d4:	0807d368 	.word	0x0807d368
 80018d8:	080a2b68 	.word	0x080a2b68
 80018dc:	08032368 	.word	0x08032368
 80018e0:	08057b68 	.word	0x08057b68

080018e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ea:	f001 f9d6 	bl	8002c9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ee:	f000 f8e9 	bl	8001ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f2:	f000 fb21 	bl	8001f38 <MX_GPIO_Init>
  MX_DMA_Init();
 80018f6:	f000 faed 	bl	8001ed4 <MX_DMA_Init>
  MX_ADC1_Init();
 80018fa:	f000 f935 	bl	8001b68 <MX_ADC1_Init>
  MX_SPI1_Init();
 80018fe:	f000 f9f5 	bl	8001cec <MX_SPI1_Init>
  MX_TIM4_Init();
 8001902:	f000 fa8b 	bl	8001e1c <MX_TIM4_Init>
  MX_I2C1_Init();
 8001906:	f000 f9b1 	bl	8001c6c <MX_I2C1_Init>
  MX_TIM2_Init();
 800190a:	f000 fa2d 	bl	8001d68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 800190e:	f7ff fc09 	bl	8001124 <ILI9341_Init>
  Touch_Init();
 8001912:	f000 fbd5 	bl	80020c0 <Touch_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  test_begin();

  int state = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  int new_state = -1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	607b      	str	r3, [r7, #4]

  // -1 is info page, 1 is emoji
  int scene = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
  int new_scene = 1;
 8001924:	2301      	movs	r3, #1
 8001926:	60fb      	str	r3, [r7, #12]

  float water_level = 0;
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	603b      	str	r3, [r7, #0]
  int cnt = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
  	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  		static float x = 0, y = 0, hum = 0, tem = 0;
  		if (TouchRead(&x, &y, &hum))
 8001932:	4a57      	ldr	r2, [pc, #348]	; (8001a90 <main+0x1ac>)
 8001934:	4957      	ldr	r1, [pc, #348]	; (8001a94 <main+0x1b0>)
 8001936:	4858      	ldr	r0, [pc, #352]	; (8001a98 <main+0x1b4>)
 8001938:	f000 fb8b 	bl	8002052 <TouchRead>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d041      	beq.n	80019c6 <main+0xe2>
  		{
  			x = (x - 395) / 3255 * 320;
 8001942:	4b55      	ldr	r3, [pc, #340]	; (8001a98 <main+0x1b4>)
 8001944:	edd3 7a00 	vldr	s15, [r3]
 8001948:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001a9c <main+0x1b8>
 800194c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001950:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001aa0 <main+0x1bc>
 8001954:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001958:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001aa4 <main+0x1c0>
 800195c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001960:	4b4d      	ldr	r3, [pc, #308]	; (8001a98 <main+0x1b4>)
 8001962:	edc3 7a00 	vstr	s15, [r3]
  			y = (y - 430) / 3130 * 240;
 8001966:	4b4b      	ldr	r3, [pc, #300]	; (8001a94 <main+0x1b0>)
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001aa8 <main+0x1c4>
 8001970:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001974:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001aac <main+0x1c8>
 8001978:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800197c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001ab0 <main+0x1cc>
 8001980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001984:	4b43      	ldr	r3, [pc, #268]	; (8001a94 <main+0x1b0>)
 8001986:	edc3 7a00 	vstr	s15, [r3]
  			new_scene = -new_scene;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	425b      	negs	r3, r3
 800198e:	60fb      	str	r3, [r7, #12]
  			if (x<80 && y<60){
 8001990:	4b41      	ldr	r3, [pc, #260]	; (8001a98 <main+0x1b4>)
 8001992:	edd3 7a00 	vldr	s15, [r3]
 8001996:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001ab4 <main+0x1d0>
 800199a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a2:	d510      	bpl.n	80019c6 <main+0xe2>
 80019a4:	4b3b      	ldr	r3, [pc, #236]	; (8001a94 <main+0x1b0>)
 80019a6:	edd3 7a00 	vldr	s15, [r3]
 80019aa:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001ab8 <main+0x1d4>
 80019ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b6:	d506      	bpl.n	80019c6 <main+0xe2>
  				new_scene = -new_scene;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	425b      	negs	r3, r3
 80019bc:	60fb      	str	r3, [r7, #12]
				pump(1000);
 80019be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019c2:	f000 fd69 	bl	8002498 <pump>
			}
  		}

  		tem = temperature_sensor();
 80019c6:	f000 fd7d 	bl	80024c4 <temperature_sensor>
 80019ca:	eef0 7a40 	vmov.f32	s15, s0
 80019ce:	4b3b      	ldr	r3, [pc, #236]	; (8001abc <main+0x1d8>)
 80019d0:	edc3 7a00 	vstr	s15, [r3]
  		hum = 4100 - hum;
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <main+0x1ac>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001ac0 <main+0x1dc>
 80019de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e2:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <main+0x1ac>)
 80019e4:	edc3 7a00 	vstr	s15, [r3]
  		new_state = decider(tem, hum);
 80019e8:	4b34      	ldr	r3, [pc, #208]	; (8001abc <main+0x1d8>)
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <main+0x1ac>)
 80019f0:	ed93 7a00 	vldr	s14, [r3]
 80019f4:	eef0 0a47 	vmov.f32	s1, s14
 80019f8:	eeb0 0a67 	vmov.f32	s0, s15
 80019fc:	f7ff fef8 	bl	80017f0 <decider>
 8001a00:	6078      	str	r0, [r7, #4]

  		if (new_state==4){
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d103      	bne.n	8001a10 <main+0x12c>
  			cnt++;
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	e001      	b.n	8001a14 <main+0x130>
  		}else{
  			cnt = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  		}
  		if (cnt==180){
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2bb4      	cmp	r3, #180	; 0xb4
 8001a18:	d105      	bne.n	8001a26 <main+0x142>
  			pump(2000);
 8001a1a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a1e:	f000 fd3b 	bl	8002498 <pump>
  			cnt = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
  		}

  		if (new_scene == -1){
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2c:	d117      	bne.n	8001a5e <main+0x17a>
  			scene = new_scene;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	613b      	str	r3, [r7, #16]
  		  	info_page(tem, hum, water_level, state);
 8001a32:	4b22      	ldr	r3, [pc, #136]	; (8001abc <main+0x1d8>)
 8001a34:	ed93 7a00 	vldr	s14, [r3]
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <main+0x1ac>)
 8001a3a:	edd3 6a00 	vldr	s13, [r3]
 8001a3e:	edd7 7a00 	vldr	s15, [r7]
 8001a42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a46:	6979      	ldr	r1, [r7, #20]
 8001a48:	ee17 0a90 	vmov	r0, s15
 8001a4c:	eef0 0a66 	vmov.f32	s1, s13
 8001a50:	eeb0 0a47 	vmov.f32	s0, s14
 8001a54:	f7ff fe20 	bl	8001698 <info_page>
  		  	HAL_Delay(100);
 8001a58:	2064      	movs	r0, #100	; 0x64
 8001a5a:	f001 f993 	bl	8002d84 <HAL_Delay>
  		}
  		if (new_state!=state || new_scene!=scene){
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d104      	bne.n	8001a70 <main+0x18c>
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	f43f af61 	beq.w	8001932 <main+0x4e>
  			scene = new_scene;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	613b      	str	r3, [r7, #16]
  			state = new_state;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	617b      	str	r3, [r7, #20]
  			if (scene == 1){
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	f47f af59 	bne.w	8001932 <main+0x4e>
  				test_emoji(state);
 8001a80:	6978      	ldr	r0, [r7, #20]
 8001a82:	f7ff fef1 	bl	8001868 <test_emoji>
  				HAL_Delay(200);
 8001a86:	20c8      	movs	r0, #200	; 0xc8
 8001a88:	f001 f97c 	bl	8002d84 <HAL_Delay>
  	{
 8001a8c:	e751      	b.n	8001932 <main+0x4e>
 8001a8e:	bf00      	nop
 8001a90:	200004b4 	.word	0x200004b4
 8001a94:	200004b0 	.word	0x200004b0
 8001a98:	200004ac 	.word	0x200004ac
 8001a9c:	43c58000 	.word	0x43c58000
 8001aa0:	454b7000 	.word	0x454b7000
 8001aa4:	43a00000 	.word	0x43a00000
 8001aa8:	43d70000 	.word	0x43d70000
 8001aac:	4543a000 	.word	0x4543a000
 8001ab0:	43700000 	.word	0x43700000
 8001ab4:	42a00000 	.word	0x42a00000
 8001ab8:	42700000 	.word	0x42700000
 8001abc:	200004b8 	.word	0x200004b8
 8001ac0:	45802000 	.word	0x45802000

08001ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b096      	sub	sp, #88	; 0x58
 8001ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	2244      	movs	r2, #68	; 0x44
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f006 fece 	bl	8008874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad8:	463b      	mov	r3, r7
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
 8001ae4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f003 fe18 	bl	800571c <HAL_PWREx_ControlVoltageScaling>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001af2:	f000 faa9 	bl	8002048 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001af6:	2310      	movs	r3, #16
 8001af8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001afa:	2301      	movs	r3, #1
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b02:	2360      	movs	r3, #96	; 0x60
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b06:	2302      	movs	r3, #2
 8001b08:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001b12:	233c      	movs	r3, #60	; 0x3c
 8001b14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b16:	2302      	movs	r3, #2
 8001b18:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fe9c 	bl	8005864 <HAL_RCC_OscConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001b32:	f000 fa89 	bl	8002048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b36:	230f      	movs	r3, #15
 8001b38:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	2105      	movs	r1, #5
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f004 faa2 	bl	8006098 <HAL_RCC_ClockConfig>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b5a:	f000 fa75 	bl	8002048 <Error_Handler>
  }
}
 8001b5e:	bf00      	nop
 8001b60:	3758      	adds	r7, #88	; 0x58
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b6e:	463b      	mov	r3, r7
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
 8001b7c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b7e:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <MX_ADC1_Init+0xf4>)
 8001b80:	4a37      	ldr	r2, [pc, #220]	; (8001c60 <MX_ADC1_Init+0xf8>)
 8001b82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001b84:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <MX_ADC1_Init+0xf4>)
 8001b86:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b8c:	4b33      	ldr	r3, [pc, #204]	; (8001c5c <MX_ADC1_Init+0xf4>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b92:	4b32      	ldr	r3, [pc, #200]	; (8001c5c <MX_ADC1_Init+0xf4>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b98:	4b30      	ldr	r3, [pc, #192]	; (8001c5c <MX_ADC1_Init+0xf4>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b9e:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <MX_ADC1_Init+0xf4>)
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001ba4:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <MX_ADC1_Init+0xf4>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001baa:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <MX_ADC1_Init+0xf4>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8001bb0:	4b2a      	ldr	r3, [pc, #168]	; (8001c5c <MX_ADC1_Init+0xf4>)
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bb6:	4b29      	ldr	r3, [pc, #164]	; (8001c5c <MX_ADC1_Init+0xf4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bbe:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <MX_ADC1_Init+0xf4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bc4:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <MX_ADC1_Init+0xf4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bca:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <MX_ADC1_Init+0xf4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bd2:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <MX_ADC1_Init+0xf4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001bd8:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <MX_ADC1_Init+0xf4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001be0:	481e      	ldr	r0, [pc, #120]	; (8001c5c <MX_ADC1_Init+0xf4>)
 8001be2:	f001 facd 	bl	8003180 <HAL_ADC_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001bec:	f000 fa2c 	bl	8002048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <MX_ADC1_Init+0xfc>)
 8001bf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bf4:	2306      	movs	r3, #6
 8001bf6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bfc:	237f      	movs	r3, #127	; 0x7f
 8001bfe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c00:	2304      	movs	r3, #4
 8001c02:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c08:	463b      	mov	r3, r7
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4813      	ldr	r0, [pc, #76]	; (8001c5c <MX_ADC1_Init+0xf4>)
 8001c0e:	f001 fca5 	bl	800355c <HAL_ADC_ConfigChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001c18:	f000 fa16 	bl	8002048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <MX_ADC1_Init+0x100>)
 8001c1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001c20:	230c      	movs	r3, #12
 8001c22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c28:	463b      	mov	r3, r7
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	480b      	ldr	r0, [pc, #44]	; (8001c5c <MX_ADC1_Init+0xf4>)
 8001c2e:	f001 fc95 	bl	800355c <HAL_ADC_ConfigChannel>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8001c38:	f000 fa06 	bl	8002048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001c3c:	2312      	movs	r3, #18
 8001c3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c40:	463b      	mov	r3, r7
 8001c42:	4619      	mov	r1, r3
 8001c44:	4805      	ldr	r0, [pc, #20]	; (8001c5c <MX_ADC1_Init+0xf4>)
 8001c46:	f001 fc89 	bl	800355c <HAL_ADC_ConfigChannel>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001c50:	f000 f9fa 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c54:	bf00      	nop
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000214 	.word	0x20000214
 8001c60:	50040000 	.word	0x50040000
 8001c64:	14f00020 	.word	0x14f00020
 8001c68:	3ac04000 	.word	0x3ac04000

08001c6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <MX_I2C1_Init+0x78>)
 8001c74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8001c76:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c78:	4a1b      	ldr	r2, [pc, #108]	; (8001ce8 <MX_I2C1_Init+0x7c>)
 8001c7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c7c:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c82:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c8e:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ca6:	480e      	ldr	r0, [pc, #56]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001ca8:	f002 ff8e 	bl	8004bc8 <HAL_I2C_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cb2:	f000 f9c9 	bl	8002048 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001cba:	f003 fc77 	bl	80055ac <HAL_I2CEx_ConfigAnalogFilter>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001cc4:	f000 f9c0 	bl	8002048 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001ccc:	f003 fcb9 	bl	8005642 <HAL_I2CEx_ConfigDigitalFilter>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cd6:	f000 f9b7 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200002dc 	.word	0x200002dc
 8001ce4:	40005400 	.word	0x40005400
 8001ce8:	307075b1 	.word	0x307075b1

08001cec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <MX_SPI1_Init+0x74>)
 8001cf2:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <MX_SPI1_Init+0x78>)
 8001cf4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <MX_SPI1_Init+0x74>)
 8001cf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cfe:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <MX_SPI1_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d04:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <MX_SPI1_Init+0x74>)
 8001d06:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <MX_SPI1_Init+0x74>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d12:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <MX_SPI1_Init+0x74>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <MX_SPI1_Init+0x74>)
 8001d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d20:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <MX_SPI1_Init+0x74>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <MX_SPI1_Init+0x74>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <MX_SPI1_Init+0x74>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <MX_SPI1_Init+0x74>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <MX_SPI1_Init+0x74>)
 8001d3a:	2207      	movs	r2, #7
 8001d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <MX_SPI1_Init+0x74>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <MX_SPI1_Init+0x74>)
 8001d46:	2208      	movs	r2, #8
 8001d48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_SPI1_Init+0x74>)
 8001d4c:	f005 f942 	bl	8006fd4 <HAL_SPI_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d56:	f000 f977 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000330 	.word	0x20000330
 8001d64:	40013000 	.word	0x40013000

08001d68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6e:	f107 031c 	add.w	r3, r7, #28
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
 8001d88:	615a      	str	r2, [r3, #20]
 8001d8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d8c:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <MX_TIM2_Init+0xb0>)
 8001d8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8001d94:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <MX_TIM2_Init+0xb0>)
 8001d96:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001d9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9c:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <MX_TIM2_Init+0xb0>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8001da2:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <MX_TIM2_Init+0xb0>)
 8001da4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001da8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001daa:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <MX_TIM2_Init+0xb0>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db0:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <MX_TIM2_Init+0xb0>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001db6:	4818      	ldr	r0, [pc, #96]	; (8001e18 <MX_TIM2_Init+0xb0>)
 8001db8:	f005 fe0c 	bl	80079d4 <HAL_TIM_PWM_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8001dc2:	f000 f941 	bl	8002048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dce:	f107 031c 	add.w	r3, r7, #28
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4810      	ldr	r0, [pc, #64]	; (8001e18 <MX_TIM2_Init+0xb0>)
 8001dd6:	f006 fc9b 	bl	8008710 <HAL_TIMEx_MasterConfigSynchronization>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001de0:	f000 f932 	bl	8002048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001de4:	2360      	movs	r3, #96	; 0x60
 8001de6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001df4:	463b      	mov	r3, r7
 8001df6:	220c      	movs	r2, #12
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4807      	ldr	r0, [pc, #28]	; (8001e18 <MX_TIM2_Init+0xb0>)
 8001dfc:	f005 ffde 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001e06:	f000 f91f 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e0a:	4803      	ldr	r0, [pc, #12]	; (8001e18 <MX_TIM2_Init+0xb0>)
 8001e0c:	f000 fdac 	bl	8002968 <HAL_TIM_MspPostInit>

}
 8001e10:	bf00      	nop
 8001e12:	3728      	adds	r7, #40	; 0x28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	200003f4 	.word	0x200003f4

08001e1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e22:	f107 031c 	add.w	r3, r7, #28
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e2e:	463b      	mov	r3, r7
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
 8001e3c:	615a      	str	r2, [r3, #20]
 8001e3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e40:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <MX_TIM4_Init+0xb0>)
 8001e42:	4a23      	ldr	r2, [pc, #140]	; (8001ed0 <MX_TIM4_Init+0xb4>)
 8001e44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3999;
 8001e46:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <MX_TIM4_Init+0xb0>)
 8001e48:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001e4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <MX_TIM4_Init+0xb0>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <MX_TIM4_Init+0xb0>)
 8001e56:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001e5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <MX_TIM4_Init+0xb0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e62:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <MX_TIM4_Init+0xb0>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e68:	4818      	ldr	r0, [pc, #96]	; (8001ecc <MX_TIM4_Init+0xb0>)
 8001e6a:	f005 fdb3 	bl	80079d4 <HAL_TIM_PWM_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8001e74:	f000 f8e8 	bl	8002048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	4619      	mov	r1, r3
 8001e86:	4811      	ldr	r0, [pc, #68]	; (8001ecc <MX_TIM4_Init+0xb0>)
 8001e88:	f006 fc42 	bl	8008710 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8001e92:	f000 f8d9 	bl	8002048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e96:	2360      	movs	r3, #96	; 0x60
 8001e98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4807      	ldr	r0, [pc, #28]	; (8001ecc <MX_TIM4_Init+0xb0>)
 8001eae:	f005 ff85 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001eb8:	f000 f8c6 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ebc:	4803      	ldr	r0, [pc, #12]	; (8001ecc <MX_TIM4_Init+0xb0>)
 8001ebe:	f000 fd53 	bl	8002968 <HAL_TIM_MspPostInit>

}
 8001ec2:	bf00      	nop
 8001ec4:	3728      	adds	r7, #40	; 0x28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000440 	.word	0x20000440
 8001ed0:	40000800 	.word	0x40000800

08001ed4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <MX_DMA_Init+0x60>)
 8001edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ede:	4a15      	ldr	r2, [pc, #84]	; (8001f34 <MX_DMA_Init+0x60>)
 8001ee0:	f043 0304 	orr.w	r3, r3, #4
 8001ee4:	6493      	str	r3, [r2, #72]	; 0x48
 8001ee6:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <MX_DMA_Init+0x60>)
 8001ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <MX_DMA_Init+0x60>)
 8001ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef6:	4a0f      	ldr	r2, [pc, #60]	; (8001f34 <MX_DMA_Init+0x60>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6493      	str	r3, [r2, #72]	; 0x48
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <MX_DMA_Init+0x60>)
 8001f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	200b      	movs	r0, #11
 8001f10:	f002 f915 	bl	800413e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f14:	200b      	movs	r0, #11
 8001f16:	f002 f92e 	bl	8004176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	200c      	movs	r0, #12
 8001f20:	f002 f90d 	bl	800413e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001f24:	200c      	movs	r0, #12
 8001f26:	f002 f926 	bl	8004176 <HAL_NVIC_EnableIRQ>

}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000

08001f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08c      	sub	sp, #48	; 0x30
 8001f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3e:	f107 031c 	add.w	r3, r7, #28
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f4e:	4b3b      	ldr	r3, [pc, #236]	; (800203c <MX_GPIO_Init+0x104>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	4a3a      	ldr	r2, [pc, #232]	; (800203c <MX_GPIO_Init+0x104>)
 8001f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5a:	4b38      	ldr	r3, [pc, #224]	; (800203c <MX_GPIO_Init+0x104>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	4b35      	ldr	r3, [pc, #212]	; (800203c <MX_GPIO_Init+0x104>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	4a34      	ldr	r2, [pc, #208]	; (800203c <MX_GPIO_Init+0x104>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f72:	4b32      	ldr	r3, [pc, #200]	; (800203c <MX_GPIO_Init+0x104>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7e:	4b2f      	ldr	r3, [pc, #188]	; (800203c <MX_GPIO_Init+0x104>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	4a2e      	ldr	r2, [pc, #184]	; (800203c <MX_GPIO_Init+0x104>)
 8001f84:	f043 0304 	orr.w	r3, r3, #4
 8001f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f8a:	4b2c      	ldr	r3, [pc, #176]	; (800203c <MX_GPIO_Init+0x104>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f96:	4b29      	ldr	r3, [pc, #164]	; (800203c <MX_GPIO_Init+0x104>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	4a28      	ldr	r2, [pc, #160]	; (800203c <MX_GPIO_Init+0x104>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa2:	4b26      	ldr	r3, [pc, #152]	; (800203c <MX_GPIO_Init+0x104>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fae:	4b23      	ldr	r3, [pc, #140]	; (800203c <MX_GPIO_Init+0x104>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb2:	4a22      	ldr	r2, [pc, #136]	; (800203c <MX_GPIO_Init+0x104>)
 8001fb4:	f043 0320 	orr.w	r3, r3, #32
 8001fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <MX_GPIO_Init+0x104>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	f003 0320 	and.w	r3, r3, #32
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <MX_GPIO_Init+0x104>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	4a1c      	ldr	r2, [pc, #112]	; (800203c <MX_GPIO_Init+0x104>)
 8001fcc:	f043 0308 	orr.w	r3, r3, #8
 8001fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	; (800203c <MX_GPIO_Init+0x104>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_RESET);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe4:	4816      	ldr	r0, [pc, #88]	; (8002040 <MX_GPIO_Init+0x108>)
 8001fe6:	f002 fdd7 	bl	8004b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI_CS_Pin|SPI_D_C_Pin, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001ff0:	4814      	ldr	r0, [pc, #80]	; (8002044 <MX_GPIO_Init+0x10c>)
 8001ff2:	f002 fdd1 	bl	8004b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_RST_Pin */
  GPIO_InitStruct.Pin = SPI_RST_Pin;
 8001ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_RST_GPIO_Port, &GPIO_InitStruct);
 8002008:	f107 031c 	add.w	r3, r7, #28
 800200c:	4619      	mov	r1, r3
 800200e:	480c      	ldr	r0, [pc, #48]	; (8002040 <MX_GPIO_Init+0x108>)
 8002010:	f002 fb3e 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin SPI_D_C_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|SPI_D_C_Pin;
 8002014:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201a:	2301      	movs	r3, #1
 800201c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002026:	f107 031c 	add.w	r3, r7, #28
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_GPIO_Init+0x10c>)
 800202e:	f002 fb2f 	bl	8004690 <HAL_GPIO_Init>

}
 8002032:	bf00      	nop
 8002034:	3730      	adds	r7, #48	; 0x30
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	48001400 	.word	0x48001400
 8002044:	48000c00 	.word	0x48000c00

08002048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800204c:	b672      	cpsid	i
}
 800204e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002050:	e7fe      	b.n	8002050 <Error_Handler+0x8>

08002052 <TouchRead>:

/*global variable in the main*/
extern ADC_HandleTypeDef hadc1;
extern ADC_ChannelConfTypeDef sConfig_read;

int TouchRead(float *x, float *y, float *m) {
 8002052:	b580      	push	{r7, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
	X_Init();
 800205e:	f000 f8e1 	bl	8002224 <X_Init>
	*x = Read_axis();
 8002062:	f000 f86d 	bl	8002140 <Read_axis>
 8002066:	eef0 7a40 	vmov.f32	s15, s0
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	edc3 7a00 	vstr	s15, [r3]
	Y_Init();
 8002070:	f000 f8fe 	bl	8002270 <Y_Init>
	*y = Read_axis();
 8002074:	f000 f864 	bl	8002140 <Read_axis>
 8002078:	eef0 7a40 	vmov.f32	s15, s0
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	edc3 7a00 	vstr	s15, [r3]
	*m = Read_mois();
 8002082:	f000 f897 	bl	80021b4 <Read_mois>
 8002086:	eef0 7a40 	vmov.f32	s15, s0
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	edc3 7a00 	vstr	s15, [r3]
	if (*x == 0 || *y == 0) {
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	edd3 7a00 	vldr	s15, [r3]
 8002096:	eef5 7a40 	vcmp.f32	s15, #0.0
 800209a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800209e:	d007      	beq.n	80020b0 <TouchRead+0x5e>
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ae:	d101      	bne.n	80020b4 <TouchRead+0x62>
		return 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e000      	b.n	80020b6 <TouchRead+0x64>
	}
	return 1;
 80020b4:	2301      	movs	r3, #1
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <Touch_Init>:

void Touch_Init() {
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80020c6:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <Touch_Init+0x78>)
 80020c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ca:	4a1b      	ldr	r2, [pc, #108]	; (8002138 <Touch_Init+0x78>)
 80020cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d2:	4b19      	ldr	r3, [pc, #100]	; (8002138 <Touch_Init+0x78>)
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80020de:	4b16      	ldr	r3, [pc, #88]	; (8002138 <Touch_Init+0x78>)
 80020e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e2:	4a15      	ldr	r2, [pc, #84]	; (8002138 <Touch_Init+0x78>)
 80020e4:	f043 0304 	orr.w	r3, r3, #4
 80020e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ea:	4b13      	ldr	r3, [pc, #76]	; (8002138 <Touch_Init+0x78>)
 80020ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <Touch_Init+0x78>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	4a0f      	ldr	r2, [pc, #60]	; (8002138 <Touch_Init+0x78>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <Touch_Init+0x78>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	687b      	ldr	r3, [r7, #4]

	sConfig_read.Rank = ADC_REGULAR_RANK_3;
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <Touch_Init+0x7c>)
 8002110:	2212      	movs	r2, #18
 8002112:	605a      	str	r2, [r3, #4]
	sConfig_read.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <Touch_Init+0x7c>)
 8002116:	2207      	movs	r2, #7
 8002118:	609a      	str	r2, [r3, #8]
	sConfig_read.SingleDiff = ADC_SINGLE_ENDED;
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <Touch_Init+0x7c>)
 800211c:	227f      	movs	r2, #127	; 0x7f
 800211e:	60da      	str	r2, [r3, #12]
	sConfig_read.OffsetNumber = ADC_OFFSET_NONE;
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <Touch_Init+0x7c>)
 8002122:	2204      	movs	r2, #4
 8002124:	611a      	str	r2, [r3, #16]
	sConfig_read.Offset = 0;
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <Touch_Init+0x7c>)
 8002128:	2200      	movs	r2, #0
 800212a:	615a      	str	r2, [r3, #20]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	40021000 	.word	0x40021000
 800213c:	200001fc 	.word	0x200001fc

08002140 <Read_axis>:

float Read_axis() {
 8002140:	b580      	push	{r7, lr}
 8002142:	b08e      	sub	sp, #56	; 0x38
 8002144:	af00      	add	r7, sp, #0
	X_Init();
 8002146:	f000 f86d 	bl	8002224 <X_Init>
	uint32_t tmp[10] = { 0 };
 800214a:	f107 030c 	add.w	r3, r7, #12
 800214e:	2228      	movs	r2, #40	; 0x28
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f006 fb8e 	bl	8008874 <memset>
	//fix the numbers of conversions
	uint32_t buf[3] = { 0 };
 8002158:	463b      	mov	r3, r7
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < 10; i++) {
 8002162:	2300      	movs	r3, #0
 8002164:	637b      	str	r3, [r7, #52]	; 0x34
 8002166:	e012      	b.n	800218e <Read_axis+0x4e>
		//fix the numbers of conversions
		HAL_ADC_Start_DMA(&hadc1, buf, 3);
 8002168:	463b      	mov	r3, r7
 800216a:	2203      	movs	r2, #3
 800216c:	4619      	mov	r1, r3
 800216e:	4810      	ldr	r0, [pc, #64]	; (80021b0 <Read_axis+0x70>)
 8002170:	f001 f952 	bl	8003418 <HAL_ADC_Start_DMA>
		HAL_Delay(1);
 8002174:	2001      	movs	r0, #1
 8002176:	f000 fe05 	bl	8002d84 <HAL_Delay>
		tmp[i] = buf[2];
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	3338      	adds	r3, #56	; 0x38
 8002182:	443b      	add	r3, r7
 8002184:	f843 2c2c 	str.w	r2, [r3, #-44]
	for (int i = 0; i < 10; i++) {
 8002188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218a:	3301      	adds	r3, #1
 800218c:	637b      	str	r3, [r7, #52]	; 0x34
 800218e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002190:	2b09      	cmp	r3, #9
 8002192:	dde9      	ble.n	8002168 <Read_axis+0x28>
	}
	return median(tmp, 10);
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	210a      	movs	r1, #10
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f924 	bl	80023e8 <median>
 80021a0:	eef0 7a40 	vmov.f32	s15, s0
}
 80021a4:	eeb0 0a67 	vmov.f32	s0, s15
 80021a8:	3738      	adds	r7, #56	; 0x38
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000214 	.word	0x20000214

080021b4 <Read_mois>:

float Read_mois(){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08e      	sub	sp, #56	; 0x38
 80021b8:	af00      	add	r7, sp, #0
	uint32_t tmp[10] = { 0 };
 80021ba:	f107 030c 	add.w	r3, r7, #12
 80021be:	2228      	movs	r2, #40	; 0x28
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f006 fb56 	bl	8008874 <memset>
	//fix the numbers of conversions
	uint32_t buf[3] = { 0 };
 80021c8:	463b      	mov	r3, r7
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < 10; i++) {
 80021d2:	2300      	movs	r3, #0
 80021d4:	637b      	str	r3, [r7, #52]	; 0x34
 80021d6:	e012      	b.n	80021fe <Read_mois+0x4a>
		//fix the numbers of conversions
		HAL_ADC_Start_DMA(&hadc1, buf, 3);
 80021d8:	463b      	mov	r3, r7
 80021da:	2203      	movs	r2, #3
 80021dc:	4619      	mov	r1, r3
 80021de:	4810      	ldr	r0, [pc, #64]	; (8002220 <Read_mois+0x6c>)
 80021e0:	f001 f91a 	bl	8003418 <HAL_ADC_Start_DMA>
		HAL_Delay(1);
 80021e4:	2001      	movs	r0, #1
 80021e6:	f000 fdcd 	bl	8002d84 <HAL_Delay>
		tmp[i] = buf[0];
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	3338      	adds	r3, #56	; 0x38
 80021f2:	443b      	add	r3, r7
 80021f4:	f843 2c2c 	str.w	r2, [r3, #-44]
	for (int i = 0; i < 10; i++) {
 80021f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fa:	3301      	adds	r3, #1
 80021fc:	637b      	str	r3, [r7, #52]	; 0x34
 80021fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002200:	2b09      	cmp	r3, #9
 8002202:	dde9      	ble.n	80021d8 <Read_mois+0x24>
	}
	return median(tmp, 10);
 8002204:	f107 030c 	add.w	r3, r7, #12
 8002208:	210a      	movs	r1, #10
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f8ec 	bl	80023e8 <median>
 8002210:	eef0 7a40 	vmov.f32	s15, s0
}
 8002214:	eeb0 0a67 	vmov.f32	s0, s15
 8002218:	3738      	adds	r7, #56	; 0x38
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000214 	.word	0x20000214

08002224 <X_Init>:

void X_Init(void) {
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
	//use X-,Y+,Y-
	HAL_GPIO_DeInit(Y_NEG_PORT, Y_NEG_PIN);
 8002228:	2102      	movs	r1, #2
 800222a:	480d      	ldr	r0, [pc, #52]	; (8002260 <X_Init+0x3c>)
 800222c:	f002 fbc2 	bl	80049b4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(X_POS_PORT, X_POS_PIN);
 8002230:	2101      	movs	r1, #1
 8002232:	480b      	ldr	r0, [pc, #44]	; (8002260 <X_Init+0x3c>)
 8002234:	f002 fbbe 	bl	80049b4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(X_NEG_PORT, X_NEG_PIN);
 8002238:	2104      	movs	r1, #4
 800223a:	4809      	ldr	r0, [pc, #36]	; (8002260 <X_Init+0x3c>)
 800223c:	f002 fbba 	bl	80049b4 <HAL_GPIO_DeInit>
	MX_GPIO_InitX();
 8002240:	f000 f83c 	bl	80022bc <MX_GPIO_InitX>
	sConfig_read.Channel = X_POS_ADC_CHANNEL;
 8002244:	4b07      	ldr	r3, [pc, #28]	; (8002264 <X_Init+0x40>)
 8002246:	4a08      	ldr	r2, [pc, #32]	; (8002268 <X_Init+0x44>)
 8002248:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig_read) != HAL_OK) {
 800224a:	4906      	ldr	r1, [pc, #24]	; (8002264 <X_Init+0x40>)
 800224c:	4807      	ldr	r0, [pc, #28]	; (800226c <X_Init+0x48>)
 800224e:	f001 f985 	bl	800355c <HAL_ADC_ConfigChannel>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <X_Init+0x38>
		Error_Handler1();
 8002258:	f000 f8b0 	bl	80023bc <Error_Handler1>
	}
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}
 8002260:	48000800 	.word	0x48000800
 8002264:	200001fc 	.word	0x200001fc
 8002268:	04300002 	.word	0x04300002
 800226c:	20000214 	.word	0x20000214

08002270 <Y_Init>:

void Y_Init(void) {
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	//use Y-, X+, X-
	HAL_GPIO_DeInit(X_NEG_PORT, X_NEG_PIN);
 8002274:	2104      	movs	r1, #4
 8002276:	480d      	ldr	r0, [pc, #52]	; (80022ac <Y_Init+0x3c>)
 8002278:	f002 fb9c 	bl	80049b4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Y_POS_PORT, Y_POS_PIN);
 800227c:	2108      	movs	r1, #8
 800227e:	480b      	ldr	r0, [pc, #44]	; (80022ac <Y_Init+0x3c>)
 8002280:	f002 fb98 	bl	80049b4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Y_NEG_PORT, Y_NEG_PIN);
 8002284:	2102      	movs	r1, #2
 8002286:	4809      	ldr	r0, [pc, #36]	; (80022ac <Y_Init+0x3c>)
 8002288:	f002 fb94 	bl	80049b4 <HAL_GPIO_DeInit>
	MX_GPIO_InitY();
 800228c:	f000 f856 	bl	800233c <MX_GPIO_InitY>
	sConfig_read.Channel = Y_POS_ADC_CHANNEL;
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <Y_Init+0x40>)
 8002292:	4a08      	ldr	r2, [pc, #32]	; (80022b4 <Y_Init+0x44>)
 8002294:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig_read) != HAL_OK) {
 8002296:	4906      	ldr	r1, [pc, #24]	; (80022b0 <Y_Init+0x40>)
 8002298:	4807      	ldr	r0, [pc, #28]	; (80022b8 <Y_Init+0x48>)
 800229a:	f001 f95f 	bl	800355c <HAL_ADC_ConfigChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <Y_Init+0x38>
		Error_Handler1();
 80022a4:	f000 f88a 	bl	80023bc <Error_Handler1>
	}
}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	48000800 	.word	0x48000800
 80022b0:	200001fc 	.word	0x200001fc
 80022b4:	10c00010 	.word	0x10c00010
 80022b8:	20000214 	.word	0x20000214

080022bc <MX_GPIO_InitX>:

void MX_GPIO_InitX(void) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Y_NEG_PORT, Y_NEG_PIN, GPIO_PIN_RESET); //Y-
 80022d0:	2200      	movs	r2, #0
 80022d2:	2102      	movs	r1, #2
 80022d4:	4818      	ldr	r0, [pc, #96]	; (8002338 <MX_GPIO_InitX+0x7c>)
 80022d6:	f002 fc5f 	bl	8004b98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Y_POS_PORT, Y_POS_PIN, GPIO_PIN_SET); //Y+
 80022da:	2201      	movs	r2, #1
 80022dc:	2108      	movs	r1, #8
 80022de:	4816      	ldr	r0, [pc, #88]	; (8002338 <MX_GPIO_InitX+0x7c>)
 80022e0:	f002 fc5a 	bl	8004b98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC1 */
	GPIO_InitStruct.Pin = Y_NEG_PIN;
 80022e4:	2302      	movs	r3, #2
 80022e6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e8:	2301      	movs	r3, #1
 80022ea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022ec:	2302      	movs	r3, #2
 80022ee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Y_NEG_PORT, &GPIO_InitStruct);
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	4619      	mov	r1, r3
 80022f8:	480f      	ldr	r0, [pc, #60]	; (8002338 <MX_GPIO_InitX+0x7c>)
 80022fa:	f002 f9c9 	bl	8004690 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC2 */ //X-
	GPIO_InitStruct.Pin = X_NEG_PIN;
 80022fe:	2304      	movs	r3, #4
 8002300:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(X_NEG_PORT, &GPIO_InitStruct);
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	4619      	mov	r1, r3
 800230e:	480a      	ldr	r0, [pc, #40]	; (8002338 <MX_GPIO_InitX+0x7c>)
 8002310:	f002 f9be 	bl	8004690 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC3 */
	GPIO_InitStruct.Pin = Y_POS_PIN;
 8002314:	2308      	movs	r3, #8
 8002316:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002318:	2301      	movs	r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800231c:	2301      	movs	r3, #1
 800231e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Y_POS_PORT, &GPIO_InitStruct);
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	4619      	mov	r1, r3
 8002328:	4803      	ldr	r0, [pc, #12]	; (8002338 <MX_GPIO_InitX+0x7c>)
 800232a:	f002 f9b1 	bl	8004690 <HAL_GPIO_Init>

}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	48000800 	.word	0x48000800

0800233c <MX_GPIO_InitY>:

void MX_GPIO_InitY(void) {
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(X_NEG_PORT, X_NEG_PIN, GPIO_PIN_RESET);
 8002350:	2200      	movs	r2, #0
 8002352:	2104      	movs	r1, #4
 8002354:	4818      	ldr	r0, [pc, #96]	; (80023b8 <MX_GPIO_InitY+0x7c>)
 8002356:	f002 fc1f 	bl	8004b98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(X_POS_PORT, X_POS_PIN, GPIO_PIN_SET);
 800235a:	2201      	movs	r2, #1
 800235c:	2101      	movs	r1, #1
 800235e:	4816      	ldr	r0, [pc, #88]	; (80023b8 <MX_GPIO_InitY+0x7c>)
 8002360:	f002 fc1a 	bl	8004b98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC2 */
	GPIO_InitStruct.Pin = X_NEG_PIN;
 8002364:	2304      	movs	r3, #4
 8002366:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002368:	2301      	movs	r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800236c:	2302      	movs	r3, #2
 800236e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(X_NEG_PORT, &GPIO_InitStruct);
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	4619      	mov	r1, r3
 8002378:	480f      	ldr	r0, [pc, #60]	; (80023b8 <MX_GPIO_InitY+0x7c>)
 800237a:	f002 f989 	bl	8004690 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC1 */
	GPIO_InitStruct.Pin = Y_NEG_PIN;
 800237e:	2302      	movs	r3, #2
 8002380:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(Y_NEG_PORT, &GPIO_InitStruct);
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	4619      	mov	r1, r3
 800238e:	480a      	ldr	r0, [pc, #40]	; (80023b8 <MX_GPIO_InitY+0x7c>)
 8002390:	f002 f97e 	bl	8004690 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = X_POS_PIN;
 8002394:	2301      	movs	r3, #1
 8002396:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002398:	2301      	movs	r3, #1
 800239a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800239c:	2301      	movs	r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(X_POS_PORT, &GPIO_InitStruct);
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	4619      	mov	r1, r3
 80023a8:	4803      	ldr	r0, [pc, #12]	; (80023b8 <MX_GPIO_InitY+0x7c>)
 80023aa:	f002 f971 	bl	8004690 <HAL_GPIO_Init>

}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	48000800 	.word	0x48000800

080023bc <Error_Handler1>:

void Error_Handler1(void) {
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80023c0:	b672      	cpsid	i
}
 80023c2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023c4:	e7fe      	b.n	80023c4 <Error_Handler1+0x8>

080023c6 <compare>:
	}
	/* USER CODE END Error_Handler_Debug */
}

int compare(const void *a, const void *b) {
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	6039      	str	r1, [r7, #0]
	return (*(uint32_t*) a - *(uint32_t*) b);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	1ad3      	subs	r3, r2, r3
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <median>:

float median(uint32_t arr[], int n) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
	qsort(arr, n, sizeof(uint32_t), compare);
 80023f2:	6839      	ldr	r1, [r7, #0]
 80023f4:	4b26      	ldr	r3, [pc, #152]	; (8002490 <median+0xa8>)
 80023f6:	2204      	movs	r2, #4
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f006 fee5 	bl	80091c8 <qsort>
	if (arr[n - 1] - arr[0] > 50)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002404:	3b01      	subs	r3, #1
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	4413      	add	r3, r2
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b32      	cmp	r3, #50	; 0x32
 8002416:	d902      	bls.n	800241e <median+0x36>
		return 0;
 8002418:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002494 <median+0xac>
 800241c:	e032      	b.n	8002484 <median+0x9c>
	if (n % 2 == 0) {
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d121      	bne.n	800246c <median+0x84>
		return ((float) arr[n / 2 - 1] + (float) arr[n / 2]) / 2.0;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	0fda      	lsrs	r2, r3, #31
 800242c:	4413      	add	r3, r2
 800242e:	105b      	asrs	r3, r3, #1
 8002430:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002434:	3b01      	subs	r3, #1
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	4413      	add	r3, r2
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	ee07 3a90 	vmov	s15, r3
 8002442:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	0fda      	lsrs	r2, r3, #31
 800244a:	4413      	add	r3, r2
 800244c:	105b      	asrs	r3, r3, #1
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	4413      	add	r3, r2
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800245e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002462:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002466:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800246a:	e00b      	b.n	8002484 <median+0x9c>
	} else {
		return (float) arr[n / 2];
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	0fda      	lsrs	r2, r3, #31
 8002470:	4413      	add	r3, r2
 8002472:	105b      	asrs	r3, r3, #1
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	ee07 3a90 	vmov	s15, r3
 8002480:	eef8 7a67 	vcvt.f32.u32	s15, s15
	}
}
 8002484:	eeb0 0a67 	vmov.f32	s0, s15
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	080023c7 	.word	0x080023c7
 8002494:	00000000 	.word	0x00000000

08002498 <pump>:
	ADC_VAL = buf[0];
	return ADC_VAL;
}


void pump(uint32_t moisture){
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	//FIXME: moisture_map
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80024a0:	210c      	movs	r1, #12
 80024a2:	4807      	ldr	r0, [pc, #28]	; (80024c0 <pump+0x28>)
 80024a4:	f005 faee 	bl	8007a84 <HAL_TIM_PWM_Start>
	HAL_Delay(moisture);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fc6b 	bl	8002d84 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80024ae:	210c      	movs	r1, #12
 80024b0:	4803      	ldr	r0, [pc, #12]	; (80024c0 <pump+0x28>)
 80024b2:	f005 fbed 	bl	8007c90 <HAL_TIM_PWM_Stop>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200003f4 	.word	0x200003f4

080024c4 <temperature_sensor>:


float temperature_sensor(){
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint8_t buf[12];
	int16_t val;
	float temp_c;
    // Tell TMP102 that we want to read from the temperature register
    buf[0] = REG_TEMP;
 80024ca:	2300      	movs	r3, #0
 80024cc:	713b      	strb	r3, [r7, #4]
    ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 80024ce:	2390      	movs	r3, #144	; 0x90
 80024d0:	b299      	uxth	r1, r3
 80024d2:	1d3a      	adds	r2, r7, #4
 80024d4:	f04f 33ff 	mov.w	r3, #4294967295
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	2301      	movs	r3, #1
 80024dc:	4824      	ldr	r0, [pc, #144]	; (8002570 <temperature_sensor+0xac>)
 80024de:	f002 fc03 	bl	8004ce8 <HAL_I2C_Master_Transmit>
 80024e2:	4603      	mov	r3, r0
 80024e4:	757b      	strb	r3, [r7, #21]
    if ( ret != HAL_OK ) {
 80024e6:	7d7b      	ldrb	r3, [r7, #21]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <temperature_sensor+0x2c>
    	return -1;
 80024ec:	4b21      	ldr	r3, [pc, #132]	; (8002574 <temperature_sensor+0xb0>)
 80024ee:	e037      	b.n	8002560 <temperature_sensor+0x9c>
    } else {

      // Read 2 bytes from the temperature register
      ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 80024f0:	2390      	movs	r3, #144	; 0x90
 80024f2:	b299      	uxth	r1, r3
 80024f4:	1d3a      	adds	r2, r7, #4
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	2302      	movs	r3, #2
 80024fe:	481c      	ldr	r0, [pc, #112]	; (8002570 <temperature_sensor+0xac>)
 8002500:	f002 fce6 	bl	8004ed0 <HAL_I2C_Master_Receive>
 8002504:	4603      	mov	r3, r0
 8002506:	757b      	strb	r3, [r7, #21]
      if ( ret != HAL_OK ) {
 8002508:	7d7b      	ldrb	r3, [r7, #21]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <temperature_sensor+0x4e>
//        strcpy((char*)buf, "Error Rx\r\n");
    	  return -1;
 800250e:	4b19      	ldr	r3, [pc, #100]	; (8002574 <temperature_sensor+0xb0>)
 8002510:	e026      	b.n	8002560 <temperature_sensor+0x9c>
      } else {

        //Combine the bytes
        val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 8002512:	793b      	ldrb	r3, [r7, #4]
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	b21a      	sxth	r2, r3
 8002518:	797b      	ldrb	r3, [r7, #5]
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	b2db      	uxtb	r3, r3
 800251e:	b21b      	sxth	r3, r3
 8002520:	4313      	orrs	r3, r2
 8002522:	82fb      	strh	r3, [r7, #22]

        // Convert to 2's complement, since temperature can be negative
        if ( val > 0x7FF ) {
 8002524:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800252c:	db05      	blt.n	800253a <temperature_sensor+0x76>
          val |= 0xF000;
 800252e:	8afb      	ldrh	r3, [r7, #22]
 8002530:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8002534:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8002538:	82fb      	strh	r3, [r7, #22]
        }

        // Convert to float temperature value (Celsius)
        temp_c = val * 0.0625;
 800253a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe f808 	bl	8000554 <__aeabi_i2d>
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <temperature_sensor+0xb4>)
 800254a:	f7fe f86d 	bl	8000628 <__aeabi_dmul>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4610      	mov	r0, r2
 8002554:	4619      	mov	r1, r3
 8002556:	f7fe fb3f 	bl	8000bd8 <__aeabi_d2f>
 800255a:	4603      	mov	r3, r0
 800255c:	613b      	str	r3, [r7, #16]
//              ((unsigned int)temp_c % 100));
      }
    }

    // Send out buffer (temperature or error message)
    return temp_c;
 800255e:	693b      	ldr	r3, [r7, #16]
//    HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);

    // Wait
//    HAL_Delay(500);

}
 8002560:	ee07 3a90 	vmov	s15, r3
 8002564:	eeb0 0a67 	vmov.f32	s0, s15
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200002dc 	.word	0x200002dc
 8002574:	bf800000 	.word	0xbf800000
 8002578:	3fb00000 	.word	0x3fb00000

0800257c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002582:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <HAL_MspInit+0x44>)
 8002584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002586:	4a0e      	ldr	r2, [pc, #56]	; (80025c0 <HAL_MspInit+0x44>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6613      	str	r3, [r2, #96]	; 0x60
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <HAL_MspInit+0x44>)
 8002590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800259a:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <HAL_MspInit+0x44>)
 800259c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259e:	4a08      	ldr	r2, [pc, #32]	; (80025c0 <HAL_MspInit+0x44>)
 80025a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a4:	6593      	str	r3, [r2, #88]	; 0x58
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_MspInit+0x44>)
 80025a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000

080025c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b0b0      	sub	sp, #192	; 0xc0
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025dc:	f107 0318 	add.w	r3, r7, #24
 80025e0:	2294      	movs	r2, #148	; 0x94
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f006 f945 	bl	8008874 <memset>
  if(hadc->Instance==ADC1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a58      	ldr	r2, [pc, #352]	; (8002750 <HAL_ADC_MspInit+0x18c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	f040 80a9 	bne.w	8002748 <HAL_ADC_MspInit+0x184>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80025f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80025fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002604:	2301      	movs	r3, #1
 8002606:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002608:	2301      	movs	r3, #1
 800260a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800260c:	2310      	movs	r3, #16
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002610:	2302      	movs	r3, #2
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002614:	2302      	movs	r3, #2
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002618:	2302      	movs	r3, #2
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800261c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002620:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002622:	f107 0318 	add.w	r3, r7, #24
 8002626:	4618      	mov	r0, r3
 8002628:	f003 ffbc 	bl	80065a4 <HAL_RCCEx_PeriphCLKConfig>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8002632:	f7ff fd09 	bl	8002048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002636:	4b47      	ldr	r3, [pc, #284]	; (8002754 <HAL_ADC_MspInit+0x190>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	4a46      	ldr	r2, [pc, #280]	; (8002754 <HAL_ADC_MspInit+0x190>)
 800263c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002642:	4b44      	ldr	r3, [pc, #272]	; (8002754 <HAL_ADC_MspInit+0x190>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002646:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264e:	4b41      	ldr	r3, [pc, #260]	; (8002754 <HAL_ADC_MspInit+0x190>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	4a40      	ldr	r2, [pc, #256]	; (8002754 <HAL_ADC_MspInit+0x190>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800265a:	4b3e      	ldr	r3, [pc, #248]	; (8002754 <HAL_ADC_MspInit+0x190>)
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002666:	4b3b      	ldr	r3, [pc, #236]	; (8002754 <HAL_ADC_MspInit+0x190>)
 8002668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266a:	4a3a      	ldr	r2, [pc, #232]	; (8002754 <HAL_ADC_MspInit+0x190>)
 800266c:	f043 0304 	orr.w	r3, r3, #4
 8002670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002672:	4b38      	ldr	r3, [pc, #224]	; (8002754 <HAL_ADC_MspInit+0x190>)
 8002674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800267e:	4b35      	ldr	r3, [pc, #212]	; (8002754 <HAL_ADC_MspInit+0x190>)
 8002680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002682:	4a34      	ldr	r2, [pc, #208]	; (8002754 <HAL_ADC_MspInit+0x190>)
 8002684:	f043 0302 	orr.w	r3, r3, #2
 8002688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800268a:	4b32      	ldr	r3, [pc, #200]	; (8002754 <HAL_ADC_MspInit+0x190>)
 800268c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002696:	2301      	movs	r3, #1
 8002698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800269c:	230b      	movs	r3, #11
 800269e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80026ac:	4619      	mov	r1, r3
 80026ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026b2:	f001 ffed 	bl	8004690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026b6:	2320      	movs	r3, #32
 80026b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80026bc:	230b      	movs	r3, #11
 80026be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80026cc:	4619      	mov	r1, r3
 80026ce:	4822      	ldr	r0, [pc, #136]	; (8002758 <HAL_ADC_MspInit+0x194>)
 80026d0:	f001 ffde 	bl	8004690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026d4:	2301      	movs	r3, #1
 80026d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80026da:	230b      	movs	r3, #11
 80026dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80026ea:	4619      	mov	r1, r3
 80026ec:	481b      	ldr	r0, [pc, #108]	; (800275c <HAL_ADC_MspInit+0x198>)
 80026ee:	f001 ffcf 	bl	8004690 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80026f2:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <HAL_ADC_MspInit+0x19c>)
 80026f4:	4a1b      	ldr	r2, [pc, #108]	; (8002764 <HAL_ADC_MspInit+0x1a0>)
 80026f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80026f8:	4b19      	ldr	r3, [pc, #100]	; (8002760 <HAL_ADC_MspInit+0x19c>)
 80026fa:	2205      	movs	r2, #5
 80026fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026fe:	4b18      	ldr	r3, [pc, #96]	; (8002760 <HAL_ADC_MspInit+0x19c>)
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002704:	4b16      	ldr	r3, [pc, #88]	; (8002760 <HAL_ADC_MspInit+0x19c>)
 8002706:	2200      	movs	r2, #0
 8002708:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800270a:	4b15      	ldr	r3, [pc, #84]	; (8002760 <HAL_ADC_MspInit+0x19c>)
 800270c:	2280      	movs	r2, #128	; 0x80
 800270e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002710:	4b13      	ldr	r3, [pc, #76]	; (8002760 <HAL_ADC_MspInit+0x19c>)
 8002712:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002716:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <HAL_ADC_MspInit+0x19c>)
 800271a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800271e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002720:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <HAL_ADC_MspInit+0x19c>)
 8002722:	2220      	movs	r2, #32
 8002724:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002726:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <HAL_ADC_MspInit+0x19c>)
 8002728:	2200      	movs	r2, #0
 800272a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800272c:	480c      	ldr	r0, [pc, #48]	; (8002760 <HAL_ADC_MspInit+0x19c>)
 800272e:	f001 fd3d 	bl	80041ac <HAL_DMA_Init>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_ADC_MspInit+0x178>
    {
      Error_Handler();
 8002738:	f7ff fc86 	bl	8002048 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a08      	ldr	r2, [pc, #32]	; (8002760 <HAL_ADC_MspInit+0x19c>)
 8002740:	651a      	str	r2, [r3, #80]	; 0x50
 8002742:	4a07      	ldr	r2, [pc, #28]	; (8002760 <HAL_ADC_MspInit+0x19c>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002748:	bf00      	nop
 800274a:	37c0      	adds	r7, #192	; 0xc0
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	50040000 	.word	0x50040000
 8002754:	40021000 	.word	0x40021000
 8002758:	48000800 	.word	0x48000800
 800275c:	48000400 	.word	0x48000400
 8002760:	2000027c 	.word	0x2000027c
 8002764:	40020008 	.word	0x40020008

08002768 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b0ae      	sub	sp, #184	; 0xb8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002780:	f107 0310 	add.w	r3, r7, #16
 8002784:	2294      	movs	r2, #148	; 0x94
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f006 f873 	bl	8008874 <memset>
  if(hi2c->Instance==I2C1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a21      	ldr	r2, [pc, #132]	; (8002818 <HAL_I2C_MspInit+0xb0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d13b      	bne.n	8002810 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002798:	2340      	movs	r3, #64	; 0x40
 800279a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800279c:	2300      	movs	r3, #0
 800279e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027a0:	f107 0310 	add.w	r3, r7, #16
 80027a4:	4618      	mov	r0, r3
 80027a6:	f003 fefd 	bl	80065a4 <HAL_RCCEx_PeriphCLKConfig>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80027b0:	f7ff fc4a 	bl	8002048 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <HAL_I2C_MspInit+0xb4>)
 80027b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b8:	4a18      	ldr	r2, [pc, #96]	; (800281c <HAL_I2C_MspInit+0xb4>)
 80027ba:	f043 0302 	orr.w	r3, r3, #2
 80027be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027c0:	4b16      	ldr	r3, [pc, #88]	; (800281c <HAL_I2C_MspInit+0xb4>)
 80027c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027d4:	2312      	movs	r3, #18
 80027d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e0:	2303      	movs	r3, #3
 80027e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027e6:	2304      	movs	r3, #4
 80027e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027f0:	4619      	mov	r1, r3
 80027f2:	480b      	ldr	r0, [pc, #44]	; (8002820 <HAL_I2C_MspInit+0xb8>)
 80027f4:	f001 ff4c 	bl	8004690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_I2C_MspInit+0xb4>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	4a07      	ldr	r2, [pc, #28]	; (800281c <HAL_I2C_MspInit+0xb4>)
 80027fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002802:	6593      	str	r3, [r2, #88]	; 0x58
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_I2C_MspInit+0xb4>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002810:	bf00      	nop
 8002812:	37b8      	adds	r7, #184	; 0xb8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40005400 	.word	0x40005400
 800281c:	40021000 	.word	0x40021000
 8002820:	48000400 	.word	0x48000400

08002824 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	; 0x28
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282c:	f107 0314 	add.w	r3, r7, #20
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a2c      	ldr	r2, [pc, #176]	; (80028f4 <HAL_SPI_MspInit+0xd0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d151      	bne.n	80028ea <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002846:	4b2c      	ldr	r3, [pc, #176]	; (80028f8 <HAL_SPI_MspInit+0xd4>)
 8002848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284a:	4a2b      	ldr	r2, [pc, #172]	; (80028f8 <HAL_SPI_MspInit+0xd4>)
 800284c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002850:	6613      	str	r3, [r2, #96]	; 0x60
 8002852:	4b29      	ldr	r3, [pc, #164]	; (80028f8 <HAL_SPI_MspInit+0xd4>)
 8002854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285e:	4b26      	ldr	r3, [pc, #152]	; (80028f8 <HAL_SPI_MspInit+0xd4>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	4a25      	ldr	r2, [pc, #148]	; (80028f8 <HAL_SPI_MspInit+0xd4>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800286a:	4b23      	ldr	r3, [pc, #140]	; (80028f8 <HAL_SPI_MspInit+0xd4>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8002876:	2382      	movs	r3, #130	; 0x82
 8002878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	2302      	movs	r3, #2
 800287c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002882:	2303      	movs	r3, #3
 8002884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002886:	2305      	movs	r3, #5
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288a:	f107 0314 	add.w	r3, r7, #20
 800288e:	4619      	mov	r1, r3
 8002890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002894:	f001 fefc 	bl	8004690 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8002898:	4b18      	ldr	r3, [pc, #96]	; (80028fc <HAL_SPI_MspInit+0xd8>)
 800289a:	4a19      	ldr	r2, [pc, #100]	; (8002900 <HAL_SPI_MspInit+0xdc>)
 800289c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800289e:	4b17      	ldr	r3, [pc, #92]	; (80028fc <HAL_SPI_MspInit+0xd8>)
 80028a0:	220b      	movs	r2, #11
 80028a2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028a4:	4b15      	ldr	r3, [pc, #84]	; (80028fc <HAL_SPI_MspInit+0xd8>)
 80028a6:	2210      	movs	r2, #16
 80028a8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028aa:	4b14      	ldr	r3, [pc, #80]	; (80028fc <HAL_SPI_MspInit+0xd8>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_SPI_MspInit+0xd8>)
 80028b2:	2280      	movs	r2, #128	; 0x80
 80028b4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028b6:	4b11      	ldr	r3, [pc, #68]	; (80028fc <HAL_SPI_MspInit+0xd8>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <HAL_SPI_MspInit+0xd8>)
 80028be:	2200      	movs	r2, #0
 80028c0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80028c2:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <HAL_SPI_MspInit+0xd8>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <HAL_SPI_MspInit+0xd8>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80028ce:	480b      	ldr	r0, [pc, #44]	; (80028fc <HAL_SPI_MspInit+0xd8>)
 80028d0:	f001 fc6c 	bl	80041ac <HAL_DMA_Init>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80028da:	f7ff fbb5 	bl	8002048 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a06      	ldr	r2, [pc, #24]	; (80028fc <HAL_SPI_MspInit+0xd8>)
 80028e2:	655a      	str	r2, [r3, #84]	; 0x54
 80028e4:	4a05      	ldr	r2, [pc, #20]	; (80028fc <HAL_SPI_MspInit+0xd8>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80028ea:	bf00      	nop
 80028ec:	3728      	adds	r7, #40	; 0x28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40013000 	.word	0x40013000
 80028f8:	40021000 	.word	0x40021000
 80028fc:	20000394 	.word	0x20000394
 8002900:	4002001c 	.word	0x4002001c

08002904 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d10c      	bne.n	8002930 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <HAL_TIM_PWM_MspInit+0x5c>)
 8002918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291a:	4a11      	ldr	r2, [pc, #68]	; (8002960 <HAL_TIM_PWM_MspInit+0x5c>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6593      	str	r3, [r2, #88]	; 0x58
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <HAL_TIM_PWM_MspInit+0x5c>)
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800292e:	e010      	b.n	8002952 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a0b      	ldr	r2, [pc, #44]	; (8002964 <HAL_TIM_PWM_MspInit+0x60>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d10b      	bne.n	8002952 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_TIM_PWM_MspInit+0x5c>)
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	4a08      	ldr	r2, [pc, #32]	; (8002960 <HAL_TIM_PWM_MspInit+0x5c>)
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	6593      	str	r3, [r2, #88]	; 0x58
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_TIM_PWM_MspInit+0x5c>)
 8002948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	68bb      	ldr	r3, [r7, #8]
}
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000
 8002964:	40000800 	.word	0x40000800

08002968 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002988:	d11d      	bne.n	80029c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298a:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <HAL_TIM_MspPostInit+0xa8>)
 800298c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298e:	4a20      	ldr	r2, [pc, #128]	; (8002a10 <HAL_TIM_MspPostInit+0xa8>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002996:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <HAL_TIM_MspPostInit+0xa8>)
 8002998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029a2:	2308      	movs	r3, #8
 80029a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ae:	2300      	movs	r3, #0
 80029b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029b2:	2301      	movs	r3, #1
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b6:	f107 0314 	add.w	r3, r7, #20
 80029ba:	4619      	mov	r1, r3
 80029bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029c0:	f001 fe66 	bl	8004690 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80029c4:	e020      	b.n	8002a08 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM4)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <HAL_TIM_MspPostInit+0xac>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d11b      	bne.n	8002a08 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d0:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <HAL_TIM_MspPostInit+0xa8>)
 80029d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d4:	4a0e      	ldr	r2, [pc, #56]	; (8002a10 <HAL_TIM_MspPostInit+0xa8>)
 80029d6:	f043 0302 	orr.w	r3, r3, #2
 80029da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <HAL_TIM_MspPostInit+0xa8>)
 80029de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ec:	2302      	movs	r3, #2
 80029ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f4:	2300      	movs	r3, #0
 80029f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029f8:	2302      	movs	r3, #2
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	4619      	mov	r1, r3
 8002a02:	4805      	ldr	r0, [pc, #20]	; (8002a18 <HAL_TIM_MspPostInit+0xb0>)
 8002a04:	f001 fe44 	bl	8004690 <HAL_GPIO_Init>
}
 8002a08:	bf00      	nop
 8002a0a:	3728      	adds	r7, #40	; 0x28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40000800 	.word	0x40000800
 8002a18:	48000400 	.word	0x48000400

08002a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a20:	e7fe      	b.n	8002a20 <NMI_Handler+0x4>

08002a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a26:	e7fe      	b.n	8002a26 <HardFault_Handler+0x4>

08002a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a2c:	e7fe      	b.n	8002a2c <MemManage_Handler+0x4>

08002a2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a32:	e7fe      	b.n	8002a32 <BusFault_Handler+0x4>

08002a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a38:	e7fe      	b.n	8002a38 <UsageFault_Handler+0x4>

08002a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a68:	f000 f96c 	bl	8002d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a74:	4802      	ldr	r0, [pc, #8]	; (8002a80 <DMA1_Channel1_IRQHandler+0x10>)
 8002a76:	f001 fcbc 	bl	80043f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	2000027c 	.word	0x2000027c

08002a84 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002a88:	4802      	ldr	r0, [pc, #8]	; (8002a94 <DMA1_Channel2_IRQHandler+0x10>)
 8002a8a:	f001 fcb2 	bl	80043f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000394 	.word	0x20000394

08002a98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
	return 1;
 8002a9c:	2301      	movs	r3, #1
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <_kill>:

int _kill(int pid, int sig)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ab2:	f005 feb5 	bl	8008820 <__errno>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2216      	movs	r2, #22
 8002aba:	601a      	str	r2, [r3, #0]
	return -1;
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <_exit>:

void _exit (int status)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ffe7 	bl	8002aa8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ada:	e7fe      	b.n	8002ada <_exit+0x12>

08002adc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	e00a      	b.n	8002b04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002aee:	f3af 8000 	nop.w
 8002af2:	4601      	mov	r1, r0
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	60ba      	str	r2, [r7, #8]
 8002afa:	b2ca      	uxtb	r2, r1
 8002afc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	3301      	adds	r3, #1
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	dbf0      	blt.n	8002aee <_read+0x12>
	}

return len;
 8002b0c:	687b      	ldr	r3, [r7, #4]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b086      	sub	sp, #24
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	e009      	b.n	8002b3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	60ba      	str	r2, [r7, #8]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	dbf1      	blt.n	8002b28 <_write+0x12>
	}
	return len;
 8002b44:	687b      	ldr	r3, [r7, #4]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <_close>:

int _close(int file)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
	return -1;
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b76:	605a      	str	r2, [r3, #4]
	return 0;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <_isatty>:

int _isatty(int file)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
	return 1;
 8002b8e:	2301      	movs	r3, #1
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
	return 0;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bc0:	4a14      	ldr	r2, [pc, #80]	; (8002c14 <_sbrk+0x5c>)
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <_sbrk+0x60>)
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <_sbrk+0x64>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd4:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <_sbrk+0x64>)
 8002bd6:	4a12      	ldr	r2, [pc, #72]	; (8002c20 <_sbrk+0x68>)
 8002bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <_sbrk+0x64>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d207      	bcs.n	8002bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002be8:	f005 fe1a 	bl	8008820 <__errno>
 8002bec:	4603      	mov	r3, r0
 8002bee:	220c      	movs	r2, #12
 8002bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf6:	e009      	b.n	8002c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <_sbrk+0x64>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bfe:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <_sbrk+0x64>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4413      	add	r3, r2
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <_sbrk+0x64>)
 8002c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	200a0000 	.word	0x200a0000
 8002c18:	00000400 	.word	0x00000400
 8002c1c:	200004bc 	.word	0x200004bc
 8002c20:	200004d8 	.word	0x200004d8

08002c24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <SystemInit+0x20>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	4a05      	ldr	r2, [pc, #20]	; (8002c44 <SystemInit+0x20>)
 8002c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c4c:	f7ff ffea 	bl	8002c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c50:	480c      	ldr	r0, [pc, #48]	; (8002c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c52:	490d      	ldr	r1, [pc, #52]	; (8002c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c54:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <LoopForever+0xe>)
  movs r3, #0
 8002c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c58:	e002      	b.n	8002c60 <LoopCopyDataInit>

08002c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5e:	3304      	adds	r3, #4

08002c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c64:	d3f9      	bcc.n	8002c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c66:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c68:	4c0a      	ldr	r4, [pc, #40]	; (8002c94 <LoopForever+0x16>)
  movs r3, #0
 8002c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c6c:	e001      	b.n	8002c72 <LoopFillZerobss>

08002c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c70:	3204      	adds	r2, #4

08002c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c74:	d3fb      	bcc.n	8002c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c76:	f005 fdd9 	bl	800882c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c7a:	f7fe fe33 	bl	80018e4 <main>

08002c7e <LoopForever>:

LoopForever:
    b LoopForever
 8002c7e:	e7fe      	b.n	8002c7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c80:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c88:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002c8c:	080c878c 	.word	0x080c878c
  ldr r2, =_sbss
 8002c90:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002c94:	200004d4 	.word	0x200004d4

08002c98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c98:	e7fe      	b.n	8002c98 <ADC1_IRQHandler>

08002c9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca4:	2003      	movs	r0, #3
 8002ca6:	f001 fa3f 	bl	8004128 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002caa:	2000      	movs	r0, #0
 8002cac:	f000 f80e 	bl	8002ccc <HAL_InitTick>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	71fb      	strb	r3, [r7, #7]
 8002cba:	e001      	b.n	8002cc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cbc:	f7ff fc5e 	bl	800257c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002cd8:	4b17      	ldr	r3, [pc, #92]	; (8002d38 <HAL_InitTick+0x6c>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d023      	beq.n	8002d28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ce0:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <HAL_InitTick+0x70>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <HAL_InitTick+0x6c>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f001 fa4b 	bl	8004192 <HAL_SYSTICK_Config>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10f      	bne.n	8002d22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b0f      	cmp	r3, #15
 8002d06:	d809      	bhi.n	8002d1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d08:	2200      	movs	r2, #0
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d10:	f001 fa15 	bl	800413e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d14:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <HAL_InitTick+0x74>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e007      	b.n	8002d2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
 8002d20:	e004      	b.n	8002d2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	73fb      	strb	r3, [r7, #15]
 8002d26:	e001      	b.n	8002d2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	2000000c 	.word	0x2000000c
 8002d3c:	20000004 	.word	0x20000004
 8002d40:	20000008 	.word	0x20000008

08002d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <HAL_IncTick+0x20>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_IncTick+0x24>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4413      	add	r3, r2
 8002d54:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <HAL_IncTick+0x24>)
 8002d56:	6013      	str	r3, [r2, #0]
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	2000000c 	.word	0x2000000c
 8002d68:	200004c0 	.word	0x200004c0

08002d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <HAL_GetTick+0x14>)
 8002d72:	681b      	ldr	r3, [r3, #0]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	200004c0 	.word	0x200004c0

08002d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d8c:	f7ff ffee 	bl	8002d6c <HAL_GetTick>
 8002d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d005      	beq.n	8002daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HAL_Delay+0x44>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4413      	add	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002daa:	bf00      	nop
 8002dac:	f7ff ffde 	bl	8002d6c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d8f7      	bhi.n	8002dac <HAL_Delay+0x28>
  {
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	2000000c 	.word	0x2000000c

08002dcc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	609a      	str	r2, [r3, #8]
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3360      	adds	r3, #96	; 0x60
 8002e46:	461a      	mov	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <LL_ADC_SetOffset+0x44>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e6c:	bf00      	nop
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	03fff000 	.word	0x03fff000

08002e7c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3360      	adds	r3, #96	; 0x60
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3360      	adds	r3, #96	; 0x60
 8002eb8:	461a      	mov	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ed2:	bf00      	nop
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	615a      	str	r2, [r3, #20]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b087      	sub	sp, #28
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3330      	adds	r3, #48	; 0x30
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	0a1b      	lsrs	r3, r3, #8
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	4413      	add	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	211f      	movs	r1, #31
 8002f56:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	401a      	ands	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	0e9b      	lsrs	r3, r3, #26
 8002f62:	f003 011f 	and.w	r1, r3, #31
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f70:	431a      	orrs	r2, r3
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f76:	bf00      	nop
 8002f78:	371c      	adds	r7, #28
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b087      	sub	sp, #28
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	3314      	adds	r3, #20
 8002f92:	461a      	mov	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	0e5b      	lsrs	r3, r3, #25
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	4413      	add	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	0d1b      	lsrs	r3, r3, #20
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	2107      	movs	r1, #7
 8002fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	0d1b      	lsrs	r3, r3, #20
 8002fbc:	f003 031f 	and.w	r3, r3, #31
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002fcc:	bf00      	nop
 8002fce:	371c      	adds	r7, #28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f003 0318 	and.w	r3, r3, #24
 8002ffa:	4908      	ldr	r1, [pc, #32]	; (800301c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ffc:	40d9      	lsrs	r1, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	400b      	ands	r3, r1
 8003002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003006:	431a      	orrs	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	0007ffff 	.word	0x0007ffff

08003020 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003030:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6093      	str	r3, [r2, #8]
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003058:	d101      	bne.n	800305e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800307c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003080:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030a8:	d101      	bne.n	80030ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030d0:	f043 0201 	orr.w	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <LL_ADC_IsEnabled+0x18>
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <LL_ADC_IsEnabled+0x1a>
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800311a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800311e:	f043 0204 	orr.w	r2, r3, #4
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b04      	cmp	r3, #4
 8003144:	d101      	bne.n	800314a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b08      	cmp	r3, #8
 800316a:	d101      	bne.n	8003170 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800318c:	2300      	movs	r3, #0
 800318e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e12f      	b.n	80033fa <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d109      	bne.n	80031bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff fa0b 	bl	80025c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ff3f 	bl	8003044 <LL_ADC_IsDeepPowerDownEnabled>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d004      	beq.n	80031d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff25 	bl	8003020 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff ff5a 	bl	8003094 <LL_ADC_IsInternalRegulatorEnabled>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d115      	bne.n	8003212 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff ff3e 	bl	800306c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031f0:	4b84      	ldr	r3, [pc, #528]	; (8003404 <HAL_ADC_Init+0x284>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	099b      	lsrs	r3, r3, #6
 80031f6:	4a84      	ldr	r2, [pc, #528]	; (8003408 <HAL_ADC_Init+0x288>)
 80031f8:	fba2 2303 	umull	r2, r3, r2, r3
 80031fc:	099b      	lsrs	r3, r3, #6
 80031fe:	3301      	adds	r3, #1
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003204:	e002      	b.n	800320c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	3b01      	subs	r3, #1
 800320a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f9      	bne.n	8003206 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ff3c 	bl	8003094 <LL_ADC_IsInternalRegulatorEnabled>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10d      	bne.n	800323e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003226:	f043 0210 	orr.w	r2, r3, #16
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003232:	f043 0201 	orr.w	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff ff75 	bl	8003132 <LL_ADC_REG_IsConversionOngoing>
 8003248:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	2b00      	cmp	r3, #0
 8003254:	f040 80c8 	bne.w	80033e8 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f040 80c4 	bne.w	80033e8 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003264:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003268:	f043 0202 	orr.w	r2, r3, #2
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ff35 	bl	80030e4 <LL_ADC_IsEnabled>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10b      	bne.n	8003298 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003280:	4862      	ldr	r0, [pc, #392]	; (800340c <HAL_ADC_Init+0x28c>)
 8003282:	f7ff ff2f 	bl	80030e4 <LL_ADC_IsEnabled>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d105      	bne.n	8003298 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	4619      	mov	r1, r3
 8003292:	485f      	ldr	r0, [pc, #380]	; (8003410 <HAL_ADC_Init+0x290>)
 8003294:	f7ff fd9a 	bl	8002dcc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7e5b      	ldrb	r3, [r3, #25]
 800329c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032a2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80032a8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80032ae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032b6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d106      	bne.n	80032d4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	3b01      	subs	r3, #1
 80032cc:	045b      	lsls	r3, r3, #17
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d009      	beq.n	80032f0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	4b47      	ldr	r3, [pc, #284]	; (8003414 <HAL_ADC_Init+0x294>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	69b9      	ldr	r1, [r7, #24]
 8003300:	430b      	orrs	r3, r1
 8003302:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ff12 	bl	8003132 <LL_ADC_REG_IsConversionOngoing>
 800330e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff1f 	bl	8003158 <LL_ADC_INJ_IsConversionOngoing>
 800331a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d140      	bne.n	80033a4 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d13d      	bne.n	80033a4 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	7e1b      	ldrb	r3, [r3, #24]
 8003330:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003332:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800333a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800334a:	f023 0306 	bic.w	r3, r3, #6
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6812      	ldr	r2, [r2, #0]
 8003352:	69b9      	ldr	r1, [r7, #24]
 8003354:	430b      	orrs	r3, r1
 8003356:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800335e:	2b01      	cmp	r3, #1
 8003360:	d118      	bne.n	8003394 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003378:	4311      	orrs	r1, r2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800337e:	4311      	orrs	r1, r2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003384:	430a      	orrs	r2, r1
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0201 	orr.w	r2, r2, #1
 8003390:	611a      	str	r2, [r3, #16]
 8003392:	e007      	b.n	80033a4 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0201 	bic.w	r2, r2, #1
 80033a2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d10c      	bne.n	80033c6 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	f023 010f 	bic.w	r1, r3, #15
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	1e5a      	subs	r2, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
 80033c4:	e007      	b.n	80033d6 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 020f 	bic.w	r2, r2, #15
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	f023 0303 	bic.w	r3, r3, #3
 80033de:	f043 0201 	orr.w	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	659a      	str	r2, [r3, #88]	; 0x58
 80033e6:	e007      	b.n	80033f8 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ec:	f043 0210 	orr.w	r2, r3, #16
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3720      	adds	r7, #32
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000004 	.word	0x20000004
 8003408:	053e2d63 	.word	0x053e2d63
 800340c:	50040000 	.word	0x50040000
 8003410:	50040300 	.word	0x50040300
 8003414:	fff0c007 	.word	0xfff0c007

08003418 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fe82 	bl	8003132 <LL_ADC_REG_IsConversionOngoing>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d167      	bne.n	8003504 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_ADC_Start_DMA+0x2a>
 800343e:	2302      	movs	r3, #2
 8003440:	e063      	b.n	800350a <HAL_ADC_Start_DMA+0xf2>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fc82 	bl	8003d54 <ADC_Enable>
 8003450:	4603      	mov	r3, r0
 8003452:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003454:	7dfb      	ldrb	r3, [r7, #23]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d14f      	bne.n	80034fa <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003462:	f023 0301 	bic.w	r3, r3, #1
 8003466:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d006      	beq.n	8003488 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347e:	f023 0206 	bic.w	r2, r3, #6
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	65da      	str	r2, [r3, #92]	; 0x5c
 8003486:	e002      	b.n	800348e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003492:	4a20      	ldr	r2, [pc, #128]	; (8003514 <HAL_ADC_Start_DMA+0xfc>)
 8003494:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349a:	4a1f      	ldr	r2, [pc, #124]	; (8003518 <HAL_ADC_Start_DMA+0x100>)
 800349c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a2:	4a1e      	ldr	r2, [pc, #120]	; (800351c <HAL_ADC_Start_DMA+0x104>)
 80034a4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	221c      	movs	r2, #28
 80034ac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0210 	orr.w	r2, r2, #16
 80034c4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3340      	adds	r3, #64	; 0x40
 80034e0:	4619      	mov	r1, r3
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f000 ff09 	bl	80042fc <HAL_DMA_Start_IT>
 80034ea:	4603      	mov	r3, r0
 80034ec:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff fe09 	bl	800310a <LL_ADC_REG_StartConversion>
 80034f8:	e006      	b.n	8003508 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003502:	e001      	b.n	8003508 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003504:	2302      	movs	r3, #2
 8003506:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003508:	7dfb      	ldrb	r3, [r7, #23]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	08003e61 	.word	0x08003e61
 8003518:	08003f39 	.word	0x08003f39
 800351c:	08003f55 	.word	0x08003f55

08003520 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b0b6      	sub	sp, #216	; 0xd8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_ADC_ConfigChannel+0x22>
 800357a:	2302      	movs	r3, #2
 800357c:	e3d5      	b.n	8003d2a <HAL_ADC_ConfigChannel+0x7ce>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff fdd1 	bl	8003132 <LL_ADC_REG_IsConversionOngoing>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	f040 83ba 	bne.w	8003d0c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b05      	cmp	r3, #5
 800359e:	d824      	bhi.n	80035ea <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	3b02      	subs	r3, #2
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d81b      	bhi.n	80035e2 <HAL_ADC_ConfigChannel+0x86>
 80035aa:	a201      	add	r2, pc, #4	; (adr r2, 80035b0 <HAL_ADC_ConfigChannel+0x54>)
 80035ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b0:	080035c1 	.word	0x080035c1
 80035b4:	080035c9 	.word	0x080035c9
 80035b8:	080035d1 	.word	0x080035d1
 80035bc:	080035d9 	.word	0x080035d9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	220c      	movs	r2, #12
 80035c4:	605a      	str	r2, [r3, #4]
          break;
 80035c6:	e011      	b.n	80035ec <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2212      	movs	r2, #18
 80035cc:	605a      	str	r2, [r3, #4]
          break;
 80035ce:	e00d      	b.n	80035ec <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	2218      	movs	r2, #24
 80035d4:	605a      	str	r2, [r3, #4]
          break;
 80035d6:	e009      	b.n	80035ec <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035de:	605a      	str	r2, [r3, #4]
          break;
 80035e0:	e004      	b.n	80035ec <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2206      	movs	r2, #6
 80035e6:	605a      	str	r2, [r3, #4]
          break;
 80035e8:	e000      	b.n	80035ec <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80035ea:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	6859      	ldr	r1, [r3, #4]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	f7ff fc96 	bl	8002f2a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff fd95 	bl	8003132 <LL_ADC_REG_IsConversionOngoing>
 8003608:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff fda1 	bl	8003158 <LL_ADC_INJ_IsConversionOngoing>
 8003616:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800361a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800361e:	2b00      	cmp	r3, #0
 8003620:	f040 81c1 	bne.w	80039a6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003624:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003628:	2b00      	cmp	r3, #0
 800362a:	f040 81bc 	bne.w	80039a6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003636:	d10f      	bne.n	8003658 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2200      	movs	r2, #0
 8003642:	4619      	mov	r1, r3
 8003644:	f7ff fc9d 	bl	8002f82 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fc44 	bl	8002ede <LL_ADC_SetSamplingTimeCommonConfig>
 8003656:	e00e      	b.n	8003676 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	6819      	ldr	r1, [r3, #0]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	461a      	mov	r2, r3
 8003666:	f7ff fc8c 	bl	8002f82 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2100      	movs	r1, #0
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff fc34 	bl	8002ede <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	695a      	ldr	r2, [r3, #20]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	08db      	lsrs	r3, r3, #3
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	2b04      	cmp	r3, #4
 8003696:	d00a      	beq.n	80036ae <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	6919      	ldr	r1, [r3, #16]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036a8:	f7ff fbc4 	bl	8002e34 <LL_ADC_SetOffset>
 80036ac:	e17b      	b.n	80039a6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff fbe1 	bl	8002e7c <LL_ADC_GetOffsetChannel>
 80036ba:	4603      	mov	r3, r0
 80036bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10a      	bne.n	80036da <HAL_ADC_ConfigChannel+0x17e>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2100      	movs	r1, #0
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff fbd6 	bl	8002e7c <LL_ADC_GetOffsetChannel>
 80036d0:	4603      	mov	r3, r0
 80036d2:	0e9b      	lsrs	r3, r3, #26
 80036d4:	f003 021f 	and.w	r2, r3, #31
 80036d8:	e01e      	b.n	8003718 <HAL_ADC_ConfigChannel+0x1bc>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2100      	movs	r1, #0
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff fbcb 	bl	8002e7c <LL_ADC_GetOffsetChannel>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036f0:	fa93 f3a3 	rbit	r3, r3
 80036f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80036fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003700:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003708:	2320      	movs	r3, #32
 800370a:	e004      	b.n	8003716 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800370c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003710:	fab3 f383 	clz	r3, r3
 8003714:	b2db      	uxtb	r3, r3
 8003716:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003720:	2b00      	cmp	r3, #0
 8003722:	d105      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x1d4>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	0e9b      	lsrs	r3, r3, #26
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	e018      	b.n	8003762 <HAL_ADC_ConfigChannel+0x206>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003738:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800373c:	fa93 f3a3 	rbit	r3, r3
 8003740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800374c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003754:	2320      	movs	r3, #32
 8003756:	e004      	b.n	8003762 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003758:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800375c:	fab3 f383 	clz	r3, r3
 8003760:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003762:	429a      	cmp	r2, r3
 8003764:	d106      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2200      	movs	r2, #0
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fb9a 	bl	8002ea8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2101      	movs	r1, #1
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff fb7e 	bl	8002e7c <LL_ADC_GetOffsetChannel>
 8003780:	4603      	mov	r3, r0
 8003782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10a      	bne.n	80037a0 <HAL_ADC_ConfigChannel+0x244>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2101      	movs	r1, #1
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fb73 	bl	8002e7c <LL_ADC_GetOffsetChannel>
 8003796:	4603      	mov	r3, r0
 8003798:	0e9b      	lsrs	r3, r3, #26
 800379a:	f003 021f 	and.w	r2, r3, #31
 800379e:	e01e      	b.n	80037de <HAL_ADC_ConfigChannel+0x282>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2101      	movs	r1, #1
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff fb68 	bl	8002e7c <LL_ADC_GetOffsetChannel>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037b6:	fa93 f3a3 	rbit	r3, r3
 80037ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80037be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80037c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80037ce:	2320      	movs	r3, #32
 80037d0:	e004      	b.n	80037dc <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80037d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037d6:	fab3 f383 	clz	r3, r3
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d105      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x29a>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	0e9b      	lsrs	r3, r3, #26
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	e018      	b.n	8003828 <HAL_ADC_ConfigChannel+0x2cc>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800380a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800380e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003812:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800381a:	2320      	movs	r3, #32
 800381c:	e004      	b.n	8003828 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800381e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003822:	fab3 f383 	clz	r3, r3
 8003826:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003828:	429a      	cmp	r2, r3
 800382a:	d106      	bne.n	800383a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2200      	movs	r2, #0
 8003832:	2101      	movs	r1, #1
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff fb37 	bl	8002ea8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2102      	movs	r1, #2
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fb1b 	bl	8002e7c <LL_ADC_GetOffsetChannel>
 8003846:	4603      	mov	r3, r0
 8003848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10a      	bne.n	8003866 <HAL_ADC_ConfigChannel+0x30a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2102      	movs	r1, #2
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fb10 	bl	8002e7c <LL_ADC_GetOffsetChannel>
 800385c:	4603      	mov	r3, r0
 800385e:	0e9b      	lsrs	r3, r3, #26
 8003860:	f003 021f 	and.w	r2, r3, #31
 8003864:	e01e      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x348>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2102      	movs	r1, #2
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fb05 	bl	8002e7c <LL_ADC_GetOffsetChannel>
 8003872:	4603      	mov	r3, r0
 8003874:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800387c:	fa93 f3a3 	rbit	r3, r3
 8003880:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003884:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800388c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003894:	2320      	movs	r3, #32
 8003896:	e004      	b.n	80038a2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003898:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800389c:	fab3 f383 	clz	r3, r3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d105      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x360>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	0e9b      	lsrs	r3, r3, #26
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	e016      	b.n	80038ea <HAL_ADC_ConfigChannel+0x38e>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038c8:	fa93 f3a3 	rbit	r3, r3
 80038cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80038ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80038d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80038dc:	2320      	movs	r3, #32
 80038de:	e004      	b.n	80038ea <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80038e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038e4:	fab3 f383 	clz	r3, r3
 80038e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d106      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2200      	movs	r2, #0
 80038f4:	2102      	movs	r1, #2
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fad6 	bl	8002ea8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2103      	movs	r1, #3
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff faba 	bl	8002e7c <LL_ADC_GetOffsetChannel>
 8003908:	4603      	mov	r3, r0
 800390a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x3cc>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2103      	movs	r1, #3
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff faaf 	bl	8002e7c <LL_ADC_GetOffsetChannel>
 800391e:	4603      	mov	r3, r0
 8003920:	0e9b      	lsrs	r3, r3, #26
 8003922:	f003 021f 	and.w	r2, r3, #31
 8003926:	e017      	b.n	8003958 <HAL_ADC_ConfigChannel+0x3fc>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2103      	movs	r1, #3
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff faa4 	bl	8002e7c <LL_ADC_GetOffsetChannel>
 8003934:	4603      	mov	r3, r0
 8003936:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800393a:	fa93 f3a3 	rbit	r3, r3
 800393e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003940:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003942:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800394a:	2320      	movs	r3, #32
 800394c:	e003      	b.n	8003956 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800394e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003950:	fab3 f383 	clz	r3, r3
 8003954:	b2db      	uxtb	r3, r3
 8003956:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003960:	2b00      	cmp	r3, #0
 8003962:	d105      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x414>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	0e9b      	lsrs	r3, r3, #26
 800396a:	f003 031f 	and.w	r3, r3, #31
 800396e:	e011      	b.n	8003994 <HAL_ADC_ConfigChannel+0x438>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003978:	fa93 f3a3 	rbit	r3, r3
 800397c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800397e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003980:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003988:	2320      	movs	r3, #32
 800398a:	e003      	b.n	8003994 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800398c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398e:	fab3 f383 	clz	r3, r3
 8003992:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003994:	429a      	cmp	r2, r3
 8003996:	d106      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2200      	movs	r2, #0
 800399e:	2103      	movs	r1, #3
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff fa81 	bl	8002ea8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff fb9a 	bl	80030e4 <LL_ADC_IsEnabled>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f040 8140 	bne.w	8003c38 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	6819      	ldr	r1, [r3, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	461a      	mov	r2, r3
 80039c6:	f7ff fb07 	bl	8002fd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	4a8f      	ldr	r2, [pc, #572]	; (8003c0c <HAL_ADC_ConfigChannel+0x6b0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	f040 8131 	bne.w	8003c38 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10b      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x4a2>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	0e9b      	lsrs	r3, r3, #26
 80039ec:	3301      	adds	r3, #1
 80039ee:	f003 031f 	and.w	r3, r3, #31
 80039f2:	2b09      	cmp	r3, #9
 80039f4:	bf94      	ite	ls
 80039f6:	2301      	movls	r3, #1
 80039f8:	2300      	movhi	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	e019      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x4d6>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a06:	fa93 f3a3 	rbit	r3, r3
 8003a0a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a0e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003a10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003a16:	2320      	movs	r3, #32
 8003a18:	e003      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a1c:	fab3 f383 	clz	r3, r3
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	3301      	adds	r3, #1
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	2b09      	cmp	r3, #9
 8003a2a:	bf94      	ite	ls
 8003a2c:	2301      	movls	r3, #1
 8003a2e:	2300      	movhi	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d079      	beq.n	8003b2a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d107      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x4f6>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	0e9b      	lsrs	r3, r3, #26
 8003a48:	3301      	adds	r3, #1
 8003a4a:	069b      	lsls	r3, r3, #26
 8003a4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a50:	e015      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x522>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a5a:	fa93 f3a3 	rbit	r3, r3
 8003a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a62:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003a6a:	2320      	movs	r3, #32
 8003a6c:	e003      	b.n	8003a76 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a70:	fab3 f383 	clz	r3, r3
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	3301      	adds	r3, #1
 8003a78:	069b      	lsls	r3, r3, #26
 8003a7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x542>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	0e9b      	lsrs	r3, r3, #26
 8003a90:	3301      	adds	r3, #1
 8003a92:	f003 031f 	and.w	r3, r3, #31
 8003a96:	2101      	movs	r1, #1
 8003a98:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9c:	e017      	b.n	8003ace <HAL_ADC_ConfigChannel+0x572>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa6:	fa93 f3a3 	rbit	r3, r3
 8003aaa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003ab6:	2320      	movs	r3, #32
 8003ab8:	e003      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003abc:	fab3 f383 	clz	r3, r3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f003 031f 	and.w	r3, r3, #31
 8003ac8:	2101      	movs	r1, #1
 8003aca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ace:	ea42 0103 	orr.w	r1, r2, r3
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x598>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	0e9b      	lsrs	r3, r3, #26
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	f003 021f 	and.w	r2, r3, #31
 8003aea:	4613      	mov	r3, r2
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	4413      	add	r3, r2
 8003af0:	051b      	lsls	r3, r3, #20
 8003af2:	e018      	b.n	8003b26 <HAL_ADC_ConfigChannel+0x5ca>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afc:	fa93 f3a3 	rbit	r3, r3
 8003b00:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003b0c:	2320      	movs	r3, #32
 8003b0e:	e003      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b12:	fab3 f383 	clz	r3, r3
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	3301      	adds	r3, #1
 8003b1a:	f003 021f 	and.w	r2, r3, #31
 8003b1e:	4613      	mov	r3, r2
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	4413      	add	r3, r2
 8003b24:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b26:	430b      	orrs	r3, r1
 8003b28:	e081      	b.n	8003c2e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d107      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x5ea>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	0e9b      	lsrs	r3, r3, #26
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	069b      	lsls	r3, r3, #26
 8003b40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b44:	e015      	b.n	8003b72 <HAL_ADC_ConfigChannel+0x616>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	fa93 f3a3 	rbit	r3, r3
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003b5e:	2320      	movs	r3, #32
 8003b60:	e003      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	fab3 f383 	clz	r3, r3
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	069b      	lsls	r3, r3, #26
 8003b6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x636>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	0e9b      	lsrs	r3, r3, #26
 8003b84:	3301      	adds	r3, #1
 8003b86:	f003 031f 	and.w	r3, r3, #31
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b90:	e017      	b.n	8003bc2 <HAL_ADC_ConfigChannel+0x666>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	fa93 f3a3 	rbit	r3, r3
 8003b9e:	61fb      	str	r3, [r7, #28]
  return result;
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003baa:	2320      	movs	r3, #32
 8003bac:	e003      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	fab3 f383 	clz	r3, r3
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc2:	ea42 0103 	orr.w	r1, r2, r3
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10d      	bne.n	8003bee <HAL_ADC_ConfigChannel+0x692>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	0e9b      	lsrs	r3, r3, #26
 8003bd8:	3301      	adds	r3, #1
 8003bda:	f003 021f 	and.w	r2, r3, #31
 8003bde:	4613      	mov	r3, r2
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	4413      	add	r3, r2
 8003be4:	3b1e      	subs	r3, #30
 8003be6:	051b      	lsls	r3, r3, #20
 8003be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bec:	e01e      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x6d0>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	613b      	str	r3, [r7, #16]
  return result;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d104      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003c06:	2320      	movs	r3, #32
 8003c08:	e006      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x6bc>
 8003c0a:	bf00      	nop
 8003c0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	fab3 f383 	clz	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	3301      	adds	r3, #1
 8003c1a:	f003 021f 	and.w	r2, r3, #31
 8003c1e:	4613      	mov	r3, r2
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	4413      	add	r3, r2
 8003c24:	3b1e      	subs	r3, #30
 8003c26:	051b      	lsls	r3, r3, #20
 8003c28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	6892      	ldr	r2, [r2, #8]
 8003c32:	4619      	mov	r1, r3
 8003c34:	f7ff f9a5 	bl	8002f82 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b3d      	ldr	r3, [pc, #244]	; (8003d34 <HAL_ADC_ConfigChannel+0x7d8>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d06c      	beq.n	8003d1e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c44:	483c      	ldr	r0, [pc, #240]	; (8003d38 <HAL_ADC_ConfigChannel+0x7dc>)
 8003c46:	f7ff f8e7 	bl	8002e18 <LL_ADC_GetCommonPathInternalCh>
 8003c4a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a3a      	ldr	r2, [pc, #232]	; (8003d3c <HAL_ADC_ConfigChannel+0x7e0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d127      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d121      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a35      	ldr	r2, [pc, #212]	; (8003d40 <HAL_ADC_ConfigChannel+0x7e4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d157      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c76:	4619      	mov	r1, r3
 8003c78:	482f      	ldr	r0, [pc, #188]	; (8003d38 <HAL_ADC_ConfigChannel+0x7dc>)
 8003c7a:	f7ff f8ba 	bl	8002df2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c7e:	4b31      	ldr	r3, [pc, #196]	; (8003d44 <HAL_ADC_ConfigChannel+0x7e8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	099b      	lsrs	r3, r3, #6
 8003c84:	4a30      	ldr	r2, [pc, #192]	; (8003d48 <HAL_ADC_ConfigChannel+0x7ec>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	099b      	lsrs	r3, r3, #6
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	4613      	mov	r3, r2
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c98:	e002      	b.n	8003ca0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f9      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ca6:	e03a      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a27      	ldr	r2, [pc, #156]	; (8003d4c <HAL_ADC_ConfigChannel+0x7f0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d113      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x77e>
 8003cb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10d      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1f      	ldr	r2, [pc, #124]	; (8003d40 <HAL_ADC_ConfigChannel+0x7e4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d12a      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ccc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4819      	ldr	r0, [pc, #100]	; (8003d38 <HAL_ADC_ConfigChannel+0x7dc>)
 8003cd4:	f7ff f88d 	bl	8002df2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cd8:	e021      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1c      	ldr	r2, [pc, #112]	; (8003d50 <HAL_ADC_ConfigChannel+0x7f4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d11c      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d116      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a12      	ldr	r2, [pc, #72]	; (8003d40 <HAL_ADC_ConfigChannel+0x7e4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d111      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d02:	4619      	mov	r1, r3
 8003d04:	480c      	ldr	r0, [pc, #48]	; (8003d38 <HAL_ADC_ConfigChannel+0x7dc>)
 8003d06:	f7ff f874 	bl	8002df2 <LL_ADC_SetCommonPathInternalCh>
 8003d0a:	e008      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d10:	f043 0220 	orr.w	r2, r3, #32
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003d26:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	37d8      	adds	r7, #216	; 0xd8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	80080000 	.word	0x80080000
 8003d38:	50040300 	.word	0x50040300
 8003d3c:	c7520000 	.word	0xc7520000
 8003d40:	50040000 	.word	0x50040000
 8003d44:	20000004 	.word	0x20000004
 8003d48:	053e2d63 	.word	0x053e2d63
 8003d4c:	cb840000 	.word	0xcb840000
 8003d50:	80000001 	.word	0x80000001

08003d54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff f9bd 	bl	80030e4 <LL_ADC_IsEnabled>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d169      	bne.n	8003e44 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	4b36      	ldr	r3, [pc, #216]	; (8003e50 <ADC_Enable+0xfc>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00d      	beq.n	8003d9a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d82:	f043 0210 	orr.w	r2, r3, #16
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8e:	f043 0201 	orr.w	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e055      	b.n	8003e46 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff f98c 	bl	80030bc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003da4:	482b      	ldr	r0, [pc, #172]	; (8003e54 <ADC_Enable+0x100>)
 8003da6:	f7ff f837 	bl	8002e18 <LL_ADC_GetCommonPathInternalCh>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d013      	beq.n	8003ddc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003db4:	4b28      	ldr	r3, [pc, #160]	; (8003e58 <ADC_Enable+0x104>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	099b      	lsrs	r3, r3, #6
 8003dba:	4a28      	ldr	r2, [pc, #160]	; (8003e5c <ADC_Enable+0x108>)
 8003dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc0:	099b      	lsrs	r3, r3, #6
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	4413      	add	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003dce:	e002      	b.n	8003dd6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f9      	bne.n	8003dd0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ddc:	f7fe ffc6 	bl	8002d6c <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003de2:	e028      	b.n	8003e36 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff f97b 	bl	80030e4 <LL_ADC_IsEnabled>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d104      	bne.n	8003dfe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff f95f 	bl	80030bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dfe:	f7fe ffb5 	bl	8002d6c <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d914      	bls.n	8003e36 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d00d      	beq.n	8003e36 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1e:	f043 0210 	orr.w	r2, r3, #16
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2a:	f043 0201 	orr.w	r2, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e007      	b.n	8003e46 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d1cf      	bne.n	8003de4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	8000003f 	.word	0x8000003f
 8003e54:	50040300 	.word	0x50040300
 8003e58:	20000004 	.word	0x20000004
 8003e5c:	053e2d63 	.word	0x053e2d63

08003e60 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e72:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d14b      	bne.n	8003f12 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d021      	beq.n	8003ed8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff f833 	bl	8002f04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d032      	beq.n	8003f0a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d12b      	bne.n	8003f0a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d11f      	bne.n	8003f0a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ece:	f043 0201 	orr.w	r2, r3, #1
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	659a      	str	r2, [r3, #88]	; 0x58
 8003ed6:	e018      	b.n	8003f0a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d111      	bne.n	8003f0a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d105      	bne.n	8003f0a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f02:	f043 0201 	orr.w	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff fb08 	bl	8003520 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f10:	e00e      	b.n	8003f30 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f16:	f003 0310 	and.w	r3, r3, #16
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f7ff fb12 	bl	8003548 <HAL_ADC_ErrorCallback>
}
 8003f24:	e004      	b.n	8003f30 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	4798      	blx	r3
}
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f7ff faf4 	bl	8003534 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f4c:	bf00      	nop
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f72:	f043 0204 	orr.w	r2, r3, #4
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f7ff fae4 	bl	8003548 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f80:	bf00      	nop
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f98:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <__NVIC_SetPriorityGrouping+0x44>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fba:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <__NVIC_SetPriorityGrouping+0x44>)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	60d3      	str	r3, [r2, #12]
}
 8003fc0:	bf00      	nop
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	e000ed00 	.word	0xe000ed00

08003fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fd4:	4b04      	ldr	r3, [pc, #16]	; (8003fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	0a1b      	lsrs	r3, r3, #8
 8003fda:	f003 0307 	and.w	r3, r3, #7
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	e000ed00 	.word	0xe000ed00

08003fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	db0b      	blt.n	8004016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	f003 021f 	and.w	r2, r3, #31
 8004004:	4907      	ldr	r1, [pc, #28]	; (8004024 <__NVIC_EnableIRQ+0x38>)
 8004006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400a:	095b      	lsrs	r3, r3, #5
 800400c:	2001      	movs	r0, #1
 800400e:	fa00 f202 	lsl.w	r2, r0, r2
 8004012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	e000e100 	.word	0xe000e100

08004028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	6039      	str	r1, [r7, #0]
 8004032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004038:	2b00      	cmp	r3, #0
 800403a:	db0a      	blt.n	8004052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	b2da      	uxtb	r2, r3
 8004040:	490c      	ldr	r1, [pc, #48]	; (8004074 <__NVIC_SetPriority+0x4c>)
 8004042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004046:	0112      	lsls	r2, r2, #4
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	440b      	add	r3, r1
 800404c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004050:	e00a      	b.n	8004068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	b2da      	uxtb	r2, r3
 8004056:	4908      	ldr	r1, [pc, #32]	; (8004078 <__NVIC_SetPriority+0x50>)
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	3b04      	subs	r3, #4
 8004060:	0112      	lsls	r2, r2, #4
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	440b      	add	r3, r1
 8004066:	761a      	strb	r2, [r3, #24]
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	e000e100 	.word	0xe000e100
 8004078:	e000ed00 	.word	0xe000ed00

0800407c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800407c:	b480      	push	{r7}
 800407e:	b089      	sub	sp, #36	; 0x24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f1c3 0307 	rsb	r3, r3, #7
 8004096:	2b04      	cmp	r3, #4
 8004098:	bf28      	it	cs
 800409a:	2304      	movcs	r3, #4
 800409c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	3304      	adds	r3, #4
 80040a2:	2b06      	cmp	r3, #6
 80040a4:	d902      	bls.n	80040ac <NVIC_EncodePriority+0x30>
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	3b03      	subs	r3, #3
 80040aa:	e000      	b.n	80040ae <NVIC_EncodePriority+0x32>
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b0:	f04f 32ff 	mov.w	r2, #4294967295
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43da      	mvns	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	401a      	ands	r2, r3
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040c4:	f04f 31ff 	mov.w	r1, #4294967295
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	fa01 f303 	lsl.w	r3, r1, r3
 80040ce:	43d9      	mvns	r1, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d4:	4313      	orrs	r3, r2
         );
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3724      	adds	r7, #36	; 0x24
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
	...

080040e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040f4:	d301      	bcc.n	80040fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040f6:	2301      	movs	r3, #1
 80040f8:	e00f      	b.n	800411a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040fa:	4a0a      	ldr	r2, [pc, #40]	; (8004124 <SysTick_Config+0x40>)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3b01      	subs	r3, #1
 8004100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004102:	210f      	movs	r1, #15
 8004104:	f04f 30ff 	mov.w	r0, #4294967295
 8004108:	f7ff ff8e 	bl	8004028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <SysTick_Config+0x40>)
 800410e:	2200      	movs	r2, #0
 8004110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004112:	4b04      	ldr	r3, [pc, #16]	; (8004124 <SysTick_Config+0x40>)
 8004114:	2207      	movs	r2, #7
 8004116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	e000e010 	.word	0xe000e010

08004128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff ff29 	bl	8003f88 <__NVIC_SetPriorityGrouping>
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b086      	sub	sp, #24
 8004142:	af00      	add	r7, sp, #0
 8004144:	4603      	mov	r3, r0
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
 800414a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004150:	f7ff ff3e 	bl	8003fd0 <__NVIC_GetPriorityGrouping>
 8004154:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	6978      	ldr	r0, [r7, #20]
 800415c:	f7ff ff8e 	bl	800407c <NVIC_EncodePriority>
 8004160:	4602      	mov	r2, r0
 8004162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004166:	4611      	mov	r1, r2
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff ff5d 	bl	8004028 <__NVIC_SetPriority>
}
 800416e:	bf00      	nop
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
 800417c:	4603      	mov	r3, r0
 800417e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff ff31 	bl	8003fec <__NVIC_EnableIRQ>
}
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b082      	sub	sp, #8
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff ffa2 	bl	80040e4 <SysTick_Config>
 80041a0:	4603      	mov	r3, r0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e08d      	b.n	80042da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <HAL_DMA_Init+0x138>)
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d80f      	bhi.n	80041ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	4b45      	ldr	r3, [pc, #276]	; (80042e8 <HAL_DMA_Init+0x13c>)
 80041d2:	4413      	add	r3, r2
 80041d4:	4a45      	ldr	r2, [pc, #276]	; (80042ec <HAL_DMA_Init+0x140>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	091b      	lsrs	r3, r3, #4
 80041dc:	009a      	lsls	r2, r3, #2
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a42      	ldr	r2, [pc, #264]	; (80042f0 <HAL_DMA_Init+0x144>)
 80041e6:	641a      	str	r2, [r3, #64]	; 0x40
 80041e8:	e00e      	b.n	8004208 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	4b40      	ldr	r3, [pc, #256]	; (80042f4 <HAL_DMA_Init+0x148>)
 80041f2:	4413      	add	r3, r2
 80041f4:	4a3d      	ldr	r2, [pc, #244]	; (80042ec <HAL_DMA_Init+0x140>)
 80041f6:	fba2 2303 	umull	r2, r3, r2, r3
 80041fa:	091b      	lsrs	r3, r3, #4
 80041fc:	009a      	lsls	r2, r3, #2
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a3c      	ldr	r2, [pc, #240]	; (80042f8 <HAL_DMA_Init+0x14c>)
 8004206:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800421e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004222:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800422c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004238:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004244:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f9b6 	bl	80045cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004268:	d102      	bne.n	8004270 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004284:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d010      	beq.n	80042b0 <HAL_DMA_Init+0x104>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b04      	cmp	r3, #4
 8004294:	d80c      	bhi.n	80042b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f9d6 	bl	8004648 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	e008      	b.n	80042c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40020407 	.word	0x40020407
 80042e8:	bffdfff8 	.word	0xbffdfff8
 80042ec:	cccccccd 	.word	0xcccccccd
 80042f0:	40020000 	.word	0x40020000
 80042f4:	bffdfbf8 	.word	0xbffdfbf8
 80042f8:	40020400 	.word	0x40020400

080042fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_DMA_Start_IT+0x20>
 8004318:	2302      	movs	r3, #2
 800431a:	e066      	b.n	80043ea <HAL_DMA_Start_IT+0xee>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b01      	cmp	r3, #1
 800432e:	d155      	bne.n	80043dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0201 	bic.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 f8fb 	bl	8004550 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	2b00      	cmp	r3, #0
 8004360:	d008      	beq.n	8004374 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 020e 	orr.w	r2, r2, #14
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	e00f      	b.n	8004394 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0204 	bic.w	r2, r2, #4
 8004382:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 020a 	orr.w	r2, r2, #10
 8004392:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d007      	beq.n	80043b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043b0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043c8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f042 0201 	orr.w	r2, r2, #1
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	e005      	b.n	80043e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80043e4:	2302      	movs	r3, #2
 80043e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80043e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b084      	sub	sp, #16
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	f003 031c 	and.w	r3, r3, #28
 8004412:	2204      	movs	r2, #4
 8004414:	409a      	lsls	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4013      	ands	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d026      	beq.n	800446c <HAL_DMA_IRQHandler+0x7a>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d021      	beq.n	800446c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b00      	cmp	r3, #0
 8004434:	d107      	bne.n	8004446 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0204 	bic.w	r2, r2, #4
 8004444:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444a:	f003 021c 	and.w	r2, r3, #28
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	2104      	movs	r1, #4
 8004454:	fa01 f202 	lsl.w	r2, r1, r2
 8004458:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	2b00      	cmp	r3, #0
 8004460:	d071      	beq.n	8004546 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800446a:	e06c      	b.n	8004546 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004470:	f003 031c 	and.w	r3, r3, #28
 8004474:	2202      	movs	r2, #2
 8004476:	409a      	lsls	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4013      	ands	r3, r2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d02e      	beq.n	80044de <HAL_DMA_IRQHandler+0xec>
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d029      	beq.n	80044de <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0320 	and.w	r3, r3, #32
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10b      	bne.n	80044b0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 020a 	bic.w	r2, r2, #10
 80044a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b4:	f003 021c 	and.w	r2, r3, #28
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	2102      	movs	r1, #2
 80044be:	fa01 f202 	lsl.w	r2, r1, r2
 80044c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d038      	beq.n	8004546 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80044dc:	e033      	b.n	8004546 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e2:	f003 031c 	and.w	r3, r3, #28
 80044e6:	2208      	movs	r2, #8
 80044e8:	409a      	lsls	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4013      	ands	r3, r2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d02a      	beq.n	8004548 <HAL_DMA_IRQHandler+0x156>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d025      	beq.n	8004548 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 020e 	bic.w	r2, r2, #14
 800450a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004510:	f003 021c 	and.w	r2, r3, #28
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	2101      	movs	r1, #1
 800451a:	fa01 f202 	lsl.w	r2, r1, r2
 800451e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453a:	2b00      	cmp	r3, #0
 800453c:	d004      	beq.n	8004548 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004546:	bf00      	nop
 8004548:	bf00      	nop
}
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004566:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456c:	2b00      	cmp	r3, #0
 800456e:	d004      	beq.n	800457a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004578:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	f003 021c 	and.w	r2, r3, #28
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	2101      	movs	r1, #1
 8004588:	fa01 f202 	lsl.w	r2, r1, r2
 800458c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	2b10      	cmp	r3, #16
 800459c:	d108      	bne.n	80045b0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045ae:	e007      	b.n	80045c0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	60da      	str	r2, [r3, #12]
}
 80045c0:	bf00      	nop
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	4b17      	ldr	r3, [pc, #92]	; (8004638 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80045dc:	429a      	cmp	r2, r3
 80045de:	d80a      	bhi.n	80045f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e4:	089b      	lsrs	r3, r3, #2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045ec:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6493      	str	r3, [r2, #72]	; 0x48
 80045f4:	e007      	b.n	8004606 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	089b      	lsrs	r3, r3, #2
 80045fc:	009a      	lsls	r2, r3, #2
 80045fe:	4b0f      	ldr	r3, [pc, #60]	; (800463c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004600:	4413      	add	r3, r2
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	3b08      	subs	r3, #8
 800460e:	4a0c      	ldr	r2, [pc, #48]	; (8004640 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004610:	fba2 2303 	umull	r2, r3, r2, r3
 8004614:	091b      	lsrs	r3, r3, #4
 8004616:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a0a      	ldr	r2, [pc, #40]	; (8004644 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800461c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	2201      	movs	r2, #1
 8004626:	409a      	lsls	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800462c:	bf00      	nop
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	40020407 	.word	0x40020407
 800463c:	4002081c 	.word	0x4002081c
 8004640:	cccccccd 	.word	0xcccccccd
 8004644:	40020880 	.word	0x40020880

08004648 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	461a      	mov	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a08      	ldr	r2, [pc, #32]	; (800468c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800466a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3b01      	subs	r3, #1
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	2201      	movs	r2, #1
 8004676:	409a      	lsls	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800467c:	bf00      	nop
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	1000823f 	.word	0x1000823f
 800468c:	40020940 	.word	0x40020940

08004690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800469e:	e166      	b.n	800496e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	2101      	movs	r1, #1
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ac:	4013      	ands	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 8158 	beq.w	8004968 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 0303 	and.w	r3, r3, #3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d005      	beq.n	80046d0 <HAL_GPIO_Init+0x40>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d130      	bne.n	8004732 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	2203      	movs	r2, #3
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	43db      	mvns	r3, r3
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4013      	ands	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004706:	2201      	movs	r2, #1
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4013      	ands	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	091b      	lsrs	r3, r3, #4
 800471c:	f003 0201 	and.w	r2, r3, #1
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b03      	cmp	r3, #3
 800473c:	d017      	beq.n	800476e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	2203      	movs	r2, #3
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43db      	mvns	r3, r3
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4013      	ands	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d123      	bne.n	80047c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	08da      	lsrs	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3208      	adds	r2, #8
 8004782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004786:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	220f      	movs	r2, #15
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	43db      	mvns	r3, r3
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4013      	ands	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	08da      	lsrs	r2, r3, #3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3208      	adds	r2, #8
 80047bc:	6939      	ldr	r1, [r7, #16]
 80047be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	2203      	movs	r2, #3
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	43db      	mvns	r3, r3
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4013      	ands	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f003 0203 	and.w	r2, r3, #3
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 80b2 	beq.w	8004968 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004804:	4b61      	ldr	r3, [pc, #388]	; (800498c <HAL_GPIO_Init+0x2fc>)
 8004806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004808:	4a60      	ldr	r2, [pc, #384]	; (800498c <HAL_GPIO_Init+0x2fc>)
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	6613      	str	r3, [r2, #96]	; 0x60
 8004810:	4b5e      	ldr	r3, [pc, #376]	; (800498c <HAL_GPIO_Init+0x2fc>)
 8004812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800481c:	4a5c      	ldr	r2, [pc, #368]	; (8004990 <HAL_GPIO_Init+0x300>)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	089b      	lsrs	r3, r3, #2
 8004822:	3302      	adds	r3, #2
 8004824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004828:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	220f      	movs	r2, #15
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4013      	ands	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004846:	d02b      	beq.n	80048a0 <HAL_GPIO_Init+0x210>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a52      	ldr	r2, [pc, #328]	; (8004994 <HAL_GPIO_Init+0x304>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d025      	beq.n	800489c <HAL_GPIO_Init+0x20c>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a51      	ldr	r2, [pc, #324]	; (8004998 <HAL_GPIO_Init+0x308>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d01f      	beq.n	8004898 <HAL_GPIO_Init+0x208>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a50      	ldr	r2, [pc, #320]	; (800499c <HAL_GPIO_Init+0x30c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d019      	beq.n	8004894 <HAL_GPIO_Init+0x204>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a4f      	ldr	r2, [pc, #316]	; (80049a0 <HAL_GPIO_Init+0x310>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d013      	beq.n	8004890 <HAL_GPIO_Init+0x200>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a4e      	ldr	r2, [pc, #312]	; (80049a4 <HAL_GPIO_Init+0x314>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00d      	beq.n	800488c <HAL_GPIO_Init+0x1fc>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a4d      	ldr	r2, [pc, #308]	; (80049a8 <HAL_GPIO_Init+0x318>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d007      	beq.n	8004888 <HAL_GPIO_Init+0x1f8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a4c      	ldr	r2, [pc, #304]	; (80049ac <HAL_GPIO_Init+0x31c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d101      	bne.n	8004884 <HAL_GPIO_Init+0x1f4>
 8004880:	2307      	movs	r3, #7
 8004882:	e00e      	b.n	80048a2 <HAL_GPIO_Init+0x212>
 8004884:	2308      	movs	r3, #8
 8004886:	e00c      	b.n	80048a2 <HAL_GPIO_Init+0x212>
 8004888:	2306      	movs	r3, #6
 800488a:	e00a      	b.n	80048a2 <HAL_GPIO_Init+0x212>
 800488c:	2305      	movs	r3, #5
 800488e:	e008      	b.n	80048a2 <HAL_GPIO_Init+0x212>
 8004890:	2304      	movs	r3, #4
 8004892:	e006      	b.n	80048a2 <HAL_GPIO_Init+0x212>
 8004894:	2303      	movs	r3, #3
 8004896:	e004      	b.n	80048a2 <HAL_GPIO_Init+0x212>
 8004898:	2302      	movs	r3, #2
 800489a:	e002      	b.n	80048a2 <HAL_GPIO_Init+0x212>
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <HAL_GPIO_Init+0x212>
 80048a0:	2300      	movs	r3, #0
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	f002 0203 	and.w	r2, r2, #3
 80048a8:	0092      	lsls	r2, r2, #2
 80048aa:	4093      	lsls	r3, r2
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048b2:	4937      	ldr	r1, [pc, #220]	; (8004990 <HAL_GPIO_Init+0x300>)
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	089b      	lsrs	r3, r3, #2
 80048b8:	3302      	adds	r3, #2
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048c0:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <HAL_GPIO_Init+0x320>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	43db      	mvns	r3, r3
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4013      	ands	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048e4:	4a32      	ldr	r2, [pc, #200]	; (80049b0 <HAL_GPIO_Init+0x320>)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048ea:	4b31      	ldr	r3, [pc, #196]	; (80049b0 <HAL_GPIO_Init+0x320>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	43db      	mvns	r3, r3
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4013      	ands	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800490e:	4a28      	ldr	r2, [pc, #160]	; (80049b0 <HAL_GPIO_Init+0x320>)
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004914:	4b26      	ldr	r3, [pc, #152]	; (80049b0 <HAL_GPIO_Init+0x320>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	43db      	mvns	r3, r3
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4013      	ands	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004938:	4a1d      	ldr	r2, [pc, #116]	; (80049b0 <HAL_GPIO_Init+0x320>)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800493e:	4b1c      	ldr	r3, [pc, #112]	; (80049b0 <HAL_GPIO_Init+0x320>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	43db      	mvns	r3, r3
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4013      	ands	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004962:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <HAL_GPIO_Init+0x320>)
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	3301      	adds	r3, #1
 800496c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	fa22 f303 	lsr.w	r3, r2, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	f47f ae91 	bne.w	80046a0 <HAL_GPIO_Init+0x10>
  }
}
 800497e:	bf00      	nop
 8004980:	bf00      	nop
 8004982:	371c      	adds	r7, #28
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	40021000 	.word	0x40021000
 8004990:	40010000 	.word	0x40010000
 8004994:	48000400 	.word	0x48000400
 8004998:	48000800 	.word	0x48000800
 800499c:	48000c00 	.word	0x48000c00
 80049a0:	48001000 	.word	0x48001000
 80049a4:	48001400 	.word	0x48001400
 80049a8:	48001800 	.word	0x48001800
 80049ac:	48001c00 	.word	0x48001c00
 80049b0:	40010400 	.word	0x40010400

080049b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80049c2:	e0c9      	b.n	8004b58 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80049c4:	2201      	movs	r2, #1
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	4013      	ands	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 80bc 	beq.w	8004b52 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80049da:	4a66      	ldr	r2, [pc, #408]	; (8004b74 <HAL_GPIO_DeInit+0x1c0>)
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	089b      	lsrs	r3, r3, #2
 80049e0:	3302      	adds	r3, #2
 80049e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	220f      	movs	r2, #15
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4013      	ands	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a02:	d02b      	beq.n	8004a5c <HAL_GPIO_DeInit+0xa8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a5c      	ldr	r2, [pc, #368]	; (8004b78 <HAL_GPIO_DeInit+0x1c4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d025      	beq.n	8004a58 <HAL_GPIO_DeInit+0xa4>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a5b      	ldr	r2, [pc, #364]	; (8004b7c <HAL_GPIO_DeInit+0x1c8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d01f      	beq.n	8004a54 <HAL_GPIO_DeInit+0xa0>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a5a      	ldr	r2, [pc, #360]	; (8004b80 <HAL_GPIO_DeInit+0x1cc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d019      	beq.n	8004a50 <HAL_GPIO_DeInit+0x9c>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a59      	ldr	r2, [pc, #356]	; (8004b84 <HAL_GPIO_DeInit+0x1d0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d013      	beq.n	8004a4c <HAL_GPIO_DeInit+0x98>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a58      	ldr	r2, [pc, #352]	; (8004b88 <HAL_GPIO_DeInit+0x1d4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d00d      	beq.n	8004a48 <HAL_GPIO_DeInit+0x94>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a57      	ldr	r2, [pc, #348]	; (8004b8c <HAL_GPIO_DeInit+0x1d8>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d007      	beq.n	8004a44 <HAL_GPIO_DeInit+0x90>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a56      	ldr	r2, [pc, #344]	; (8004b90 <HAL_GPIO_DeInit+0x1dc>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d101      	bne.n	8004a40 <HAL_GPIO_DeInit+0x8c>
 8004a3c:	2307      	movs	r3, #7
 8004a3e:	e00e      	b.n	8004a5e <HAL_GPIO_DeInit+0xaa>
 8004a40:	2308      	movs	r3, #8
 8004a42:	e00c      	b.n	8004a5e <HAL_GPIO_DeInit+0xaa>
 8004a44:	2306      	movs	r3, #6
 8004a46:	e00a      	b.n	8004a5e <HAL_GPIO_DeInit+0xaa>
 8004a48:	2305      	movs	r3, #5
 8004a4a:	e008      	b.n	8004a5e <HAL_GPIO_DeInit+0xaa>
 8004a4c:	2304      	movs	r3, #4
 8004a4e:	e006      	b.n	8004a5e <HAL_GPIO_DeInit+0xaa>
 8004a50:	2303      	movs	r3, #3
 8004a52:	e004      	b.n	8004a5e <HAL_GPIO_DeInit+0xaa>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e002      	b.n	8004a5e <HAL_GPIO_DeInit+0xaa>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e000      	b.n	8004a5e <HAL_GPIO_DeInit+0xaa>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	f002 0203 	and.w	r2, r2, #3
 8004a64:	0092      	lsls	r2, r2, #2
 8004a66:	4093      	lsls	r3, r2
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d132      	bne.n	8004ad4 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004a6e:	4b49      	ldr	r3, [pc, #292]	; (8004b94 <HAL_GPIO_DeInit+0x1e0>)
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	43db      	mvns	r3, r3
 8004a76:	4947      	ldr	r1, [pc, #284]	; (8004b94 <HAL_GPIO_DeInit+0x1e0>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004a7c:	4b45      	ldr	r3, [pc, #276]	; (8004b94 <HAL_GPIO_DeInit+0x1e0>)
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	43db      	mvns	r3, r3
 8004a84:	4943      	ldr	r1, [pc, #268]	; (8004b94 <HAL_GPIO_DeInit+0x1e0>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004a8a:	4b42      	ldr	r3, [pc, #264]	; (8004b94 <HAL_GPIO_DeInit+0x1e0>)
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	43db      	mvns	r3, r3
 8004a92:	4940      	ldr	r1, [pc, #256]	; (8004b94 <HAL_GPIO_DeInit+0x1e0>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004a98:	4b3e      	ldr	r3, [pc, #248]	; (8004b94 <HAL_GPIO_DeInit+0x1e0>)
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	493c      	ldr	r1, [pc, #240]	; (8004b94 <HAL_GPIO_DeInit+0x1e0>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f003 0303 	and.w	r3, r3, #3
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	220f      	movs	r2, #15
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004ab6:	4a2f      	ldr	r2, [pc, #188]	; (8004b74 <HAL_GPIO_DeInit+0x1c0>)
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	089b      	lsrs	r3, r3, #2
 8004abc:	3302      	adds	r3, #2
 8004abe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	43da      	mvns	r2, r3
 8004ac6:	482b      	ldr	r0, [pc, #172]	; (8004b74 <HAL_GPIO_DeInit+0x1c0>)
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	089b      	lsrs	r3, r3, #2
 8004acc:	400a      	ands	r2, r1
 8004ace:	3302      	adds	r3, #2
 8004ad0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	2103      	movs	r1, #3
 8004ade:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	08da      	lsrs	r2, r3, #3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3208      	adds	r2, #8
 8004af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	220f      	movs	r2, #15
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	43db      	mvns	r3, r3
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	08d2      	lsrs	r2, r2, #3
 8004b08:	4019      	ands	r1, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3208      	adds	r2, #8
 8004b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	2103      	movs	r1, #3
 8004b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	401a      	ands	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	fa01 f303 	lsl.w	r3, r1, r3
 8004b34:	43db      	mvns	r3, r3
 8004b36:	401a      	ands	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	2103      	movs	r1, #3
 8004b46:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4a:	43db      	mvns	r3, r3
 8004b4c:	401a      	ands	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	3301      	adds	r3, #1
 8004b56:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f47f af2f 	bne.w	80049c4 <HAL_GPIO_DeInit+0x10>
  }
}
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
 8004b6a:	371c      	adds	r7, #28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	40010000 	.word	0x40010000
 8004b78:	48000400 	.word	0x48000400
 8004b7c:	48000800 	.word	0x48000800
 8004b80:	48000c00 	.word	0x48000c00
 8004b84:	48001000 	.word	0x48001000
 8004b88:	48001400 	.word	0x48001400
 8004b8c:	48001800 	.word	0x48001800
 8004b90:	48001c00 	.word	0x48001c00
 8004b94:	40010400 	.word	0x40010400

08004b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	807b      	strh	r3, [r7, #2]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ba8:	787b      	ldrb	r3, [r7, #1]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bae:	887a      	ldrh	r2, [r7, #2]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004bb4:	e002      	b.n	8004bbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bb6:	887a      	ldrh	r2, [r7, #2]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e081      	b.n	8004cde <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fd fdba 	bl	8002768 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2224      	movs	r2, #36	; 0x24
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d107      	bne.n	8004c42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c3e:	609a      	str	r2, [r3, #8]
 8004c40:	e006      	b.n	8004c50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d104      	bne.n	8004c62 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6812      	ldr	r2, [r2, #0]
 8004c6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	69d9      	ldr	r1, [r3, #28]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a1a      	ldr	r2, [r3, #32]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	817b      	strh	r3, [r7, #10]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	f040 80da 	bne.w	8004ebe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_I2C_Master_Transmit+0x30>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e0d3      	b.n	8004ec0 <HAL_I2C_Master_Transmit+0x1d8>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d20:	f7fe f824 	bl	8002d6c <HAL_GetTick>
 8004d24:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	2319      	movs	r3, #25
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 f9e6 	bl	8005104 <I2C_WaitOnFlagUntilTimeout>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e0be      	b.n	8004ec0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2221      	movs	r2, #33	; 0x21
 8004d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2210      	movs	r2, #16
 8004d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	893a      	ldrh	r2, [r7, #8]
 8004d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	2bff      	cmp	r3, #255	; 0xff
 8004d72:	d90e      	bls.n	8004d92 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	22ff      	movs	r2, #255	; 0xff
 8004d78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	8979      	ldrh	r1, [r7, #10]
 8004d82:	4b51      	ldr	r3, [pc, #324]	; (8004ec8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fbdc 	bl	8005548 <I2C_TransferConfig>
 8004d90:	e06c      	b.n	8004e6c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	8979      	ldrh	r1, [r7, #10]
 8004da4:	4b48      	ldr	r3, [pc, #288]	; (8004ec8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 fbcb 	bl	8005548 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004db2:	e05b      	b.n	8004e6c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	6a39      	ldr	r1, [r7, #32]
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f9e3 	bl	8005184 <I2C_WaitOnTXISFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e07b      	b.n	8004ec0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	781a      	ldrb	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	3b01      	subs	r3, #1
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d034      	beq.n	8004e6c <HAL_I2C_Master_Transmit+0x184>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d130      	bne.n	8004e6c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	2200      	movs	r2, #0
 8004e12:	2180      	movs	r1, #128	; 0x80
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 f975 	bl	8005104 <I2C_WaitOnFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e04d      	b.n	8004ec0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2bff      	cmp	r3, #255	; 0xff
 8004e2c:	d90e      	bls.n	8004e4c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	22ff      	movs	r2, #255	; 0xff
 8004e32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	8979      	ldrh	r1, [r7, #10]
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f000 fb7f 	bl	8005548 <I2C_TransferConfig>
 8004e4a:	e00f      	b.n	8004e6c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	8979      	ldrh	r1, [r7, #10]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 fb6e 	bl	8005548 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d19e      	bne.n	8004db4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	6a39      	ldr	r1, [r7, #32]
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 f9c2 	bl	8005204 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e01a      	b.n	8004ec0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6859      	ldr	r1, [r3, #4]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <HAL_I2C_Master_Transmit+0x1e4>)
 8004e9e:	400b      	ands	r3, r1
 8004ea0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e000      	b.n	8004ec0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004ebe:	2302      	movs	r3, #2
  }
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	80002000 	.word	0x80002000
 8004ecc:	fe00e800 	.word	0xfe00e800

08004ed0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	607a      	str	r2, [r7, #4]
 8004eda:	461a      	mov	r2, r3
 8004edc:	460b      	mov	r3, r1
 8004ede:	817b      	strh	r3, [r7, #10]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	f040 80db 	bne.w	80050a8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d101      	bne.n	8004f00 <HAL_I2C_Master_Receive+0x30>
 8004efc:	2302      	movs	r3, #2
 8004efe:	e0d4      	b.n	80050aa <HAL_I2C_Master_Receive+0x1da>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f08:	f7fd ff30 	bl	8002d6c <HAL_GetTick>
 8004f0c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	2319      	movs	r3, #25
 8004f14:	2201      	movs	r2, #1
 8004f16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f8f2 	bl	8005104 <I2C_WaitOnFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e0bf      	b.n	80050aa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2222      	movs	r2, #34	; 0x22
 8004f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2210      	movs	r2, #16
 8004f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	893a      	ldrh	r2, [r7, #8]
 8004f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2bff      	cmp	r3, #255	; 0xff
 8004f5a:	d90e      	bls.n	8004f7a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	22ff      	movs	r2, #255	; 0xff
 8004f60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	8979      	ldrh	r1, [r7, #10]
 8004f6a:	4b52      	ldr	r3, [pc, #328]	; (80050b4 <HAL_I2C_Master_Receive+0x1e4>)
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 fae8 	bl	8005548 <I2C_TransferConfig>
 8004f78:	e06d      	b.n	8005056 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	8979      	ldrh	r1, [r7, #10]
 8004f8c:	4b49      	ldr	r3, [pc, #292]	; (80050b4 <HAL_I2C_Master_Receive+0x1e4>)
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 fad7 	bl	8005548 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004f9a:	e05c      	b.n	8005056 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	6a39      	ldr	r1, [r7, #32]
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f96b 	bl	800527c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e07c      	b.n	80050aa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d034      	beq.n	8005056 <HAL_I2C_Master_Receive+0x186>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d130      	bne.n	8005056 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2180      	movs	r1, #128	; 0x80
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 f880 	bl	8005104 <I2C_WaitOnFlagUntilTimeout>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e04d      	b.n	80050aa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005012:	b29b      	uxth	r3, r3
 8005014:	2bff      	cmp	r3, #255	; 0xff
 8005016:	d90e      	bls.n	8005036 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	22ff      	movs	r2, #255	; 0xff
 800501c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005022:	b2da      	uxtb	r2, r3
 8005024:	8979      	ldrh	r1, [r7, #10]
 8005026:	2300      	movs	r3, #0
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 fa8a 	bl	8005548 <I2C_TransferConfig>
 8005034:	e00f      	b.n	8005056 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503a:	b29a      	uxth	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005044:	b2da      	uxtb	r2, r3
 8005046:	8979      	ldrh	r1, [r7, #10]
 8005048:	2300      	movs	r3, #0
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f000 fa79 	bl	8005548 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d19d      	bne.n	8004f9c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	6a39      	ldr	r1, [r7, #32]
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f8cd 	bl	8005204 <I2C_WaitOnSTOPFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e01a      	b.n	80050aa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2220      	movs	r2, #32
 800507a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6859      	ldr	r1, [r3, #4]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <HAL_I2C_Master_Receive+0x1e8>)
 8005088:	400b      	ands	r3, r1
 800508a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	e000      	b.n	80050aa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80050a8:	2302      	movs	r3, #2
  }
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	80002400 	.word	0x80002400
 80050b8:	fe00e800 	.word	0xfe00e800

080050bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d103      	bne.n	80050da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2200      	movs	r2, #0
 80050d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d007      	beq.n	80050f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	619a      	str	r2, [r3, #24]
  }
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	603b      	str	r3, [r7, #0]
 8005110:	4613      	mov	r3, r2
 8005112:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005114:	e022      	b.n	800515c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511c:	d01e      	beq.n	800515c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800511e:	f7fd fe25 	bl	8002d6c <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d302      	bcc.n	8005134 <I2C_WaitOnFlagUntilTimeout+0x30>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d113      	bne.n	800515c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005138:	f043 0220 	orr.w	r2, r3, #32
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e00f      	b.n	800517c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	4013      	ands	r3, r2
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	429a      	cmp	r2, r3
 800516a:	bf0c      	ite	eq
 800516c:	2301      	moveq	r3, #1
 800516e:	2300      	movne	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	461a      	mov	r2, r3
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	429a      	cmp	r2, r3
 8005178:	d0cd      	beq.n	8005116 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005190:	e02c      	b.n	80051ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 f8ea 	bl	8005370 <I2C_IsErrorOccurred>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e02a      	b.n	80051fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ac:	d01e      	beq.n	80051ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ae:	f7fd fddd 	bl	8002d6c <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d302      	bcc.n	80051c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d113      	bne.n	80051ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c8:	f043 0220 	orr.w	r2, r3, #32
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e007      	b.n	80051fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d1cb      	bne.n	8005192 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005210:	e028      	b.n	8005264 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 f8aa 	bl	8005370 <I2C_IsErrorOccurred>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e026      	b.n	8005274 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005226:	f7fd fda1 	bl	8002d6c <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	429a      	cmp	r2, r3
 8005234:	d302      	bcc.n	800523c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d113      	bne.n	8005264 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005240:	f043 0220 	orr.w	r2, r3, #32
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e007      	b.n	8005274 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b20      	cmp	r3, #32
 8005270:	d1cf      	bne.n	8005212 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005288:	e064      	b.n	8005354 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	68b9      	ldr	r1, [r7, #8]
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 f86e 	bl	8005370 <I2C_IsErrorOccurred>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e062      	b.n	8005364 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	f003 0320 	and.w	r3, r3, #32
 80052a8:	2b20      	cmp	r3, #32
 80052aa:	d138      	bne.n	800531e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f003 0304 	and.w	r3, r3, #4
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d105      	bne.n	80052c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	e04e      	b.n	8005364 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	2b10      	cmp	r3, #16
 80052d2:	d107      	bne.n	80052e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2210      	movs	r2, #16
 80052da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2204      	movs	r2, #4
 80052e0:	645a      	str	r2, [r3, #68]	; 0x44
 80052e2:	e002      	b.n	80052ea <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2220      	movs	r2, #32
 80052f0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6859      	ldr	r1, [r3, #4]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	4b1b      	ldr	r3, [pc, #108]	; (800536c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80052fe:	400b      	ands	r3, r1
 8005300:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2220      	movs	r2, #32
 8005306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e022      	b.n	8005364 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800531e:	f7fd fd25 	bl	8002d6c <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	429a      	cmp	r2, r3
 800532c:	d302      	bcc.n	8005334 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10f      	bne.n	8005354 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005338:	f043 0220 	orr.w	r2, r3, #32
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e007      	b.n	8005364 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b04      	cmp	r3, #4
 8005360:	d193      	bne.n	800528a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	fe00e800 	.word	0xfe00e800

08005370 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08a      	sub	sp, #40	; 0x28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800537c:	2300      	movs	r3, #0
 800537e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	f003 0310 	and.w	r3, r3, #16
 8005398:	2b00      	cmp	r3, #0
 800539a:	d075      	beq.n	8005488 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2210      	movs	r2, #16
 80053a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053a4:	e056      	b.n	8005454 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ac:	d052      	beq.n	8005454 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053ae:	f7fd fcdd 	bl	8002d6c <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d302      	bcc.n	80053c4 <I2C_IsErrorOccurred+0x54>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d147      	bne.n	8005454 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e6:	d12e      	bne.n	8005446 <I2C_IsErrorOccurred+0xd6>
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ee:	d02a      	beq.n	8005446 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80053f0:	7cfb      	ldrb	r3, [r7, #19]
 80053f2:	2b20      	cmp	r3, #32
 80053f4:	d027      	beq.n	8005446 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005404:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005406:	f7fd fcb1 	bl	8002d6c <HAL_GetTick>
 800540a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800540c:	e01b      	b.n	8005446 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800540e:	f7fd fcad 	bl	8002d6c <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b19      	cmp	r3, #25
 800541a:	d914      	bls.n	8005446 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005420:	f043 0220 	orr.w	r2, r3, #32
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	f003 0320 	and.w	r3, r3, #32
 8005450:	2b20      	cmp	r3, #32
 8005452:	d1dc      	bne.n	800540e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f003 0320 	and.w	r3, r3, #32
 800545e:	2b20      	cmp	r3, #32
 8005460:	d003      	beq.n	800546a <I2C_IsErrorOccurred+0xfa>
 8005462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005466:	2b00      	cmp	r3, #0
 8005468:	d09d      	beq.n	80053a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800546a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800546e:	2b00      	cmp	r3, #0
 8005470:	d103      	bne.n	800547a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2220      	movs	r2, #32
 8005478:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	f043 0304 	orr.w	r3, r3, #4
 8005480:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	f043 0301 	orr.w	r3, r3, #1
 80054a0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00b      	beq.n	80054d4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	f043 0308 	orr.w	r3, r3, #8
 80054c2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00b      	beq.n	80054f6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	f043 0302 	orr.w	r3, r3, #2
 80054e4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80054f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d01c      	beq.n	8005538 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7ff fddc 	bl	80050bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6859      	ldr	r1, [r3, #4]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <I2C_IsErrorOccurred+0x1d4>)
 8005510:	400b      	ands	r3, r1
 8005512:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	431a      	orrs	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800553c:	4618      	mov	r0, r3
 800553e:	3728      	adds	r7, #40	; 0x28
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	fe00e800 	.word	0xfe00e800

08005548 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	607b      	str	r3, [r7, #4]
 8005552:	460b      	mov	r3, r1
 8005554:	817b      	strh	r3, [r7, #10]
 8005556:	4613      	mov	r3, r2
 8005558:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800555a:	897b      	ldrh	r3, [r7, #10]
 800555c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005560:	7a7b      	ldrb	r3, [r7, #9]
 8005562:	041b      	lsls	r3, r3, #16
 8005564:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005568:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	4313      	orrs	r3, r2
 8005572:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005576:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	0d5b      	lsrs	r3, r3, #21
 8005582:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005586:	4b08      	ldr	r3, [pc, #32]	; (80055a8 <I2C_TransferConfig+0x60>)
 8005588:	430b      	orrs	r3, r1
 800558a:	43db      	mvns	r3, r3
 800558c:	ea02 0103 	and.w	r1, r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	430a      	orrs	r2, r1
 8005598:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800559a:	bf00      	nop
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	03ff63ff 	.word	0x03ff63ff

080055ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d138      	bne.n	8005634 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e032      	b.n	8005636 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2224      	movs	r2, #36	; 0x24
 80055dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0201 	bic.w	r2, r2, #1
 80055ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6819      	ldr	r1, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	e000      	b.n	8005636 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005634:	2302      	movs	r3, #2
  }
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b20      	cmp	r3, #32
 8005656:	d139      	bne.n	80056cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005662:	2302      	movs	r3, #2
 8005664:	e033      	b.n	80056ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2224      	movs	r2, #36	; 0x24
 8005672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0201 	bic.w	r2, r2, #1
 8005684:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005694:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	021b      	lsls	r3, r3, #8
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4313      	orrs	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0201 	orr.w	r2, r2, #1
 80056b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	e000      	b.n	80056ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056cc:	2302      	movs	r3, #2
  }
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
	...

080056dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80056e0:	4b0d      	ldr	r3, [pc, #52]	; (8005718 <HAL_PWREx_GetVoltageRange+0x3c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ec:	d102      	bne.n	80056f4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80056ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056f2:	e00b      	b.n	800570c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80056f4:	4b08      	ldr	r3, [pc, #32]	; (8005718 <HAL_PWREx_GetVoltageRange+0x3c>)
 80056f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005702:	d102      	bne.n	800570a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005708:	e000      	b.n	800570c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800570a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800570c:	4618      	mov	r0, r3
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40007000 	.word	0x40007000

0800571c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d141      	bne.n	80057ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800572a:	4b4b      	ldr	r3, [pc, #300]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005736:	d131      	bne.n	800579c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005738:	4b47      	ldr	r3, [pc, #284]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800573a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800573e:	4a46      	ldr	r2, [pc, #280]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005744:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005748:	4b43      	ldr	r3, [pc, #268]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005750:	4a41      	ldr	r2, [pc, #260]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005756:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005758:	4b40      	ldr	r3, [pc, #256]	; (800585c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2232      	movs	r2, #50	; 0x32
 800575e:	fb02 f303 	mul.w	r3, r2, r3
 8005762:	4a3f      	ldr	r2, [pc, #252]	; (8005860 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005764:	fba2 2303 	umull	r2, r3, r2, r3
 8005768:	0c9b      	lsrs	r3, r3, #18
 800576a:	3301      	adds	r3, #1
 800576c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800576e:	e002      	b.n	8005776 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3b01      	subs	r3, #1
 8005774:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005776:	4b38      	ldr	r3, [pc, #224]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800577e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005782:	d102      	bne.n	800578a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f2      	bne.n	8005770 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800578a:	4b33      	ldr	r3, [pc, #204]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005796:	d158      	bne.n	800584a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e057      	b.n	800584c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800579c:	4b2e      	ldr	r3, [pc, #184]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800579e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057a2:	4a2d      	ldr	r2, [pc, #180]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80057ac:	e04d      	b.n	800584a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057b4:	d141      	bne.n	800583a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057b6:	4b28      	ldr	r3, [pc, #160]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c2:	d131      	bne.n	8005828 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057c4:	4b24      	ldr	r3, [pc, #144]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ca:	4a23      	ldr	r2, [pc, #140]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057d4:	4b20      	ldr	r3, [pc, #128]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057dc:	4a1e      	ldr	r2, [pc, #120]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80057e4:	4b1d      	ldr	r3, [pc, #116]	; (800585c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2232      	movs	r2, #50	; 0x32
 80057ea:	fb02 f303 	mul.w	r3, r2, r3
 80057ee:	4a1c      	ldr	r2, [pc, #112]	; (8005860 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80057f0:	fba2 2303 	umull	r2, r3, r2, r3
 80057f4:	0c9b      	lsrs	r3, r3, #18
 80057f6:	3301      	adds	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057fa:	e002      	b.n	8005802 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3b01      	subs	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005802:	4b15      	ldr	r3, [pc, #84]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580e:	d102      	bne.n	8005816 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f2      	bne.n	80057fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005816:	4b10      	ldr	r3, [pc, #64]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800581e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005822:	d112      	bne.n	800584a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e011      	b.n	800584c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005828:	4b0b      	ldr	r3, [pc, #44]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800582a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800582e:	4a0a      	ldr	r2, [pc, #40]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005834:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005838:	e007      	b.n	800584a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800583a:	4b07      	ldr	r3, [pc, #28]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005842:	4a05      	ldr	r2, [pc, #20]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005844:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005848:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	40007000 	.word	0x40007000
 800585c:	20000004 	.word	0x20000004
 8005860:	431bde83 	.word	0x431bde83

08005864 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d102      	bne.n	8005878 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	f000 bc08 	b.w	8006088 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005878:	4b96      	ldr	r3, [pc, #600]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 030c 	and.w	r3, r3, #12
 8005880:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005882:	4b94      	ldr	r3, [pc, #592]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0310 	and.w	r3, r3, #16
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 80e4 	beq.w	8005a62 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d007      	beq.n	80058b0 <HAL_RCC_OscConfig+0x4c>
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2b0c      	cmp	r3, #12
 80058a4:	f040 808b 	bne.w	80059be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	f040 8087 	bne.w	80059be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058b0:	4b88      	ldr	r3, [pc, #544]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d005      	beq.n	80058c8 <HAL_RCC_OscConfig+0x64>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e3df      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a1a      	ldr	r2, [r3, #32]
 80058cc:	4b81      	ldr	r3, [pc, #516]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0308 	and.w	r3, r3, #8
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d004      	beq.n	80058e2 <HAL_RCC_OscConfig+0x7e>
 80058d8:	4b7e      	ldr	r3, [pc, #504]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058e0:	e005      	b.n	80058ee <HAL_RCC_OscConfig+0x8a>
 80058e2:	4b7c      	ldr	r3, [pc, #496]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 80058e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058e8:	091b      	lsrs	r3, r3, #4
 80058ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d223      	bcs.n	800593a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fd94 	bl	8006424 <RCC_SetFlashLatencyFromMSIRange>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e3c0      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005906:	4b73      	ldr	r3, [pc, #460]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a72      	ldr	r2, [pc, #456]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 800590c:	f043 0308 	orr.w	r3, r3, #8
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	4b70      	ldr	r3, [pc, #448]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	496d      	ldr	r1, [pc, #436]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005920:	4313      	orrs	r3, r2
 8005922:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005924:	4b6b      	ldr	r3, [pc, #428]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	021b      	lsls	r3, r3, #8
 8005932:	4968      	ldr	r1, [pc, #416]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005934:	4313      	orrs	r3, r2
 8005936:	604b      	str	r3, [r1, #4]
 8005938:	e025      	b.n	8005986 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800593a:	4b66      	ldr	r3, [pc, #408]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a65      	ldr	r2, [pc, #404]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005940:	f043 0308 	orr.w	r3, r3, #8
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	4b63      	ldr	r3, [pc, #396]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	4960      	ldr	r1, [pc, #384]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005954:	4313      	orrs	r3, r2
 8005956:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005958:	4b5e      	ldr	r3, [pc, #376]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	021b      	lsls	r3, r3, #8
 8005966:	495b      	ldr	r1, [pc, #364]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005968:	4313      	orrs	r3, r2
 800596a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d109      	bne.n	8005986 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fd54 	bl	8006424 <RCC_SetFlashLatencyFromMSIRange>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e380      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005986:	f000 fcc1 	bl	800630c <HAL_RCC_GetSysClockFreq>
 800598a:	4602      	mov	r2, r0
 800598c:	4b51      	ldr	r3, [pc, #324]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	091b      	lsrs	r3, r3, #4
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	4950      	ldr	r1, [pc, #320]	; (8005ad8 <HAL_RCC_OscConfig+0x274>)
 8005998:	5ccb      	ldrb	r3, [r1, r3]
 800599a:	f003 031f 	and.w	r3, r3, #31
 800599e:	fa22 f303 	lsr.w	r3, r2, r3
 80059a2:	4a4e      	ldr	r2, [pc, #312]	; (8005adc <HAL_RCC_OscConfig+0x278>)
 80059a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80059a6:	4b4e      	ldr	r3, [pc, #312]	; (8005ae0 <HAL_RCC_OscConfig+0x27c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fd f98e 	bl	8002ccc <HAL_InitTick>
 80059b0:	4603      	mov	r3, r0
 80059b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d052      	beq.n	8005a60 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	e364      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d032      	beq.n	8005a2c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80059c6:	4b43      	ldr	r3, [pc, #268]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a42      	ldr	r2, [pc, #264]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 80059cc:	f043 0301 	orr.w	r3, r3, #1
 80059d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059d2:	f7fd f9cb 	bl	8002d6c <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059da:	f7fd f9c7 	bl	8002d6c <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e34d      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059ec:	4b39      	ldr	r3, [pc, #228]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0f0      	beq.n	80059da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059f8:	4b36      	ldr	r3, [pc, #216]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a35      	ldr	r2, [pc, #212]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 80059fe:	f043 0308 	orr.w	r3, r3, #8
 8005a02:	6013      	str	r3, [r2, #0]
 8005a04:	4b33      	ldr	r3, [pc, #204]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	4930      	ldr	r1, [pc, #192]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a16:	4b2f      	ldr	r3, [pc, #188]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	021b      	lsls	r3, r3, #8
 8005a24:	492b      	ldr	r1, [pc, #172]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	604b      	str	r3, [r1, #4]
 8005a2a:	e01a      	b.n	8005a62 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005a2c:	4b29      	ldr	r3, [pc, #164]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a28      	ldr	r2, [pc, #160]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005a32:	f023 0301 	bic.w	r3, r3, #1
 8005a36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a38:	f7fd f998 	bl	8002d6c <HAL_GetTick>
 8005a3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a40:	f7fd f994 	bl	8002d6c <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e31a      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a52:	4b20      	ldr	r3, [pc, #128]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1f0      	bne.n	8005a40 <HAL_RCC_OscConfig+0x1dc>
 8005a5e:	e000      	b.n	8005a62 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d073      	beq.n	8005b56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d005      	beq.n	8005a80 <HAL_RCC_OscConfig+0x21c>
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	2b0c      	cmp	r3, #12
 8005a78:	d10e      	bne.n	8005a98 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d10b      	bne.n	8005a98 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a80:	4b14      	ldr	r3, [pc, #80]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d063      	beq.n	8005b54 <HAL_RCC_OscConfig+0x2f0>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d15f      	bne.n	8005b54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e2f7      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa0:	d106      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x24c>
 8005aa2:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a0b      	ldr	r2, [pc, #44]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	e025      	b.n	8005afc <HAL_RCC_OscConfig+0x298>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ab8:	d114      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x280>
 8005aba:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a05      	ldr	r2, [pc, #20]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	4b03      	ldr	r3, [pc, #12]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a02      	ldr	r2, [pc, #8]	; (8005ad4 <HAL_RCC_OscConfig+0x270>)
 8005acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	e013      	b.n	8005afc <HAL_RCC_OscConfig+0x298>
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	080c8368 	.word	0x080c8368
 8005adc:	20000004 	.word	0x20000004
 8005ae0:	20000008 	.word	0x20000008
 8005ae4:	4ba0      	ldr	r3, [pc, #640]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a9f      	ldr	r2, [pc, #636]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	4b9d      	ldr	r3, [pc, #628]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a9c      	ldr	r2, [pc, #624]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d013      	beq.n	8005b2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b04:	f7fd f932 	bl	8002d6c <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b0c:	f7fd f92e 	bl	8002d6c <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b64      	cmp	r3, #100	; 0x64
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e2b4      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b1e:	4b92      	ldr	r3, [pc, #584]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0f0      	beq.n	8005b0c <HAL_RCC_OscConfig+0x2a8>
 8005b2a:	e014      	b.n	8005b56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b2c:	f7fd f91e 	bl	8002d6c <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b34:	f7fd f91a 	bl	8002d6c <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b64      	cmp	r3, #100	; 0x64
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e2a0      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b46:	4b88      	ldr	r3, [pc, #544]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1f0      	bne.n	8005b34 <HAL_RCC_OscConfig+0x2d0>
 8005b52:	e000      	b.n	8005b56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d060      	beq.n	8005c24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	2b04      	cmp	r3, #4
 8005b66:	d005      	beq.n	8005b74 <HAL_RCC_OscConfig+0x310>
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	2b0c      	cmp	r3, #12
 8005b6c:	d119      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d116      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b74:	4b7c      	ldr	r3, [pc, #496]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d005      	beq.n	8005b8c <HAL_RCC_OscConfig+0x328>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e27d      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b8c:	4b76      	ldr	r3, [pc, #472]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	061b      	lsls	r3, r3, #24
 8005b9a:	4973      	ldr	r1, [pc, #460]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ba0:	e040      	b.n	8005c24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d023      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005baa:	4b6f      	ldr	r3, [pc, #444]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a6e      	ldr	r2, [pc, #440]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb6:	f7fd f8d9 	bl	8002d6c <HAL_GetTick>
 8005bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bbc:	e008      	b.n	8005bd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bbe:	f7fd f8d5 	bl	8002d6c <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e25b      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bd0:	4b65      	ldr	r3, [pc, #404]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0f0      	beq.n	8005bbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bdc:	4b62      	ldr	r3, [pc, #392]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	061b      	lsls	r3, r3, #24
 8005bea:	495f      	ldr	r1, [pc, #380]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	604b      	str	r3, [r1, #4]
 8005bf0:	e018      	b.n	8005c24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bf2:	4b5d      	ldr	r3, [pc, #372]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a5c      	ldr	r2, [pc, #368]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfe:	f7fd f8b5 	bl	8002d6c <HAL_GetTick>
 8005c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c04:	e008      	b.n	8005c18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c06:	f7fd f8b1 	bl	8002d6c <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d901      	bls.n	8005c18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e237      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c18:	4b53      	ldr	r3, [pc, #332]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1f0      	bne.n	8005c06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0308 	and.w	r3, r3, #8
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d03c      	beq.n	8005caa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01c      	beq.n	8005c72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c38:	4b4b      	ldr	r3, [pc, #300]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c3e:	4a4a      	ldr	r2, [pc, #296]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005c40:	f043 0301 	orr.w	r3, r3, #1
 8005c44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c48:	f7fd f890 	bl	8002d6c <HAL_GetTick>
 8005c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c4e:	e008      	b.n	8005c62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c50:	f7fd f88c 	bl	8002d6c <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e212      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c62:	4b41      	ldr	r3, [pc, #260]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0ef      	beq.n	8005c50 <HAL_RCC_OscConfig+0x3ec>
 8005c70:	e01b      	b.n	8005caa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c72:	4b3d      	ldr	r3, [pc, #244]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c78:	4a3b      	ldr	r2, [pc, #236]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005c7a:	f023 0301 	bic.w	r3, r3, #1
 8005c7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c82:	f7fd f873 	bl	8002d6c <HAL_GetTick>
 8005c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c88:	e008      	b.n	8005c9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c8a:	f7fd f86f 	bl	8002d6c <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e1f5      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c9c:	4b32      	ldr	r3, [pc, #200]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1ef      	bne.n	8005c8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0304 	and.w	r3, r3, #4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 80a6 	beq.w	8005e04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005cbc:	4b2a      	ldr	r3, [pc, #168]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10d      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cc8:	4b27      	ldr	r3, [pc, #156]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ccc:	4a26      	ldr	r2, [pc, #152]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8005cd4:	4b24      	ldr	r3, [pc, #144]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cdc:	60bb      	str	r3, [r7, #8]
 8005cde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ce4:	4b21      	ldr	r3, [pc, #132]	; (8005d6c <HAL_RCC_OscConfig+0x508>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d118      	bne.n	8005d22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cf0:	4b1e      	ldr	r3, [pc, #120]	; (8005d6c <HAL_RCC_OscConfig+0x508>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a1d      	ldr	r2, [pc, #116]	; (8005d6c <HAL_RCC_OscConfig+0x508>)
 8005cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cfc:	f7fd f836 	bl	8002d6c <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d04:	f7fd f832 	bl	8002d6c <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e1b8      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d16:	4b15      	ldr	r3, [pc, #84]	; (8005d6c <HAL_RCC_OscConfig+0x508>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0f0      	beq.n	8005d04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d108      	bne.n	8005d3c <HAL_RCC_OscConfig+0x4d8>
 8005d2a:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d30:	4a0d      	ldr	r2, [pc, #52]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d3a:	e029      	b.n	8005d90 <HAL_RCC_OscConfig+0x52c>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	2b05      	cmp	r3, #5
 8005d42:	d115      	bne.n	8005d70 <HAL_RCC_OscConfig+0x50c>
 8005d44:	4b08      	ldr	r3, [pc, #32]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d4a:	4a07      	ldr	r2, [pc, #28]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005d4c:	f043 0304 	orr.w	r3, r3, #4
 8005d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d54:	4b04      	ldr	r3, [pc, #16]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d5a:	4a03      	ldr	r2, [pc, #12]	; (8005d68 <HAL_RCC_OscConfig+0x504>)
 8005d5c:	f043 0301 	orr.w	r3, r3, #1
 8005d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d64:	e014      	b.n	8005d90 <HAL_RCC_OscConfig+0x52c>
 8005d66:	bf00      	nop
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	40007000 	.word	0x40007000
 8005d70:	4b9d      	ldr	r3, [pc, #628]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d76:	4a9c      	ldr	r2, [pc, #624]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005d78:	f023 0301 	bic.w	r3, r3, #1
 8005d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d80:	4b99      	ldr	r3, [pc, #612]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d86:	4a98      	ldr	r2, [pc, #608]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005d88:	f023 0304 	bic.w	r3, r3, #4
 8005d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d016      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d98:	f7fc ffe8 	bl	8002d6c <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d9e:	e00a      	b.n	8005db6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005da0:	f7fc ffe4 	bl	8002d6c <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e168      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005db6:	4b8c      	ldr	r3, [pc, #560]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d0ed      	beq.n	8005da0 <HAL_RCC_OscConfig+0x53c>
 8005dc4:	e015      	b.n	8005df2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc6:	f7fc ffd1 	bl	8002d6c <HAL_GetTick>
 8005dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005dcc:	e00a      	b.n	8005de4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dce:	f7fc ffcd 	bl	8002d6c <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e151      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005de4:	4b80      	ldr	r3, [pc, #512]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1ed      	bne.n	8005dce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005df2:	7ffb      	ldrb	r3, [r7, #31]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d105      	bne.n	8005e04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005df8:	4b7b      	ldr	r3, [pc, #492]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dfc:	4a7a      	ldr	r2, [pc, #488]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0320 	and.w	r3, r3, #32
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d03c      	beq.n	8005e8a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d01c      	beq.n	8005e52 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e18:	4b73      	ldr	r3, [pc, #460]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e1e:	4a72      	ldr	r2, [pc, #456]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005e20:	f043 0301 	orr.w	r3, r3, #1
 8005e24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e28:	f7fc ffa0 	bl	8002d6c <HAL_GetTick>
 8005e2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e30:	f7fc ff9c 	bl	8002d6c <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e122      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e42:	4b69      	ldr	r3, [pc, #420]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d0ef      	beq.n	8005e30 <HAL_RCC_OscConfig+0x5cc>
 8005e50:	e01b      	b.n	8005e8a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e52:	4b65      	ldr	r3, [pc, #404]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005e54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e58:	4a63      	ldr	r2, [pc, #396]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005e5a:	f023 0301 	bic.w	r3, r3, #1
 8005e5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e62:	f7fc ff83 	bl	8002d6c <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e68:	e008      	b.n	8005e7c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e6a:	f7fc ff7f 	bl	8002d6c <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e105      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e7c:	4b5a      	ldr	r3, [pc, #360]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1ef      	bne.n	8005e6a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f000 80f9 	beq.w	8006086 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	f040 80cf 	bne.w	800603c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005e9e:	4b52      	ldr	r3, [pc, #328]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f003 0203 	and.w	r2, r3, #3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d12c      	bne.n	8005f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d123      	bne.n	8005f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ece:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d11b      	bne.n	8005f0c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ede:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d113      	bne.n	8005f0c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eee:	085b      	lsrs	r3, r3, #1
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d109      	bne.n	8005f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	085b      	lsrs	r3, r3, #1
 8005f04:	3b01      	subs	r3, #1
 8005f06:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d071      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	2b0c      	cmp	r3, #12
 8005f10:	d068      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005f12:	4b35      	ldr	r3, [pc, #212]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d105      	bne.n	8005f2a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005f1e:	4b32      	ldr	r3, [pc, #200]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e0ac      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005f2e:	4b2e      	ldr	r3, [pc, #184]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a2d      	ldr	r2, [pc, #180]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005f34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f3a:	f7fc ff17 	bl	8002d6c <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f42:	f7fc ff13 	bl	8002d6c <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e099      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f54:	4b24      	ldr	r3, [pc, #144]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1f0      	bne.n	8005f42 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f60:	4b21      	ldr	r3, [pc, #132]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	4b21      	ldr	r3, [pc, #132]	; (8005fec <HAL_RCC_OscConfig+0x788>)
 8005f66:	4013      	ands	r3, r2
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f70:	3a01      	subs	r2, #1
 8005f72:	0112      	lsls	r2, r2, #4
 8005f74:	4311      	orrs	r1, r2
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f7a:	0212      	lsls	r2, r2, #8
 8005f7c:	4311      	orrs	r1, r2
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f82:	0852      	lsrs	r2, r2, #1
 8005f84:	3a01      	subs	r2, #1
 8005f86:	0552      	lsls	r2, r2, #21
 8005f88:	4311      	orrs	r1, r2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005f8e:	0852      	lsrs	r2, r2, #1
 8005f90:	3a01      	subs	r2, #1
 8005f92:	0652      	lsls	r2, r2, #25
 8005f94:	4311      	orrs	r1, r2
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f9a:	06d2      	lsls	r2, r2, #27
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	4912      	ldr	r1, [pc, #72]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005fa4:	4b10      	ldr	r3, [pc, #64]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a0f      	ldr	r2, [pc, #60]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005fb0:	4b0d      	ldr	r3, [pc, #52]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	4a0c      	ldr	r2, [pc, #48]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005fbc:	f7fc fed6 	bl	8002d6c <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fc4:	f7fc fed2 	bl	8002d6c <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e058      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fd6:	4b04      	ldr	r3, [pc, #16]	; (8005fe8 <HAL_RCC_OscConfig+0x784>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0f0      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fe2:	e050      	b.n	8006086 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e04f      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ff0:	4b27      	ldr	r3, [pc, #156]	; (8006090 <HAL_RCC_OscConfig+0x82c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d144      	bne.n	8006086 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ffc:	4b24      	ldr	r3, [pc, #144]	; (8006090 <HAL_RCC_OscConfig+0x82c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a23      	ldr	r2, [pc, #140]	; (8006090 <HAL_RCC_OscConfig+0x82c>)
 8006002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006006:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006008:	4b21      	ldr	r3, [pc, #132]	; (8006090 <HAL_RCC_OscConfig+0x82c>)
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	4a20      	ldr	r2, [pc, #128]	; (8006090 <HAL_RCC_OscConfig+0x82c>)
 800600e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006012:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006014:	f7fc feaa 	bl	8002d6c <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800601c:	f7fc fea6 	bl	8002d6c <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e02c      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800602e:	4b18      	ldr	r3, [pc, #96]	; (8006090 <HAL_RCC_OscConfig+0x82c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0f0      	beq.n	800601c <HAL_RCC_OscConfig+0x7b8>
 800603a:	e024      	b.n	8006086 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	2b0c      	cmp	r3, #12
 8006040:	d01f      	beq.n	8006082 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006042:	4b13      	ldr	r3, [pc, #76]	; (8006090 <HAL_RCC_OscConfig+0x82c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a12      	ldr	r2, [pc, #72]	; (8006090 <HAL_RCC_OscConfig+0x82c>)
 8006048:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800604c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800604e:	f7fc fe8d 	bl	8002d6c <HAL_GetTick>
 8006052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006054:	e008      	b.n	8006068 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006056:	f7fc fe89 	bl	8002d6c <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b02      	cmp	r3, #2
 8006062:	d901      	bls.n	8006068 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e00f      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006068:	4b09      	ldr	r3, [pc, #36]	; (8006090 <HAL_RCC_OscConfig+0x82c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1f0      	bne.n	8006056 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006074:	4b06      	ldr	r3, [pc, #24]	; (8006090 <HAL_RCC_OscConfig+0x82c>)
 8006076:	68da      	ldr	r2, [r3, #12]
 8006078:	4905      	ldr	r1, [pc, #20]	; (8006090 <HAL_RCC_OscConfig+0x82c>)
 800607a:	4b06      	ldr	r3, [pc, #24]	; (8006094 <HAL_RCC_OscConfig+0x830>)
 800607c:	4013      	ands	r3, r2
 800607e:	60cb      	str	r3, [r1, #12]
 8006080:	e001      	b.n	8006086 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e000      	b.n	8006088 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3720      	adds	r7, #32
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	40021000 	.word	0x40021000
 8006094:	feeefffc 	.word	0xfeeefffc

08006098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80060a2:	2300      	movs	r3, #0
 80060a4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e11d      	b.n	80062ec <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060b0:	4b90      	ldr	r3, [pc, #576]	; (80062f4 <HAL_RCC_ClockConfig+0x25c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 030f 	and.w	r3, r3, #15
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d910      	bls.n	80060e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060be:	4b8d      	ldr	r3, [pc, #564]	; (80062f4 <HAL_RCC_ClockConfig+0x25c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f023 020f 	bic.w	r2, r3, #15
 80060c6:	498b      	ldr	r1, [pc, #556]	; (80062f4 <HAL_RCC_ClockConfig+0x25c>)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ce:	4b89      	ldr	r3, [pc, #548]	; (80062f4 <HAL_RCC_ClockConfig+0x25c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 030f 	and.w	r3, r3, #15
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d001      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e105      	b.n	80062ec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d010      	beq.n	800610e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	4b81      	ldr	r3, [pc, #516]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d908      	bls.n	800610e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060fc:	4b7e      	ldr	r3, [pc, #504]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	497b      	ldr	r1, [pc, #492]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 800610a:	4313      	orrs	r3, r2
 800610c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d079      	beq.n	800620e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	2b03      	cmp	r3, #3
 8006120:	d11e      	bne.n	8006160 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006122:	4b75      	ldr	r3, [pc, #468]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e0dc      	b.n	80062ec <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006132:	f000 f9d1 	bl	80064d8 <RCC_GetSysClockFreqFromPLLSource>
 8006136:	4603      	mov	r3, r0
 8006138:	4a70      	ldr	r2, [pc, #448]	; (80062fc <HAL_RCC_ClockConfig+0x264>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d946      	bls.n	80061cc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800613e:	4b6e      	ldr	r3, [pc, #440]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d140      	bne.n	80061cc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800614a:	4b6b      	ldr	r3, [pc, #428]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006152:	4a69      	ldr	r2, [pc, #420]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 8006154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006158:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800615a:	2380      	movs	r3, #128	; 0x80
 800615c:	617b      	str	r3, [r7, #20]
 800615e:	e035      	b.n	80061cc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	2b02      	cmp	r3, #2
 8006166:	d107      	bne.n	8006178 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006168:	4b63      	ldr	r3, [pc, #396]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d115      	bne.n	80061a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e0b9      	b.n	80062ec <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d107      	bne.n	8006190 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006180:	4b5d      	ldr	r3, [pc, #372]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d109      	bne.n	80061a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e0ad      	b.n	80062ec <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006190:	4b59      	ldr	r3, [pc, #356]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e0a5      	b.n	80062ec <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80061a0:	f000 f8b4 	bl	800630c <HAL_RCC_GetSysClockFreq>
 80061a4:	4603      	mov	r3, r0
 80061a6:	4a55      	ldr	r2, [pc, #340]	; (80062fc <HAL_RCC_ClockConfig+0x264>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d90f      	bls.n	80061cc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80061ac:	4b52      	ldr	r3, [pc, #328]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d109      	bne.n	80061cc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80061b8:	4b4f      	ldr	r3, [pc, #316]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061c0:	4a4d      	ldr	r2, [pc, #308]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 80061c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80061c8:	2380      	movs	r3, #128	; 0x80
 80061ca:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061cc:	4b4a      	ldr	r3, [pc, #296]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f023 0203 	bic.w	r2, r3, #3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	4947      	ldr	r1, [pc, #284]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061de:	f7fc fdc5 	bl	8002d6c <HAL_GetTick>
 80061e2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061e4:	e00a      	b.n	80061fc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061e6:	f7fc fdc1 	bl	8002d6c <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d901      	bls.n	80061fc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e077      	b.n	80062ec <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061fc:	4b3e      	ldr	r3, [pc, #248]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f003 020c 	and.w	r2, r3, #12
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	429a      	cmp	r2, r3
 800620c:	d1eb      	bne.n	80061e6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2b80      	cmp	r3, #128	; 0x80
 8006212:	d105      	bne.n	8006220 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006214:	4b38      	ldr	r3, [pc, #224]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	4a37      	ldr	r2, [pc, #220]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 800621a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800621e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d010      	beq.n	800624e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	4b31      	ldr	r3, [pc, #196]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006238:	429a      	cmp	r2, r3
 800623a:	d208      	bcs.n	800624e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800623c:	4b2e      	ldr	r3, [pc, #184]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	492b      	ldr	r1, [pc, #172]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 800624a:	4313      	orrs	r3, r2
 800624c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800624e:	4b29      	ldr	r3, [pc, #164]	; (80062f4 <HAL_RCC_ClockConfig+0x25c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d210      	bcs.n	800627e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800625c:	4b25      	ldr	r3, [pc, #148]	; (80062f4 <HAL_RCC_ClockConfig+0x25c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f023 020f 	bic.w	r2, r3, #15
 8006264:	4923      	ldr	r1, [pc, #140]	; (80062f4 <HAL_RCC_ClockConfig+0x25c>)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	4313      	orrs	r3, r2
 800626a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800626c:	4b21      	ldr	r3, [pc, #132]	; (80062f4 <HAL_RCC_ClockConfig+0x25c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d001      	beq.n	800627e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e036      	b.n	80062ec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0304 	and.w	r3, r3, #4
 8006286:	2b00      	cmp	r3, #0
 8006288:	d008      	beq.n	800629c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800628a:	4b1b      	ldr	r3, [pc, #108]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	4918      	ldr	r1, [pc, #96]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 8006298:	4313      	orrs	r3, r2
 800629a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0308 	and.w	r3, r3, #8
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d009      	beq.n	80062bc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062a8:	4b13      	ldr	r3, [pc, #76]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	4910      	ldr	r1, [pc, #64]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062bc:	f000 f826 	bl	800630c <HAL_RCC_GetSysClockFreq>
 80062c0:	4602      	mov	r2, r0
 80062c2:	4b0d      	ldr	r3, [pc, #52]	; (80062f8 <HAL_RCC_ClockConfig+0x260>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	091b      	lsrs	r3, r3, #4
 80062c8:	f003 030f 	and.w	r3, r3, #15
 80062cc:	490c      	ldr	r1, [pc, #48]	; (8006300 <HAL_RCC_ClockConfig+0x268>)
 80062ce:	5ccb      	ldrb	r3, [r1, r3]
 80062d0:	f003 031f 	and.w	r3, r3, #31
 80062d4:	fa22 f303 	lsr.w	r3, r2, r3
 80062d8:	4a0a      	ldr	r2, [pc, #40]	; (8006304 <HAL_RCC_ClockConfig+0x26c>)
 80062da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80062dc:	4b0a      	ldr	r3, [pc, #40]	; (8006308 <HAL_RCC_ClockConfig+0x270>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fc fcf3 	bl	8002ccc <HAL_InitTick>
 80062e6:	4603      	mov	r3, r0
 80062e8:	73fb      	strb	r3, [r7, #15]

  return status;
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	40022000 	.word	0x40022000
 80062f8:	40021000 	.word	0x40021000
 80062fc:	04c4b400 	.word	0x04c4b400
 8006300:	080c8368 	.word	0x080c8368
 8006304:	20000004 	.word	0x20000004
 8006308:	20000008 	.word	0x20000008

0800630c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800630c:	b480      	push	{r7}
 800630e:	b089      	sub	sp, #36	; 0x24
 8006310:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	61fb      	str	r3, [r7, #28]
 8006316:	2300      	movs	r3, #0
 8006318:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800631a:	4b3e      	ldr	r3, [pc, #248]	; (8006414 <HAL_RCC_GetSysClockFreq+0x108>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f003 030c 	and.w	r3, r3, #12
 8006322:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006324:	4b3b      	ldr	r3, [pc, #236]	; (8006414 <HAL_RCC_GetSysClockFreq+0x108>)
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f003 0303 	and.w	r3, r3, #3
 800632c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d005      	beq.n	8006340 <HAL_RCC_GetSysClockFreq+0x34>
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	2b0c      	cmp	r3, #12
 8006338:	d121      	bne.n	800637e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d11e      	bne.n	800637e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006340:	4b34      	ldr	r3, [pc, #208]	; (8006414 <HAL_RCC_GetSysClockFreq+0x108>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0308 	and.w	r3, r3, #8
 8006348:	2b00      	cmp	r3, #0
 800634a:	d107      	bne.n	800635c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800634c:	4b31      	ldr	r3, [pc, #196]	; (8006414 <HAL_RCC_GetSysClockFreq+0x108>)
 800634e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006352:	0a1b      	lsrs	r3, r3, #8
 8006354:	f003 030f 	and.w	r3, r3, #15
 8006358:	61fb      	str	r3, [r7, #28]
 800635a:	e005      	b.n	8006368 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800635c:	4b2d      	ldr	r3, [pc, #180]	; (8006414 <HAL_RCC_GetSysClockFreq+0x108>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	091b      	lsrs	r3, r3, #4
 8006362:	f003 030f 	and.w	r3, r3, #15
 8006366:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006368:	4a2b      	ldr	r2, [pc, #172]	; (8006418 <HAL_RCC_GetSysClockFreq+0x10c>)
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006370:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10d      	bne.n	8006394 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800637c:	e00a      	b.n	8006394 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	2b04      	cmp	r3, #4
 8006382:	d102      	bne.n	800638a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006384:	4b25      	ldr	r3, [pc, #148]	; (800641c <HAL_RCC_GetSysClockFreq+0x110>)
 8006386:	61bb      	str	r3, [r7, #24]
 8006388:	e004      	b.n	8006394 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	2b08      	cmp	r3, #8
 800638e:	d101      	bne.n	8006394 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006390:	4b23      	ldr	r3, [pc, #140]	; (8006420 <HAL_RCC_GetSysClockFreq+0x114>)
 8006392:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	2b0c      	cmp	r3, #12
 8006398:	d134      	bne.n	8006404 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800639a:	4b1e      	ldr	r3, [pc, #120]	; (8006414 <HAL_RCC_GetSysClockFreq+0x108>)
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f003 0303 	and.w	r3, r3, #3
 80063a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d003      	beq.n	80063b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	d003      	beq.n	80063b8 <HAL_RCC_GetSysClockFreq+0xac>
 80063b0:	e005      	b.n	80063be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80063b2:	4b1a      	ldr	r3, [pc, #104]	; (800641c <HAL_RCC_GetSysClockFreq+0x110>)
 80063b4:	617b      	str	r3, [r7, #20]
      break;
 80063b6:	e005      	b.n	80063c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80063b8:	4b19      	ldr	r3, [pc, #100]	; (8006420 <HAL_RCC_GetSysClockFreq+0x114>)
 80063ba:	617b      	str	r3, [r7, #20]
      break;
 80063bc:	e002      	b.n	80063c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	617b      	str	r3, [r7, #20]
      break;
 80063c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063c4:	4b13      	ldr	r3, [pc, #76]	; (8006414 <HAL_RCC_GetSysClockFreq+0x108>)
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	091b      	lsrs	r3, r3, #4
 80063ca:	f003 030f 	and.w	r3, r3, #15
 80063ce:	3301      	adds	r3, #1
 80063d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80063d2:	4b10      	ldr	r3, [pc, #64]	; (8006414 <HAL_RCC_GetSysClockFreq+0x108>)
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	0a1b      	lsrs	r3, r3, #8
 80063d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	fb03 f202 	mul.w	r2, r3, r2
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063ea:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <HAL_RCC_GetSysClockFreq+0x108>)
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	0e5b      	lsrs	r3, r3, #25
 80063f0:	f003 0303 	and.w	r3, r3, #3
 80063f4:	3301      	adds	r3, #1
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006402:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006404:	69bb      	ldr	r3, [r7, #24]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3724      	adds	r7, #36	; 0x24
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	40021000 	.word	0x40021000
 8006418:	080c8378 	.word	0x080c8378
 800641c:	00f42400 	.word	0x00f42400
 8006420:	007a1200 	.word	0x007a1200

08006424 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800642c:	2300      	movs	r3, #0
 800642e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006430:	4b27      	ldr	r3, [pc, #156]	; (80064d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800643c:	f7ff f94e 	bl	80056dc <HAL_PWREx_GetVoltageRange>
 8006440:	6178      	str	r0, [r7, #20]
 8006442:	e014      	b.n	800646e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006444:	4b22      	ldr	r3, [pc, #136]	; (80064d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006448:	4a21      	ldr	r2, [pc, #132]	; (80064d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800644a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800644e:	6593      	str	r3, [r2, #88]	; 0x58
 8006450:	4b1f      	ldr	r3, [pc, #124]	; (80064d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800645c:	f7ff f93e 	bl	80056dc <HAL_PWREx_GetVoltageRange>
 8006460:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006462:	4b1b      	ldr	r3, [pc, #108]	; (80064d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006466:	4a1a      	ldr	r2, [pc, #104]	; (80064d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800646c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006474:	d10b      	bne.n	800648e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b80      	cmp	r3, #128	; 0x80
 800647a:	d913      	bls.n	80064a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2ba0      	cmp	r3, #160	; 0xa0
 8006480:	d902      	bls.n	8006488 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006482:	2302      	movs	r3, #2
 8006484:	613b      	str	r3, [r7, #16]
 8006486:	e00d      	b.n	80064a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006488:	2301      	movs	r3, #1
 800648a:	613b      	str	r3, [r7, #16]
 800648c:	e00a      	b.n	80064a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b7f      	cmp	r3, #127	; 0x7f
 8006492:	d902      	bls.n	800649a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006494:	2302      	movs	r3, #2
 8006496:	613b      	str	r3, [r7, #16]
 8006498:	e004      	b.n	80064a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b70      	cmp	r3, #112	; 0x70
 800649e:	d101      	bne.n	80064a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80064a0:	2301      	movs	r3, #1
 80064a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80064a4:	4b0b      	ldr	r3, [pc, #44]	; (80064d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f023 020f 	bic.w	r2, r3, #15
 80064ac:	4909      	ldr	r1, [pc, #36]	; (80064d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80064b4:	4b07      	ldr	r3, [pc, #28]	; (80064d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 030f 	and.w	r3, r3, #15
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d001      	beq.n	80064c6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e000      	b.n	80064c8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	40021000 	.word	0x40021000
 80064d4:	40022000 	.word	0x40022000

080064d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80064d8:	b480      	push	{r7}
 80064da:	b087      	sub	sp, #28
 80064dc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064de:	4b2d      	ldr	r3, [pc, #180]	; (8006594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	d00b      	beq.n	8006506 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b03      	cmp	r3, #3
 80064f2:	d825      	bhi.n	8006540 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d008      	beq.n	800650c <RCC_GetSysClockFreqFromPLLSource+0x34>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d11f      	bne.n	8006540 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006500:	4b25      	ldr	r3, [pc, #148]	; (8006598 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006502:	613b      	str	r3, [r7, #16]
    break;
 8006504:	e01f      	b.n	8006546 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006506:	4b25      	ldr	r3, [pc, #148]	; (800659c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006508:	613b      	str	r3, [r7, #16]
    break;
 800650a:	e01c      	b.n	8006546 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800650c:	4b21      	ldr	r3, [pc, #132]	; (8006594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0308 	and.w	r3, r3, #8
 8006514:	2b00      	cmp	r3, #0
 8006516:	d107      	bne.n	8006528 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006518:	4b1e      	ldr	r3, [pc, #120]	; (8006594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800651a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800651e:	0a1b      	lsrs	r3, r3, #8
 8006520:	f003 030f 	and.w	r3, r3, #15
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	e005      	b.n	8006534 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006528:	4b1a      	ldr	r3, [pc, #104]	; (8006594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	091b      	lsrs	r3, r3, #4
 800652e:	f003 030f 	and.w	r3, r3, #15
 8006532:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006534:	4a1a      	ldr	r2, [pc, #104]	; (80065a0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800653c:	613b      	str	r3, [r7, #16]
    break;
 800653e:	e002      	b.n	8006546 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006540:	2300      	movs	r3, #0
 8006542:	613b      	str	r3, [r7, #16]
    break;
 8006544:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006546:	4b13      	ldr	r3, [pc, #76]	; (8006594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	091b      	lsrs	r3, r3, #4
 800654c:	f003 030f 	and.w	r3, r3, #15
 8006550:	3301      	adds	r3, #1
 8006552:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006554:	4b0f      	ldr	r3, [pc, #60]	; (8006594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	0a1b      	lsrs	r3, r3, #8
 800655a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	fb03 f202 	mul.w	r2, r3, r2
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	fbb2 f3f3 	udiv	r3, r2, r3
 800656a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800656c:	4b09      	ldr	r3, [pc, #36]	; (8006594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	0e5b      	lsrs	r3, r3, #25
 8006572:	f003 0303 	and.w	r3, r3, #3
 8006576:	3301      	adds	r3, #1
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	fbb2 f3f3 	udiv	r3, r2, r3
 8006584:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006586:	683b      	ldr	r3, [r7, #0]
}
 8006588:	4618      	mov	r0, r3
 800658a:	371c      	adds	r7, #28
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	40021000 	.word	0x40021000
 8006598:	00f42400 	.word	0x00f42400
 800659c:	007a1200 	.word	0x007a1200
 80065a0:	080c8378 	.word	0x080c8378

080065a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065ac:	2300      	movs	r3, #0
 80065ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065b0:	2300      	movs	r3, #0
 80065b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d040      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065c4:	2b80      	cmp	r3, #128	; 0x80
 80065c6:	d02a      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80065c8:	2b80      	cmp	r3, #128	; 0x80
 80065ca:	d825      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80065cc:	2b60      	cmp	r3, #96	; 0x60
 80065ce:	d026      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80065d0:	2b60      	cmp	r3, #96	; 0x60
 80065d2:	d821      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80065d4:	2b40      	cmp	r3, #64	; 0x40
 80065d6:	d006      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80065d8:	2b40      	cmp	r3, #64	; 0x40
 80065da:	d81d      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d009      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80065e0:	2b20      	cmp	r3, #32
 80065e2:	d010      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80065e4:	e018      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80065e6:	4b89      	ldr	r3, [pc, #548]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	4a88      	ldr	r2, [pc, #544]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065f0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065f2:	e015      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3304      	adds	r3, #4
 80065f8:	2100      	movs	r1, #0
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 fb02 	bl	8006c04 <RCCEx_PLLSAI1_Config>
 8006600:	4603      	mov	r3, r0
 8006602:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006604:	e00c      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3320      	adds	r3, #32
 800660a:	2100      	movs	r1, #0
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fbed 	bl	8006dec <RCCEx_PLLSAI2_Config>
 8006612:	4603      	mov	r3, r0
 8006614:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006616:	e003      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	74fb      	strb	r3, [r7, #19]
      break;
 800661c:	e000      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800661e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006620:	7cfb      	ldrb	r3, [r7, #19]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10b      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006626:	4b79      	ldr	r3, [pc, #484]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006628:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800662c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006634:	4975      	ldr	r1, [pc, #468]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006636:	4313      	orrs	r3, r2
 8006638:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800663c:	e001      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663e:	7cfb      	ldrb	r3, [r7, #19]
 8006640:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d047      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006656:	d030      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800665c:	d82a      	bhi.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800665e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006662:	d02a      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006664:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006668:	d824      	bhi.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800666a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800666e:	d008      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006674:	d81e      	bhi.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800667a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800667e:	d010      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006680:	e018      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006682:	4b62      	ldr	r3, [pc, #392]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	4a61      	ldr	r2, [pc, #388]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800668c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800668e:	e015      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	3304      	adds	r3, #4
 8006694:	2100      	movs	r1, #0
 8006696:	4618      	mov	r0, r3
 8006698:	f000 fab4 	bl	8006c04 <RCCEx_PLLSAI1_Config>
 800669c:	4603      	mov	r3, r0
 800669e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80066a0:	e00c      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	3320      	adds	r3, #32
 80066a6:	2100      	movs	r1, #0
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 fb9f 	bl	8006dec <RCCEx_PLLSAI2_Config>
 80066ae:	4603      	mov	r3, r0
 80066b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80066b2:	e003      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	74fb      	strb	r3, [r7, #19]
      break;
 80066b8:	e000      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80066ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066bc:	7cfb      	ldrb	r3, [r7, #19]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10b      	bne.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80066c2:	4b52      	ldr	r3, [pc, #328]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d0:	494e      	ldr	r1, [pc, #312]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80066d8:	e001      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066da:	7cfb      	ldrb	r3, [r7, #19]
 80066dc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 809f 	beq.w	800682a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066ec:	2300      	movs	r3, #0
 80066ee:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80066f0:	4b46      	ldr	r3, [pc, #280]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80066fc:	2301      	movs	r3, #1
 80066fe:	e000      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006700:	2300      	movs	r3, #0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00d      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006706:	4b41      	ldr	r3, [pc, #260]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670a:	4a40      	ldr	r2, [pc, #256]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800670c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006710:	6593      	str	r3, [r2, #88]	; 0x58
 8006712:	4b3e      	ldr	r3, [pc, #248]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800671a:	60bb      	str	r3, [r7, #8]
 800671c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800671e:	2301      	movs	r3, #1
 8006720:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006722:	4b3b      	ldr	r3, [pc, #236]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a3a      	ldr	r2, [pc, #232]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800672c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800672e:	f7fc fb1d 	bl	8002d6c <HAL_GetTick>
 8006732:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006734:	e009      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006736:	f7fc fb19 	bl	8002d6c <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d902      	bls.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	74fb      	strb	r3, [r7, #19]
        break;
 8006748:	e005      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800674a:	4b31      	ldr	r3, [pc, #196]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0ef      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006756:	7cfb      	ldrb	r3, [r7, #19]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d15b      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800675c:	4b2b      	ldr	r3, [pc, #172]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800675e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006766:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d01f      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	429a      	cmp	r2, r3
 8006778:	d019      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800677a:	4b24      	ldr	r3, [pc, #144]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800677c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006784:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006786:	4b21      	ldr	r3, [pc, #132]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800678c:	4a1f      	ldr	r2, [pc, #124]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800678e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006796:	4b1d      	ldr	r3, [pc, #116]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679c:	4a1b      	ldr	r2, [pc, #108]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800679e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80067a6:	4a19      	ldr	r2, [pc, #100]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d016      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b8:	f7fc fad8 	bl	8002d6c <HAL_GetTick>
 80067bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067be:	e00b      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067c0:	f7fc fad4 	bl	8002d6c <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d902      	bls.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	74fb      	strb	r3, [r7, #19]
            break;
 80067d6:	e006      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067d8:	4b0c      	ldr	r3, [pc, #48]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0ec      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80067e6:	7cfb      	ldrb	r3, [r7, #19]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10c      	bne.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067ec:	4b07      	ldr	r3, [pc, #28]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067fc:	4903      	ldr	r1, [pc, #12]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006804:	e008      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006806:	7cfb      	ldrb	r3, [r7, #19]
 8006808:	74bb      	strb	r3, [r7, #18]
 800680a:	e005      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800680c:	40021000 	.word	0x40021000
 8006810:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006814:	7cfb      	ldrb	r3, [r7, #19]
 8006816:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006818:	7c7b      	ldrb	r3, [r7, #17]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d105      	bne.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800681e:	4ba0      	ldr	r3, [pc, #640]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006822:	4a9f      	ldr	r2, [pc, #636]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006828:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006836:	4b9a      	ldr	r3, [pc, #616]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683c:	f023 0203 	bic.w	r2, r3, #3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006844:	4996      	ldr	r1, [pc, #600]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006846:	4313      	orrs	r3, r2
 8006848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00a      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006858:	4b91      	ldr	r3, [pc, #580]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800685a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800685e:	f023 020c 	bic.w	r2, r3, #12
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	498e      	ldr	r1, [pc, #568]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006868:	4313      	orrs	r3, r2
 800686a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0304 	and.w	r3, r3, #4
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800687a:	4b89      	ldr	r3, [pc, #548]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800687c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006880:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006888:	4985      	ldr	r1, [pc, #532]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800688a:	4313      	orrs	r3, r2
 800688c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00a      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800689c:	4b80      	ldr	r3, [pc, #512]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800689e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068aa:	497d      	ldr	r1, [pc, #500]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0310 	and.w	r3, r3, #16
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80068be:	4b78      	ldr	r3, [pc, #480]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068cc:	4974      	ldr	r1, [pc, #464]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0320 	and.w	r3, r3, #32
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00a      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068e0:	4b6f      	ldr	r3, [pc, #444]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ee:	496c      	ldr	r1, [pc, #432]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006902:	4b67      	ldr	r3, [pc, #412]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006908:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006910:	4963      	ldr	r1, [pc, #396]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006912:	4313      	orrs	r3, r2
 8006914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00a      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006924:	4b5e      	ldr	r3, [pc, #376]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800692a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006932:	495b      	ldr	r1, [pc, #364]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006934:	4313      	orrs	r3, r2
 8006936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006946:	4b56      	ldr	r3, [pc, #344]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800694c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006954:	4952      	ldr	r1, [pc, #328]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006956:	4313      	orrs	r3, r2
 8006958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00a      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006968:	4b4d      	ldr	r3, [pc, #308]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800696a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006976:	494a      	ldr	r1, [pc, #296]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006978:	4313      	orrs	r3, r2
 800697a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800698a:	4b45      	ldr	r3, [pc, #276]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800698c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006998:	4941      	ldr	r1, [pc, #260]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800699a:	4313      	orrs	r3, r2
 800699c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069ac:	4b3c      	ldr	r3, [pc, #240]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069b2:	f023 0203 	bic.w	r2, r3, #3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ba:	4939      	ldr	r1, [pc, #228]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d028      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069ce:	4b34      	ldr	r3, [pc, #208]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069dc:	4930      	ldr	r1, [pc, #192]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069ec:	d106      	bne.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069ee:	4b2c      	ldr	r3, [pc, #176]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	4a2b      	ldr	r2, [pc, #172]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069f8:	60d3      	str	r3, [r2, #12]
 80069fa:	e011      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a04:	d10c      	bne.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	3304      	adds	r3, #4
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 f8f9 	bl	8006c04 <RCCEx_PLLSAI1_Config>
 8006a12:	4603      	mov	r3, r0
 8006a14:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006a16:	7cfb      	ldrb	r3, [r7, #19]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006a1c:	7cfb      	ldrb	r3, [r7, #19]
 8006a1e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d04d      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a34:	d108      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006a36:	4b1a      	ldr	r3, [pc, #104]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a3c:	4a18      	ldr	r2, [pc, #96]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a42:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006a46:	e012      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006a48:	4b15      	ldr	r3, [pc, #84]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a4e:	4a14      	ldr	r2, [pc, #80]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a54:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006a58:	4b11      	ldr	r3, [pc, #68]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a66:	490e      	ldr	r1, [pc, #56]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a76:	d106      	bne.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a78:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	4a08      	ldr	r2, [pc, #32]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a82:	60d3      	str	r3, [r2, #12]
 8006a84:	e020      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a8e:	d109      	bne.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a90:	4b03      	ldr	r3, [pc, #12]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	4a02      	ldr	r2, [pc, #8]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a9a:	60d3      	str	r3, [r2, #12]
 8006a9c:	e014      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006a9e:	bf00      	nop
 8006aa0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006aa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006aac:	d10c      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 f8a5 	bl	8006c04 <RCCEx_PLLSAI1_Config>
 8006aba:	4603      	mov	r3, r0
 8006abc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006abe:	7cfb      	ldrb	r3, [r7, #19]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006ac4:	7cfb      	ldrb	r3, [r7, #19]
 8006ac6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d028      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ad4:	4b4a      	ldr	r3, [pc, #296]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ada:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ae2:	4947      	ldr	r1, [pc, #284]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006aee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006af2:	d106      	bne.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006af4:	4b42      	ldr	r3, [pc, #264]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	4a41      	ldr	r2, [pc, #260]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006afa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006afe:	60d3      	str	r3, [r2, #12]
 8006b00:	e011      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b0a:	d10c      	bne.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	3304      	adds	r3, #4
 8006b10:	2101      	movs	r1, #1
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 f876 	bl	8006c04 <RCCEx_PLLSAI1_Config>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b1c:	7cfb      	ldrb	r3, [r7, #19]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006b22:	7cfb      	ldrb	r3, [r7, #19]
 8006b24:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d01e      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b32:	4b33      	ldr	r3, [pc, #204]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b42:	492f      	ldr	r1, [pc, #188]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b54:	d10c      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	3304      	adds	r3, #4
 8006b5a:	2102      	movs	r1, #2
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 f851 	bl	8006c04 <RCCEx_PLLSAI1_Config>
 8006b62:	4603      	mov	r3, r0
 8006b64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b66:	7cfb      	ldrb	r3, [r7, #19]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006b6c:	7cfb      	ldrb	r3, [r7, #19]
 8006b6e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00b      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b7c:	4b20      	ldr	r3, [pc, #128]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b82:	f023 0204 	bic.w	r2, r3, #4
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b8c:	491c      	ldr	r1, [pc, #112]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00b      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006ba0:	4b17      	ldr	r3, [pc, #92]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ba6:	f023 0218 	bic.w	r2, r3, #24
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb0:	4913      	ldr	r1, [pc, #76]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d017      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006bc4:	4b0e      	ldr	r3, [pc, #56]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bd4:	490a      	ldr	r1, [pc, #40]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006be2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006be6:	d105      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006be8:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	4a04      	ldr	r2, [pc, #16]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bf2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006bf4:	7cbb      	ldrb	r3, [r7, #18]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	40021000 	.word	0x40021000

08006c04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c12:	4b72      	ldr	r3, [pc, #456]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	f003 0303 	and.w	r3, r3, #3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00e      	beq.n	8006c3c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006c1e:	4b6f      	ldr	r3, [pc, #444]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f003 0203 	and.w	r2, r3, #3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d103      	bne.n	8006c36 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
       ||
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d142      	bne.n	8006cbc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	73fb      	strb	r3, [r7, #15]
 8006c3a:	e03f      	b.n	8006cbc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d018      	beq.n	8006c76 <RCCEx_PLLSAI1_Config+0x72>
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d825      	bhi.n	8006c94 <RCCEx_PLLSAI1_Config+0x90>
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d002      	beq.n	8006c52 <RCCEx_PLLSAI1_Config+0x4e>
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d009      	beq.n	8006c64 <RCCEx_PLLSAI1_Config+0x60>
 8006c50:	e020      	b.n	8006c94 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006c52:	4b62      	ldr	r3, [pc, #392]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d11d      	bne.n	8006c9a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c62:	e01a      	b.n	8006c9a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006c64:	4b5d      	ldr	r3, [pc, #372]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d116      	bne.n	8006c9e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c74:	e013      	b.n	8006c9e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c76:	4b59      	ldr	r3, [pc, #356]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10f      	bne.n	8006ca2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c82:	4b56      	ldr	r3, [pc, #344]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d109      	bne.n	8006ca2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c92:	e006      	b.n	8006ca2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	73fb      	strb	r3, [r7, #15]
      break;
 8006c98:	e004      	b.n	8006ca4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006c9a:	bf00      	nop
 8006c9c:	e002      	b.n	8006ca4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006c9e:	bf00      	nop
 8006ca0:	e000      	b.n	8006ca4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006ca2:	bf00      	nop
    }

    if(status == HAL_OK)
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d108      	bne.n	8006cbc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006caa:	4b4c      	ldr	r3, [pc, #304]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	f023 0203 	bic.w	r2, r3, #3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4949      	ldr	r1, [pc, #292]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f040 8086 	bne.w	8006dd0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006cc4:	4b45      	ldr	r3, [pc, #276]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a44      	ldr	r2, [pc, #272]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cd0:	f7fc f84c 	bl	8002d6c <HAL_GetTick>
 8006cd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006cd6:	e009      	b.n	8006cec <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006cd8:	f7fc f848 	bl	8002d6c <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d902      	bls.n	8006cec <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	73fb      	strb	r3, [r7, #15]
        break;
 8006cea:	e005      	b.n	8006cf8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006cec:	4b3b      	ldr	r3, [pc, #236]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1ef      	bne.n	8006cd8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d168      	bne.n	8006dd0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d113      	bne.n	8006d2c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d04:	4b35      	ldr	r3, [pc, #212]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d06:	691a      	ldr	r2, [r3, #16]
 8006d08:	4b35      	ldr	r3, [pc, #212]	; (8006de0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	6892      	ldr	r2, [r2, #8]
 8006d10:	0211      	lsls	r1, r2, #8
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	68d2      	ldr	r2, [r2, #12]
 8006d16:	06d2      	lsls	r2, r2, #27
 8006d18:	4311      	orrs	r1, r2
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	6852      	ldr	r2, [r2, #4]
 8006d1e:	3a01      	subs	r2, #1
 8006d20:	0112      	lsls	r2, r2, #4
 8006d22:	430a      	orrs	r2, r1
 8006d24:	492d      	ldr	r1, [pc, #180]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	610b      	str	r3, [r1, #16]
 8006d2a:	e02d      	b.n	8006d88 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d115      	bne.n	8006d5e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d32:	4b2a      	ldr	r3, [pc, #168]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d34:	691a      	ldr	r2, [r3, #16]
 8006d36:	4b2b      	ldr	r3, [pc, #172]	; (8006de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d38:	4013      	ands	r3, r2
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	6892      	ldr	r2, [r2, #8]
 8006d3e:	0211      	lsls	r1, r2, #8
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	6912      	ldr	r2, [r2, #16]
 8006d44:	0852      	lsrs	r2, r2, #1
 8006d46:	3a01      	subs	r2, #1
 8006d48:	0552      	lsls	r2, r2, #21
 8006d4a:	4311      	orrs	r1, r2
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	6852      	ldr	r2, [r2, #4]
 8006d50:	3a01      	subs	r2, #1
 8006d52:	0112      	lsls	r2, r2, #4
 8006d54:	430a      	orrs	r2, r1
 8006d56:	4921      	ldr	r1, [pc, #132]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	610b      	str	r3, [r1, #16]
 8006d5c:	e014      	b.n	8006d88 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d5e:	4b1f      	ldr	r3, [pc, #124]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d60:	691a      	ldr	r2, [r3, #16]
 8006d62:	4b21      	ldr	r3, [pc, #132]	; (8006de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d64:	4013      	ands	r3, r2
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6892      	ldr	r2, [r2, #8]
 8006d6a:	0211      	lsls	r1, r2, #8
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	6952      	ldr	r2, [r2, #20]
 8006d70:	0852      	lsrs	r2, r2, #1
 8006d72:	3a01      	subs	r2, #1
 8006d74:	0652      	lsls	r2, r2, #25
 8006d76:	4311      	orrs	r1, r2
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	6852      	ldr	r2, [r2, #4]
 8006d7c:	3a01      	subs	r2, #1
 8006d7e:	0112      	lsls	r2, r2, #4
 8006d80:	430a      	orrs	r2, r1
 8006d82:	4916      	ldr	r1, [pc, #88]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006d88:	4b14      	ldr	r3, [pc, #80]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a13      	ldr	r2, [pc, #76]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d94:	f7fb ffea 	bl	8002d6c <HAL_GetTick>
 8006d98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d9a:	e009      	b.n	8006db0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d9c:	f7fb ffe6 	bl	8002d6c <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d902      	bls.n	8006db0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	73fb      	strb	r3, [r7, #15]
          break;
 8006dae:	e005      	b.n	8006dbc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006db0:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0ef      	beq.n	8006d9c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d106      	bne.n	8006dd0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006dc2:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dc4:	691a      	ldr	r2, [r3, #16]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	4904      	ldr	r1, [pc, #16]	; (8006ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	40021000 	.word	0x40021000
 8006de0:	07ff800f 	.word	0x07ff800f
 8006de4:	ff9f800f 	.word	0xff9f800f
 8006de8:	f9ff800f 	.word	0xf9ff800f

08006dec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006dfa:	4b72      	ldr	r3, [pc, #456]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00e      	beq.n	8006e24 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006e06:	4b6f      	ldr	r3, [pc, #444]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f003 0203 	and.w	r2, r3, #3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d103      	bne.n	8006e1e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
       ||
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d142      	bne.n	8006ea4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	73fb      	strb	r3, [r7, #15]
 8006e22:	e03f      	b.n	8006ea4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b03      	cmp	r3, #3
 8006e2a:	d018      	beq.n	8006e5e <RCCEx_PLLSAI2_Config+0x72>
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d825      	bhi.n	8006e7c <RCCEx_PLLSAI2_Config+0x90>
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d002      	beq.n	8006e3a <RCCEx_PLLSAI2_Config+0x4e>
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d009      	beq.n	8006e4c <RCCEx_PLLSAI2_Config+0x60>
 8006e38:	e020      	b.n	8006e7c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006e3a:	4b62      	ldr	r3, [pc, #392]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d11d      	bne.n	8006e82 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e4a:	e01a      	b.n	8006e82 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006e4c:	4b5d      	ldr	r3, [pc, #372]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d116      	bne.n	8006e86 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e5c:	e013      	b.n	8006e86 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006e5e:	4b59      	ldr	r3, [pc, #356]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10f      	bne.n	8006e8a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006e6a:	4b56      	ldr	r3, [pc, #344]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d109      	bne.n	8006e8a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e7a:	e006      	b.n	8006e8a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e80:	e004      	b.n	8006e8c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006e82:	bf00      	nop
 8006e84:	e002      	b.n	8006e8c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006e86:	bf00      	nop
 8006e88:	e000      	b.n	8006e8c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006e8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d108      	bne.n	8006ea4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006e92:	4b4c      	ldr	r3, [pc, #304]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	f023 0203 	bic.w	r2, r3, #3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4949      	ldr	r1, [pc, #292]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f040 8086 	bne.w	8006fb8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006eac:	4b45      	ldr	r3, [pc, #276]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a44      	ldr	r2, [pc, #272]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eb8:	f7fb ff58 	bl	8002d6c <HAL_GetTick>
 8006ebc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006ebe:	e009      	b.n	8006ed4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ec0:	f7fb ff54 	bl	8002d6c <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d902      	bls.n	8006ed4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	73fb      	strb	r3, [r7, #15]
        break;
 8006ed2:	e005      	b.n	8006ee0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006ed4:	4b3b      	ldr	r3, [pc, #236]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1ef      	bne.n	8006ec0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d168      	bne.n	8006fb8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d113      	bne.n	8006f14 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006eec:	4b35      	ldr	r3, [pc, #212]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006eee:	695a      	ldr	r2, [r3, #20]
 8006ef0:	4b35      	ldr	r3, [pc, #212]	; (8006fc8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6892      	ldr	r2, [r2, #8]
 8006ef8:	0211      	lsls	r1, r2, #8
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	68d2      	ldr	r2, [r2, #12]
 8006efe:	06d2      	lsls	r2, r2, #27
 8006f00:	4311      	orrs	r1, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6852      	ldr	r2, [r2, #4]
 8006f06:	3a01      	subs	r2, #1
 8006f08:	0112      	lsls	r2, r2, #4
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	492d      	ldr	r1, [pc, #180]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	614b      	str	r3, [r1, #20]
 8006f12:	e02d      	b.n	8006f70 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d115      	bne.n	8006f46 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f1a:	4b2a      	ldr	r3, [pc, #168]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f1c:	695a      	ldr	r2, [r3, #20]
 8006f1e:	4b2b      	ldr	r3, [pc, #172]	; (8006fcc <RCCEx_PLLSAI2_Config+0x1e0>)
 8006f20:	4013      	ands	r3, r2
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	6892      	ldr	r2, [r2, #8]
 8006f26:	0211      	lsls	r1, r2, #8
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6912      	ldr	r2, [r2, #16]
 8006f2c:	0852      	lsrs	r2, r2, #1
 8006f2e:	3a01      	subs	r2, #1
 8006f30:	0552      	lsls	r2, r2, #21
 8006f32:	4311      	orrs	r1, r2
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	6852      	ldr	r2, [r2, #4]
 8006f38:	3a01      	subs	r2, #1
 8006f3a:	0112      	lsls	r2, r2, #4
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	4921      	ldr	r1, [pc, #132]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	614b      	str	r3, [r1, #20]
 8006f44:	e014      	b.n	8006f70 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f46:	4b1f      	ldr	r3, [pc, #124]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f48:	695a      	ldr	r2, [r3, #20]
 8006f4a:	4b21      	ldr	r3, [pc, #132]	; (8006fd0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	6892      	ldr	r2, [r2, #8]
 8006f52:	0211      	lsls	r1, r2, #8
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	6952      	ldr	r2, [r2, #20]
 8006f58:	0852      	lsrs	r2, r2, #1
 8006f5a:	3a01      	subs	r2, #1
 8006f5c:	0652      	lsls	r2, r2, #25
 8006f5e:	4311      	orrs	r1, r2
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6852      	ldr	r2, [r2, #4]
 8006f64:	3a01      	subs	r2, #1
 8006f66:	0112      	lsls	r2, r2, #4
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	4916      	ldr	r1, [pc, #88]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006f70:	4b14      	ldr	r3, [pc, #80]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a13      	ldr	r2, [pc, #76]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f7c:	f7fb fef6 	bl	8002d6c <HAL_GetTick>
 8006f80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006f82:	e009      	b.n	8006f98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006f84:	f7fb fef2 	bl	8002d6c <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d902      	bls.n	8006f98 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	73fb      	strb	r3, [r7, #15]
          break;
 8006f96:	e005      	b.n	8006fa4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006f98:	4b0a      	ldr	r3, [pc, #40]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d0ef      	beq.n	8006f84 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d106      	bne.n	8006fb8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006faa:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fac:	695a      	ldr	r2, [r3, #20]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	4904      	ldr	r1, [pc, #16]	; (8006fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	40021000 	.word	0x40021000
 8006fc8:	07ff800f 	.word	0x07ff800f
 8006fcc:	ff9f800f 	.word	0xff9f800f
 8006fd0:	f9ff800f 	.word	0xf9ff800f

08006fd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e095      	b.n	8007112 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d108      	bne.n	8007000 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ff6:	d009      	beq.n	800700c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	61da      	str	r2, [r3, #28]
 8006ffe:	e005      	b.n	800700c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d106      	bne.n	800702c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7fb fbfc 	bl	8002824 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2202      	movs	r2, #2
 8007030:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007042:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800704c:	d902      	bls.n	8007054 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	e002      	b.n	800705a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007058:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007062:	d007      	beq.n	8007074 <HAL_SPI_Init+0xa0>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800706c:	d002      	beq.n	8007074 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007084:	431a      	orrs	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	431a      	orrs	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	431a      	orrs	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070a2:	431a      	orrs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070ac:	431a      	orrs	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b6:	ea42 0103 	orr.w	r1, r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	0c1b      	lsrs	r3, r3, #16
 80070d0:	f003 0204 	and.w	r2, r3, #4
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	f003 0310 	and.w	r3, r3, #16
 80070dc:	431a      	orrs	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e2:	f003 0308 	and.w	r3, r3, #8
 80070e6:	431a      	orrs	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80070f0:	ea42 0103 	orr.w	r1, r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b088      	sub	sp, #32
 800711e:	af00      	add	r7, sp, #0
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	603b      	str	r3, [r7, #0]
 8007126:	4613      	mov	r3, r2
 8007128:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007134:	2b01      	cmp	r3, #1
 8007136:	d101      	bne.n	800713c <HAL_SPI_Transmit+0x22>
 8007138:	2302      	movs	r3, #2
 800713a:	e158      	b.n	80073ee <HAL_SPI_Transmit+0x2d4>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007144:	f7fb fe12 	bl	8002d6c <HAL_GetTick>
 8007148:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800714a:	88fb      	ldrh	r3, [r7, #6]
 800714c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b01      	cmp	r3, #1
 8007158:	d002      	beq.n	8007160 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800715a:	2302      	movs	r3, #2
 800715c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800715e:	e13d      	b.n	80073dc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <HAL_SPI_Transmit+0x52>
 8007166:	88fb      	ldrh	r3, [r7, #6]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d102      	bne.n	8007172 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007170:	e134      	b.n	80073dc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2203      	movs	r2, #3
 8007176:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	88fa      	ldrh	r2, [r7, #6]
 800718a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	88fa      	ldrh	r2, [r7, #6]
 8007190:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071bc:	d10f      	bne.n	80071de <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e8:	2b40      	cmp	r3, #64	; 0x40
 80071ea:	d007      	beq.n	80071fc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007204:	d94b      	bls.n	800729e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <HAL_SPI_Transmit+0xfa>
 800720e:	8afb      	ldrh	r3, [r7, #22]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d13e      	bne.n	8007292 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007218:	881a      	ldrh	r2, [r3, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007224:	1c9a      	adds	r2, r3, #2
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800722e:	b29b      	uxth	r3, r3
 8007230:	3b01      	subs	r3, #1
 8007232:	b29a      	uxth	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007238:	e02b      	b.n	8007292 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b02      	cmp	r3, #2
 8007246:	d112      	bne.n	800726e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724c:	881a      	ldrh	r2, [r3, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007258:	1c9a      	adds	r2, r3, #2
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007262:	b29b      	uxth	r3, r3
 8007264:	3b01      	subs	r3, #1
 8007266:	b29a      	uxth	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800726c:	e011      	b.n	8007292 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800726e:	f7fb fd7d 	bl	8002d6c <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	429a      	cmp	r2, r3
 800727c:	d803      	bhi.n	8007286 <HAL_SPI_Transmit+0x16c>
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007284:	d102      	bne.n	800728c <HAL_SPI_Transmit+0x172>
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d102      	bne.n	8007292 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007290:	e0a4      	b.n	80073dc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007296:	b29b      	uxth	r3, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1ce      	bne.n	800723a <HAL_SPI_Transmit+0x120>
 800729c:	e07c      	b.n	8007398 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <HAL_SPI_Transmit+0x192>
 80072a6:	8afb      	ldrh	r3, [r7, #22]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d170      	bne.n	800738e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d912      	bls.n	80072dc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ba:	881a      	ldrh	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c6:	1c9a      	adds	r2, r3, #2
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3b02      	subs	r3, #2
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072da:	e058      	b.n	800738e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	330c      	adds	r3, #12
 80072e6:	7812      	ldrb	r2, [r2, #0]
 80072e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	3b01      	subs	r3, #1
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007302:	e044      	b.n	800738e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b02      	cmp	r3, #2
 8007310:	d12b      	bne.n	800736a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007316:	b29b      	uxth	r3, r3
 8007318:	2b01      	cmp	r3, #1
 800731a:	d912      	bls.n	8007342 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007320:	881a      	ldrh	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732c:	1c9a      	adds	r2, r3, #2
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007336:	b29b      	uxth	r3, r3
 8007338:	3b02      	subs	r3, #2
 800733a:	b29a      	uxth	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007340:	e025      	b.n	800738e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	330c      	adds	r3, #12
 800734c:	7812      	ldrb	r2, [r2, #0]
 800734e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800735e:	b29b      	uxth	r3, r3
 8007360:	3b01      	subs	r3, #1
 8007362:	b29a      	uxth	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007368:	e011      	b.n	800738e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800736a:	f7fb fcff 	bl	8002d6c <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	d803      	bhi.n	8007382 <HAL_SPI_Transmit+0x268>
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007380:	d102      	bne.n	8007388 <HAL_SPI_Transmit+0x26e>
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d102      	bne.n	800738e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800738c:	e026      	b.n	80073dc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007392:	b29b      	uxth	r3, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1b5      	bne.n	8007304 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	6839      	ldr	r1, [r7, #0]
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 fad3 	bl	8007948 <SPI_EndRxTxTransaction>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2220      	movs	r2, #32
 80073ac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10a      	bne.n	80073cc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073b6:	2300      	movs	r3, #0
 80073b8:	613b      	str	r3, [r7, #16]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	613b      	str	r3, [r7, #16]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	613b      	str	r3, [r7, #16]
 80073ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	77fb      	strb	r3, [r7, #31]
 80073d8:	e000      	b.n	80073dc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80073da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80073ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3720      	adds	r7, #32
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	4613      	mov	r3, r2
 8007404:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007410:	2b01      	cmp	r3, #1
 8007412:	d101      	bne.n	8007418 <HAL_SPI_Transmit_DMA+0x20>
 8007414:	2302      	movs	r3, #2
 8007416:	e0d8      	b.n	80075ca <HAL_SPI_Transmit_DMA+0x1d2>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b01      	cmp	r3, #1
 800742a:	d002      	beq.n	8007432 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800742c:	2302      	movs	r3, #2
 800742e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007430:	e0c6      	b.n	80075c0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <HAL_SPI_Transmit_DMA+0x46>
 8007438:	88fb      	ldrh	r3, [r7, #6]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d102      	bne.n	8007444 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007442:	e0bd      	b.n	80075c0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2203      	movs	r2, #3
 8007448:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	88fa      	ldrh	r2, [r7, #6]
 800745c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	88fa      	ldrh	r2, [r7, #6]
 8007462:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800748e:	d10f      	bne.n	80074b0 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800749e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b4:	4a47      	ldr	r2, [pc, #284]	; (80075d4 <HAL_SPI_Transmit_DMA+0x1dc>)
 80074b6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074bc:	4a46      	ldr	r2, [pc, #280]	; (80075d8 <HAL_SPI_Transmit_DMA+0x1e0>)
 80074be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c4:	4a45      	ldr	r2, [pc, #276]	; (80075dc <HAL_SPI_Transmit_DMA+0x1e4>)
 80074c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074cc:	2200      	movs	r2, #0
 80074ce:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685a      	ldr	r2, [r3, #4]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80074de:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074e8:	d82d      	bhi.n	8007546 <HAL_SPI_Transmit_DMA+0x14e>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074f4:	d127      	bne.n	8007546 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10f      	bne.n	8007524 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007512:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007518:	b29b      	uxth	r3, r3
 800751a:	085b      	lsrs	r3, r3, #1
 800751c:	b29a      	uxth	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007522:	e010      	b.n	8007546 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007532:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007538:	b29b      	uxth	r3, r3
 800753a:	085b      	lsrs	r3, r3, #1
 800753c:	b29b      	uxth	r3, r3
 800753e:	3301      	adds	r3, #1
 8007540:	b29a      	uxth	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754e:	4619      	mov	r1, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	330c      	adds	r3, #12
 8007556:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800755c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800755e:	f7fc fecd 	bl	80042fc <HAL_DMA_Start_IT>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00c      	beq.n	8007582 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800756c:	f043 0210 	orr.w	r2, r3, #16
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007580:	e01e      	b.n	80075c0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758c:	2b40      	cmp	r3, #64	; 0x40
 800758e:	d007      	beq.n	80075a0 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800759e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685a      	ldr	r2, [r3, #4]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f042 0220 	orr.w	r2, r2, #32
 80075ae:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f042 0202 	orr.w	r2, r2, #2
 80075be:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80075c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3718      	adds	r7, #24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	080076af 	.word	0x080076af
 80075d8:	08007609 	.word	0x08007609
 80075dc:	080076cb 	.word	0x080076cb

080075e0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007616:	f7fb fba9 	bl	8002d6c <HAL_GetTick>
 800761a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0320 	and.w	r3, r3, #32
 8007626:	2b20      	cmp	r3, #32
 8007628:	d03b      	beq.n	80076a2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f022 0220 	bic.w	r2, r2, #32
 8007638:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f022 0202 	bic.w	r2, r2, #2
 8007648:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	2164      	movs	r1, #100	; 0x64
 800764e:	6978      	ldr	r0, [r7, #20]
 8007650:	f000 f97a 	bl	8007948 <SPI_EndRxTxTransaction>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d005      	beq.n	8007666 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800765e:	f043 0220 	orr.w	r2, r3, #32
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10a      	bne.n	8007684 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800766e:	2300      	movs	r3, #0
 8007670:	60fb      	str	r3, [r7, #12]
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	60fb      	str	r3, [r7, #12]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	60fb      	str	r3, [r7, #12]
 8007682:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2200      	movs	r2, #0
 8007688:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800769a:	6978      	ldr	r0, [r7, #20]
 800769c:	f7ff ffaa 	bl	80075f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80076a0:	e002      	b.n	80076a8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80076a2:	6978      	ldr	r0, [r7, #20]
 80076a4:	f7f9 fc24 	bl	8000ef0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b084      	sub	sp, #16
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f7ff ff8f 	bl	80075e0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076c2:	bf00      	nop
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f022 0203 	bic.w	r2, r2, #3
 80076e6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076ec:	f043 0210 	orr.w	r2, r3, #16
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f7ff ff79 	bl	80075f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007702:	bf00      	nop
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b088      	sub	sp, #32
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	603b      	str	r3, [r7, #0]
 8007718:	4613      	mov	r3, r2
 800771a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800771c:	f7fb fb26 	bl	8002d6c <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	1a9b      	subs	r3, r3, r2
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	4413      	add	r3, r2
 800772a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800772c:	f7fb fb1e 	bl	8002d6c <HAL_GetTick>
 8007730:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007732:	4b39      	ldr	r3, [pc, #228]	; (8007818 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	015b      	lsls	r3, r3, #5
 8007738:	0d1b      	lsrs	r3, r3, #20
 800773a:	69fa      	ldr	r2, [r7, #28]
 800773c:	fb02 f303 	mul.w	r3, r2, r3
 8007740:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007742:	e054      	b.n	80077ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774a:	d050      	beq.n	80077ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800774c:	f7fb fb0e 	bl	8002d6c <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	429a      	cmp	r2, r3
 800775a:	d902      	bls.n	8007762 <SPI_WaitFlagStateUntilTimeout+0x56>
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d13d      	bne.n	80077de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007770:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800777a:	d111      	bne.n	80077a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007784:	d004      	beq.n	8007790 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778e:	d107      	bne.n	80077a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800779e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a8:	d10f      	bne.n	80077ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077b8:	601a      	str	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e017      	b.n	800780e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	689a      	ldr	r2, [r3, #8]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	4013      	ands	r3, r2
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	bf0c      	ite	eq
 80077fe:	2301      	moveq	r3, #1
 8007800:	2300      	movne	r3, #0
 8007802:	b2db      	uxtb	r3, r3
 8007804:	461a      	mov	r2, r3
 8007806:	79fb      	ldrb	r3, [r7, #7]
 8007808:	429a      	cmp	r2, r3
 800780a:	d19b      	bne.n	8007744 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3720      	adds	r7, #32
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	20000004 	.word	0x20000004

0800781c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08a      	sub	sp, #40	; 0x28
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
 8007828:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800782e:	f7fb fa9d 	bl	8002d6c <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	1a9b      	subs	r3, r3, r2
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	4413      	add	r3, r2
 800783c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800783e:	f7fb fa95 	bl	8002d6c <HAL_GetTick>
 8007842:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	330c      	adds	r3, #12
 800784a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800784c:	4b3d      	ldr	r3, [pc, #244]	; (8007944 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	4613      	mov	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	00da      	lsls	r2, r3, #3
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	0d1b      	lsrs	r3, r3, #20
 800785c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785e:	fb02 f303 	mul.w	r3, r2, r3
 8007862:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007864:	e060      	b.n	8007928 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800786c:	d107      	bne.n	800787e <SPI_WaitFifoStateUntilTimeout+0x62>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d104      	bne.n	800787e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	b2db      	uxtb	r3, r3
 800787a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800787c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007884:	d050      	beq.n	8007928 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007886:	f7fb fa71 	bl	8002d6c <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007892:	429a      	cmp	r2, r3
 8007894:	d902      	bls.n	800789c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	d13d      	bne.n	8007918 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078b4:	d111      	bne.n	80078da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078be:	d004      	beq.n	80078ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078c8:	d107      	bne.n	80078da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078e2:	d10f      	bne.n	8007904 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007902:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e010      	b.n	800793a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	3b01      	subs	r3, #1
 8007926:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	4013      	ands	r3, r2
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	429a      	cmp	r2, r3
 8007936:	d196      	bne.n	8007866 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3728      	adds	r7, #40	; 0x28
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	20000004 	.word	0x20000004

08007948 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af02      	add	r7, sp, #8
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2200      	movs	r2, #0
 800795c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f7ff ff5b 	bl	800781c <SPI_WaitFifoStateUntilTimeout>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d007      	beq.n	800797c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007970:	f043 0220 	orr.w	r2, r3, #32
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e027      	b.n	80079cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2200      	movs	r2, #0
 8007984:	2180      	movs	r1, #128	; 0x80
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f7ff fec0 	bl	800770c <SPI_WaitFlagStateUntilTimeout>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d007      	beq.n	80079a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007996:	f043 0220 	orr.w	r2, r3, #32
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e014      	b.n	80079cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f7ff ff34 	bl	800781c <SPI_WaitFifoStateUntilTimeout>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d007      	beq.n	80079ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079be:	f043 0220 	orr.w	r2, r3, #32
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e000      	b.n	80079cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e049      	b.n	8007a7a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d106      	bne.n	8007a00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7fa ff82 	bl	8002904 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2202      	movs	r2, #2
 8007a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	4619      	mov	r1, r3
 8007a12:	4610      	mov	r0, r2
 8007a14:	f000 fae6 	bl	8007fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
	...

08007a84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d109      	bne.n	8007aa8 <HAL_TIM_PWM_Start+0x24>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	bf14      	ite	ne
 8007aa0:	2301      	movne	r3, #1
 8007aa2:	2300      	moveq	r3, #0
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	e03c      	b.n	8007b22 <HAL_TIM_PWM_Start+0x9e>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2b04      	cmp	r3, #4
 8007aac:	d109      	bne.n	8007ac2 <HAL_TIM_PWM_Start+0x3e>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	bf14      	ite	ne
 8007aba:	2301      	movne	r3, #1
 8007abc:	2300      	moveq	r3, #0
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	e02f      	b.n	8007b22 <HAL_TIM_PWM_Start+0x9e>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b08      	cmp	r3, #8
 8007ac6:	d109      	bne.n	8007adc <HAL_TIM_PWM_Start+0x58>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	bf14      	ite	ne
 8007ad4:	2301      	movne	r3, #1
 8007ad6:	2300      	moveq	r3, #0
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	e022      	b.n	8007b22 <HAL_TIM_PWM_Start+0x9e>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b0c      	cmp	r3, #12
 8007ae0:	d109      	bne.n	8007af6 <HAL_TIM_PWM_Start+0x72>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	bf14      	ite	ne
 8007aee:	2301      	movne	r3, #1
 8007af0:	2300      	moveq	r3, #0
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	e015      	b.n	8007b22 <HAL_TIM_PWM_Start+0x9e>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b10      	cmp	r3, #16
 8007afa:	d109      	bne.n	8007b10 <HAL_TIM_PWM_Start+0x8c>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	bf14      	ite	ne
 8007b08:	2301      	movne	r3, #1
 8007b0a:	2300      	moveq	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	e008      	b.n	8007b22 <HAL_TIM_PWM_Start+0x9e>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	bf14      	ite	ne
 8007b1c:	2301      	movne	r3, #1
 8007b1e:	2300      	moveq	r3, #0
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e09c      	b.n	8007c64 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d104      	bne.n	8007b3a <HAL_TIM_PWM_Start+0xb6>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2202      	movs	r2, #2
 8007b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b38:	e023      	b.n	8007b82 <HAL_TIM_PWM_Start+0xfe>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d104      	bne.n	8007b4a <HAL_TIM_PWM_Start+0xc6>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b48:	e01b      	b.n	8007b82 <HAL_TIM_PWM_Start+0xfe>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b08      	cmp	r3, #8
 8007b4e:	d104      	bne.n	8007b5a <HAL_TIM_PWM_Start+0xd6>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b58:	e013      	b.n	8007b82 <HAL_TIM_PWM_Start+0xfe>
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b0c      	cmp	r3, #12
 8007b5e:	d104      	bne.n	8007b6a <HAL_TIM_PWM_Start+0xe6>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b68:	e00b      	b.n	8007b82 <HAL_TIM_PWM_Start+0xfe>
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b10      	cmp	r3, #16
 8007b6e:	d104      	bne.n	8007b7a <HAL_TIM_PWM_Start+0xf6>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b78:	e003      	b.n	8007b82 <HAL_TIM_PWM_Start+0xfe>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2201      	movs	r2, #1
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 fd9a 	bl	80086c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a35      	ldr	r2, [pc, #212]	; (8007c6c <HAL_TIM_PWM_Start+0x1e8>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d013      	beq.n	8007bc2 <HAL_TIM_PWM_Start+0x13e>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a34      	ldr	r2, [pc, #208]	; (8007c70 <HAL_TIM_PWM_Start+0x1ec>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00e      	beq.n	8007bc2 <HAL_TIM_PWM_Start+0x13e>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a32      	ldr	r2, [pc, #200]	; (8007c74 <HAL_TIM_PWM_Start+0x1f0>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d009      	beq.n	8007bc2 <HAL_TIM_PWM_Start+0x13e>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a31      	ldr	r2, [pc, #196]	; (8007c78 <HAL_TIM_PWM_Start+0x1f4>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d004      	beq.n	8007bc2 <HAL_TIM_PWM_Start+0x13e>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a2f      	ldr	r2, [pc, #188]	; (8007c7c <HAL_TIM_PWM_Start+0x1f8>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d101      	bne.n	8007bc6 <HAL_TIM_PWM_Start+0x142>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e000      	b.n	8007bc8 <HAL_TIM_PWM_Start+0x144>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d007      	beq.n	8007bdc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bda:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a22      	ldr	r2, [pc, #136]	; (8007c6c <HAL_TIM_PWM_Start+0x1e8>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d01d      	beq.n	8007c22 <HAL_TIM_PWM_Start+0x19e>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bee:	d018      	beq.n	8007c22 <HAL_TIM_PWM_Start+0x19e>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a22      	ldr	r2, [pc, #136]	; (8007c80 <HAL_TIM_PWM_Start+0x1fc>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d013      	beq.n	8007c22 <HAL_TIM_PWM_Start+0x19e>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a21      	ldr	r2, [pc, #132]	; (8007c84 <HAL_TIM_PWM_Start+0x200>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d00e      	beq.n	8007c22 <HAL_TIM_PWM_Start+0x19e>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a1f      	ldr	r2, [pc, #124]	; (8007c88 <HAL_TIM_PWM_Start+0x204>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d009      	beq.n	8007c22 <HAL_TIM_PWM_Start+0x19e>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a17      	ldr	r2, [pc, #92]	; (8007c70 <HAL_TIM_PWM_Start+0x1ec>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d004      	beq.n	8007c22 <HAL_TIM_PWM_Start+0x19e>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a15      	ldr	r2, [pc, #84]	; (8007c74 <HAL_TIM_PWM_Start+0x1f0>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d115      	bne.n	8007c4e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	689a      	ldr	r2, [r3, #8]
 8007c28:	4b18      	ldr	r3, [pc, #96]	; (8007c8c <HAL_TIM_PWM_Start+0x208>)
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b06      	cmp	r3, #6
 8007c32:	d015      	beq.n	8007c60 <HAL_TIM_PWM_Start+0x1dc>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c3a:	d011      	beq.n	8007c60 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f042 0201 	orr.w	r2, r2, #1
 8007c4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c4c:	e008      	b.n	8007c60 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f042 0201 	orr.w	r2, r2, #1
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	e000      	b.n	8007c62 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	40012c00 	.word	0x40012c00
 8007c70:	40013400 	.word	0x40013400
 8007c74:	40014000 	.word	0x40014000
 8007c78:	40014400 	.word	0x40014400
 8007c7c:	40014800 	.word	0x40014800
 8007c80:	40000400 	.word	0x40000400
 8007c84:	40000800 	.word	0x40000800
 8007c88:	40000c00 	.word	0x40000c00
 8007c8c:	00010007 	.word	0x00010007

08007c90 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 fd0e 	bl	80086c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a3e      	ldr	r2, [pc, #248]	; (8007da8 <HAL_TIM_PWM_Stop+0x118>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d013      	beq.n	8007cda <HAL_TIM_PWM_Stop+0x4a>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a3d      	ldr	r2, [pc, #244]	; (8007dac <HAL_TIM_PWM_Stop+0x11c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d00e      	beq.n	8007cda <HAL_TIM_PWM_Stop+0x4a>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a3b      	ldr	r2, [pc, #236]	; (8007db0 <HAL_TIM_PWM_Stop+0x120>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d009      	beq.n	8007cda <HAL_TIM_PWM_Stop+0x4a>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a3a      	ldr	r2, [pc, #232]	; (8007db4 <HAL_TIM_PWM_Stop+0x124>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d004      	beq.n	8007cda <HAL_TIM_PWM_Stop+0x4a>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a38      	ldr	r2, [pc, #224]	; (8007db8 <HAL_TIM_PWM_Stop+0x128>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d101      	bne.n	8007cde <HAL_TIM_PWM_Stop+0x4e>
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e000      	b.n	8007ce0 <HAL_TIM_PWM_Stop+0x50>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d017      	beq.n	8007d14 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6a1a      	ldr	r2, [r3, #32]
 8007cea:	f241 1311 	movw	r3, #4369	; 0x1111
 8007cee:	4013      	ands	r3, r2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10f      	bne.n	8007d14 <HAL_TIM_PWM_Stop+0x84>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6a1a      	ldr	r2, [r3, #32]
 8007cfa:	f240 4344 	movw	r3, #1092	; 0x444
 8007cfe:	4013      	ands	r3, r2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d107      	bne.n	8007d14 <HAL_TIM_PWM_Stop+0x84>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d12:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	6a1a      	ldr	r2, [r3, #32]
 8007d1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d1e:	4013      	ands	r3, r2
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10f      	bne.n	8007d44 <HAL_TIM_PWM_Stop+0xb4>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6a1a      	ldr	r2, [r3, #32]
 8007d2a:	f240 4344 	movw	r3, #1092	; 0x444
 8007d2e:	4013      	ands	r3, r2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d107      	bne.n	8007d44 <HAL_TIM_PWM_Stop+0xb4>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 0201 	bic.w	r2, r2, #1
 8007d42:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d104      	bne.n	8007d54 <HAL_TIM_PWM_Stop+0xc4>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d52:	e023      	b.n	8007d9c <HAL_TIM_PWM_Stop+0x10c>
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	d104      	bne.n	8007d64 <HAL_TIM_PWM_Stop+0xd4>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d62:	e01b      	b.n	8007d9c <HAL_TIM_PWM_Stop+0x10c>
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	2b08      	cmp	r3, #8
 8007d68:	d104      	bne.n	8007d74 <HAL_TIM_PWM_Stop+0xe4>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d72:	e013      	b.n	8007d9c <HAL_TIM_PWM_Stop+0x10c>
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	2b0c      	cmp	r3, #12
 8007d78:	d104      	bne.n	8007d84 <HAL_TIM_PWM_Stop+0xf4>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d82:	e00b      	b.n	8007d9c <HAL_TIM_PWM_Stop+0x10c>
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2b10      	cmp	r3, #16
 8007d88:	d104      	bne.n	8007d94 <HAL_TIM_PWM_Stop+0x104>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d92:	e003      	b.n	8007d9c <HAL_TIM_PWM_Stop+0x10c>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	40012c00 	.word	0x40012c00
 8007dac:	40013400 	.word	0x40013400
 8007db0:	40014000 	.word	0x40014000
 8007db4:	40014400 	.word	0x40014400
 8007db8:	40014800 	.word	0x40014800

08007dbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d101      	bne.n	8007dda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	e0ff      	b.n	8007fda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b14      	cmp	r3, #20
 8007de6:	f200 80f0 	bhi.w	8007fca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007dea:	a201      	add	r2, pc, #4	; (adr r2, 8007df0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df0:	08007e45 	.word	0x08007e45
 8007df4:	08007fcb 	.word	0x08007fcb
 8007df8:	08007fcb 	.word	0x08007fcb
 8007dfc:	08007fcb 	.word	0x08007fcb
 8007e00:	08007e85 	.word	0x08007e85
 8007e04:	08007fcb 	.word	0x08007fcb
 8007e08:	08007fcb 	.word	0x08007fcb
 8007e0c:	08007fcb 	.word	0x08007fcb
 8007e10:	08007ec7 	.word	0x08007ec7
 8007e14:	08007fcb 	.word	0x08007fcb
 8007e18:	08007fcb 	.word	0x08007fcb
 8007e1c:	08007fcb 	.word	0x08007fcb
 8007e20:	08007f07 	.word	0x08007f07
 8007e24:	08007fcb 	.word	0x08007fcb
 8007e28:	08007fcb 	.word	0x08007fcb
 8007e2c:	08007fcb 	.word	0x08007fcb
 8007e30:	08007f49 	.word	0x08007f49
 8007e34:	08007fcb 	.word	0x08007fcb
 8007e38:	08007fcb 	.word	0x08007fcb
 8007e3c:	08007fcb 	.word	0x08007fcb
 8007e40:	08007f89 	.word	0x08007f89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68b9      	ldr	r1, [r7, #8]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 f964 	bl	8008118 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699a      	ldr	r2, [r3, #24]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f042 0208 	orr.w	r2, r2, #8
 8007e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	699a      	ldr	r2, [r3, #24]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0204 	bic.w	r2, r2, #4
 8007e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6999      	ldr	r1, [r3, #24]
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	691a      	ldr	r2, [r3, #16]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	619a      	str	r2, [r3, #24]
      break;
 8007e82:	e0a5      	b.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68b9      	ldr	r1, [r7, #8]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 f9d4 	bl	8008238 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	699a      	ldr	r2, [r3, #24]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	699a      	ldr	r2, [r3, #24]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6999      	ldr	r1, [r3, #24]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	021a      	lsls	r2, r3, #8
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	619a      	str	r2, [r3, #24]
      break;
 8007ec4:	e084      	b.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68b9      	ldr	r1, [r7, #8]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 fa3d 	bl	800834c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	69da      	ldr	r2, [r3, #28]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f042 0208 	orr.w	r2, r2, #8
 8007ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	69da      	ldr	r2, [r3, #28]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 0204 	bic.w	r2, r2, #4
 8007ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69d9      	ldr	r1, [r3, #28]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	691a      	ldr	r2, [r3, #16]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	430a      	orrs	r2, r1
 8007f02:	61da      	str	r2, [r3, #28]
      break;
 8007f04:	e064      	b.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68b9      	ldr	r1, [r7, #8]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 faa5 	bl	800845c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	69da      	ldr	r2, [r3, #28]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69da      	ldr	r2, [r3, #28]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69d9      	ldr	r1, [r3, #28]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	021a      	lsls	r2, r3, #8
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	61da      	str	r2, [r3, #28]
      break;
 8007f46:	e043      	b.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68b9      	ldr	r1, [r7, #8]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 faee 	bl	8008530 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f042 0208 	orr.w	r2, r2, #8
 8007f62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 0204 	bic.w	r2, r2, #4
 8007f72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	691a      	ldr	r2, [r3, #16]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007f86:	e023      	b.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68b9      	ldr	r1, [r7, #8]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 fb32 	bl	80085f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fa2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	021a      	lsls	r2, r3, #8
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007fc8:	e002      	b.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8007fce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3718      	adds	r7, #24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop

08007fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a40      	ldr	r2, [pc, #256]	; (80080f8 <TIM_Base_SetConfig+0x114>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d013      	beq.n	8008024 <TIM_Base_SetConfig+0x40>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008002:	d00f      	beq.n	8008024 <TIM_Base_SetConfig+0x40>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a3d      	ldr	r2, [pc, #244]	; (80080fc <TIM_Base_SetConfig+0x118>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d00b      	beq.n	8008024 <TIM_Base_SetConfig+0x40>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a3c      	ldr	r2, [pc, #240]	; (8008100 <TIM_Base_SetConfig+0x11c>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d007      	beq.n	8008024 <TIM_Base_SetConfig+0x40>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a3b      	ldr	r2, [pc, #236]	; (8008104 <TIM_Base_SetConfig+0x120>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d003      	beq.n	8008024 <TIM_Base_SetConfig+0x40>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a3a      	ldr	r2, [pc, #232]	; (8008108 <TIM_Base_SetConfig+0x124>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d108      	bne.n	8008036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800802a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	4313      	orrs	r3, r2
 8008034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a2f      	ldr	r2, [pc, #188]	; (80080f8 <TIM_Base_SetConfig+0x114>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d01f      	beq.n	800807e <TIM_Base_SetConfig+0x9a>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008044:	d01b      	beq.n	800807e <TIM_Base_SetConfig+0x9a>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a2c      	ldr	r2, [pc, #176]	; (80080fc <TIM_Base_SetConfig+0x118>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d017      	beq.n	800807e <TIM_Base_SetConfig+0x9a>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a2b      	ldr	r2, [pc, #172]	; (8008100 <TIM_Base_SetConfig+0x11c>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d013      	beq.n	800807e <TIM_Base_SetConfig+0x9a>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a2a      	ldr	r2, [pc, #168]	; (8008104 <TIM_Base_SetConfig+0x120>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d00f      	beq.n	800807e <TIM_Base_SetConfig+0x9a>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a29      	ldr	r2, [pc, #164]	; (8008108 <TIM_Base_SetConfig+0x124>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d00b      	beq.n	800807e <TIM_Base_SetConfig+0x9a>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a28      	ldr	r2, [pc, #160]	; (800810c <TIM_Base_SetConfig+0x128>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d007      	beq.n	800807e <TIM_Base_SetConfig+0x9a>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a27      	ldr	r2, [pc, #156]	; (8008110 <TIM_Base_SetConfig+0x12c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d003      	beq.n	800807e <TIM_Base_SetConfig+0x9a>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a26      	ldr	r2, [pc, #152]	; (8008114 <TIM_Base_SetConfig+0x130>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d108      	bne.n	8008090 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	4313      	orrs	r3, r2
 800808e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	4313      	orrs	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	689a      	ldr	r2, [r3, #8]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a10      	ldr	r2, [pc, #64]	; (80080f8 <TIM_Base_SetConfig+0x114>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d00f      	beq.n	80080dc <TIM_Base_SetConfig+0xf8>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a12      	ldr	r2, [pc, #72]	; (8008108 <TIM_Base_SetConfig+0x124>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d00b      	beq.n	80080dc <TIM_Base_SetConfig+0xf8>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a11      	ldr	r2, [pc, #68]	; (800810c <TIM_Base_SetConfig+0x128>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d007      	beq.n	80080dc <TIM_Base_SetConfig+0xf8>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a10      	ldr	r2, [pc, #64]	; (8008110 <TIM_Base_SetConfig+0x12c>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d003      	beq.n	80080dc <TIM_Base_SetConfig+0xf8>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a0f      	ldr	r2, [pc, #60]	; (8008114 <TIM_Base_SetConfig+0x130>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d103      	bne.n	80080e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	691a      	ldr	r2, [r3, #16]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	615a      	str	r2, [r3, #20]
}
 80080ea:	bf00      	nop
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	40012c00 	.word	0x40012c00
 80080fc:	40000400 	.word	0x40000400
 8008100:	40000800 	.word	0x40000800
 8008104:	40000c00 	.word	0x40000c00
 8008108:	40013400 	.word	0x40013400
 800810c:	40014000 	.word	0x40014000
 8008110:	40014400 	.word	0x40014400
 8008114:	40014800 	.word	0x40014800

08008118 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008118:	b480      	push	{r7}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	f023 0201 	bic.w	r2, r3, #1
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800814a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f023 0303 	bic.w	r3, r3, #3
 8008152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	4313      	orrs	r3, r2
 800815c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f023 0302 	bic.w	r3, r3, #2
 8008164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	4313      	orrs	r3, r2
 800816e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a2c      	ldr	r2, [pc, #176]	; (8008224 <TIM_OC1_SetConfig+0x10c>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d00f      	beq.n	8008198 <TIM_OC1_SetConfig+0x80>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a2b      	ldr	r2, [pc, #172]	; (8008228 <TIM_OC1_SetConfig+0x110>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d00b      	beq.n	8008198 <TIM_OC1_SetConfig+0x80>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a2a      	ldr	r2, [pc, #168]	; (800822c <TIM_OC1_SetConfig+0x114>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d007      	beq.n	8008198 <TIM_OC1_SetConfig+0x80>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a29      	ldr	r2, [pc, #164]	; (8008230 <TIM_OC1_SetConfig+0x118>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d003      	beq.n	8008198 <TIM_OC1_SetConfig+0x80>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a28      	ldr	r2, [pc, #160]	; (8008234 <TIM_OC1_SetConfig+0x11c>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d10c      	bne.n	80081b2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	f023 0308 	bic.w	r3, r3, #8
 800819e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	697a      	ldr	r2, [r7, #20]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	f023 0304 	bic.w	r3, r3, #4
 80081b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a1b      	ldr	r2, [pc, #108]	; (8008224 <TIM_OC1_SetConfig+0x10c>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d00f      	beq.n	80081da <TIM_OC1_SetConfig+0xc2>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a1a      	ldr	r2, [pc, #104]	; (8008228 <TIM_OC1_SetConfig+0x110>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d00b      	beq.n	80081da <TIM_OC1_SetConfig+0xc2>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a19      	ldr	r2, [pc, #100]	; (800822c <TIM_OC1_SetConfig+0x114>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d007      	beq.n	80081da <TIM_OC1_SetConfig+0xc2>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a18      	ldr	r2, [pc, #96]	; (8008230 <TIM_OC1_SetConfig+0x118>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d003      	beq.n	80081da <TIM_OC1_SetConfig+0xc2>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a17      	ldr	r2, [pc, #92]	; (8008234 <TIM_OC1_SetConfig+0x11c>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d111      	bne.n	80081fe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	685a      	ldr	r2, [r3, #4]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	621a      	str	r2, [r3, #32]
}
 8008218:	bf00      	nop
 800821a:	371c      	adds	r7, #28
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr
 8008224:	40012c00 	.word	0x40012c00
 8008228:	40013400 	.word	0x40013400
 800822c:	40014000 	.word	0x40014000
 8008230:	40014400 	.word	0x40014400
 8008234:	40014800 	.word	0x40014800

08008238 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008238:	b480      	push	{r7}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	f023 0210 	bic.w	r2, r3, #16
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800826a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	021b      	lsls	r3, r3, #8
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	4313      	orrs	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	f023 0320 	bic.w	r3, r3, #32
 8008286:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	011b      	lsls	r3, r3, #4
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	4313      	orrs	r3, r2
 8008292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a28      	ldr	r2, [pc, #160]	; (8008338 <TIM_OC2_SetConfig+0x100>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d003      	beq.n	80082a4 <TIM_OC2_SetConfig+0x6c>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a27      	ldr	r2, [pc, #156]	; (800833c <TIM_OC2_SetConfig+0x104>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d10d      	bne.n	80082c0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	011b      	lsls	r3, r3, #4
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a1d      	ldr	r2, [pc, #116]	; (8008338 <TIM_OC2_SetConfig+0x100>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d00f      	beq.n	80082e8 <TIM_OC2_SetConfig+0xb0>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a1c      	ldr	r2, [pc, #112]	; (800833c <TIM_OC2_SetConfig+0x104>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d00b      	beq.n	80082e8 <TIM_OC2_SetConfig+0xb0>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a1b      	ldr	r2, [pc, #108]	; (8008340 <TIM_OC2_SetConfig+0x108>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d007      	beq.n	80082e8 <TIM_OC2_SetConfig+0xb0>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a1a      	ldr	r2, [pc, #104]	; (8008344 <TIM_OC2_SetConfig+0x10c>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d003      	beq.n	80082e8 <TIM_OC2_SetConfig+0xb0>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a19      	ldr	r2, [pc, #100]	; (8008348 <TIM_OC2_SetConfig+0x110>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d113      	bne.n	8008310 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	4313      	orrs	r3, r2
 8008302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	4313      	orrs	r3, r2
 800830e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	621a      	str	r2, [r3, #32]
}
 800832a:	bf00      	nop
 800832c:	371c      	adds	r7, #28
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	40012c00 	.word	0x40012c00
 800833c:	40013400 	.word	0x40013400
 8008340:	40014000 	.word	0x40014000
 8008344:	40014400 	.word	0x40014400
 8008348:	40014800 	.word	0x40014800

0800834c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	69db      	ldr	r3, [r3, #28]
 8008372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800837a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800837e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f023 0303 	bic.w	r3, r3, #3
 8008386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	4313      	orrs	r3, r2
 8008390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	021b      	lsls	r3, r3, #8
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a27      	ldr	r2, [pc, #156]	; (8008448 <TIM_OC3_SetConfig+0xfc>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d003      	beq.n	80083b6 <TIM_OC3_SetConfig+0x6a>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a26      	ldr	r2, [pc, #152]	; (800844c <TIM_OC3_SetConfig+0x100>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d10d      	bne.n	80083d2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	021b      	lsls	r3, r3, #8
 80083c4:	697a      	ldr	r2, [r7, #20]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a1c      	ldr	r2, [pc, #112]	; (8008448 <TIM_OC3_SetConfig+0xfc>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d00f      	beq.n	80083fa <TIM_OC3_SetConfig+0xae>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a1b      	ldr	r2, [pc, #108]	; (800844c <TIM_OC3_SetConfig+0x100>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d00b      	beq.n	80083fa <TIM_OC3_SetConfig+0xae>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a1a      	ldr	r2, [pc, #104]	; (8008450 <TIM_OC3_SetConfig+0x104>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d007      	beq.n	80083fa <TIM_OC3_SetConfig+0xae>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a19      	ldr	r2, [pc, #100]	; (8008454 <TIM_OC3_SetConfig+0x108>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d003      	beq.n	80083fa <TIM_OC3_SetConfig+0xae>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a18      	ldr	r2, [pc, #96]	; (8008458 <TIM_OC3_SetConfig+0x10c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d113      	bne.n	8008422 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	695b      	ldr	r3, [r3, #20]
 800840e:	011b      	lsls	r3, r3, #4
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	4313      	orrs	r3, r2
 8008414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	011b      	lsls	r3, r3, #4
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	4313      	orrs	r3, r2
 8008420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	685a      	ldr	r2, [r3, #4]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	697a      	ldr	r2, [r7, #20]
 800843a:	621a      	str	r2, [r3, #32]
}
 800843c:	bf00      	nop
 800843e:	371c      	adds	r7, #28
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	40012c00 	.word	0x40012c00
 800844c:	40013400 	.word	0x40013400
 8008450:	40014000 	.word	0x40014000
 8008454:	40014400 	.word	0x40014400
 8008458:	40014800 	.word	0x40014800

0800845c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800845c:	b480      	push	{r7}
 800845e:	b087      	sub	sp, #28
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	69db      	ldr	r3, [r3, #28]
 8008482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800848a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800848e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	021b      	lsls	r3, r3, #8
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	031b      	lsls	r3, r3, #12
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a18      	ldr	r2, [pc, #96]	; (800851c <TIM_OC4_SetConfig+0xc0>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d00f      	beq.n	80084e0 <TIM_OC4_SetConfig+0x84>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a17      	ldr	r2, [pc, #92]	; (8008520 <TIM_OC4_SetConfig+0xc4>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d00b      	beq.n	80084e0 <TIM_OC4_SetConfig+0x84>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a16      	ldr	r2, [pc, #88]	; (8008524 <TIM_OC4_SetConfig+0xc8>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d007      	beq.n	80084e0 <TIM_OC4_SetConfig+0x84>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a15      	ldr	r2, [pc, #84]	; (8008528 <TIM_OC4_SetConfig+0xcc>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d003      	beq.n	80084e0 <TIM_OC4_SetConfig+0x84>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a14      	ldr	r2, [pc, #80]	; (800852c <TIM_OC4_SetConfig+0xd0>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d109      	bne.n	80084f4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	019b      	lsls	r3, r3, #6
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	621a      	str	r2, [r3, #32]
}
 800850e:	bf00      	nop
 8008510:	371c      	adds	r7, #28
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	40012c00 	.word	0x40012c00
 8008520:	40013400 	.word	0x40013400
 8008524:	40014000 	.word	0x40014000
 8008528:	40014400 	.word	0x40014400
 800852c:	40014800 	.word	0x40014800

08008530 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800855e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	4313      	orrs	r3, r2
 800856c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008574:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	041b      	lsls	r3, r3, #16
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	4313      	orrs	r3, r2
 8008580:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a17      	ldr	r2, [pc, #92]	; (80085e4 <TIM_OC5_SetConfig+0xb4>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d00f      	beq.n	80085aa <TIM_OC5_SetConfig+0x7a>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a16      	ldr	r2, [pc, #88]	; (80085e8 <TIM_OC5_SetConfig+0xb8>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d00b      	beq.n	80085aa <TIM_OC5_SetConfig+0x7a>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a15      	ldr	r2, [pc, #84]	; (80085ec <TIM_OC5_SetConfig+0xbc>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d007      	beq.n	80085aa <TIM_OC5_SetConfig+0x7a>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a14      	ldr	r2, [pc, #80]	; (80085f0 <TIM_OC5_SetConfig+0xc0>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d003      	beq.n	80085aa <TIM_OC5_SetConfig+0x7a>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a13      	ldr	r2, [pc, #76]	; (80085f4 <TIM_OC5_SetConfig+0xc4>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d109      	bne.n	80085be <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	021b      	lsls	r3, r3, #8
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	697a      	ldr	r2, [r7, #20]
 80085c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	685a      	ldr	r2, [r3, #4]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	621a      	str	r2, [r3, #32]
}
 80085d8:	bf00      	nop
 80085da:	371c      	adds	r7, #28
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	40012c00 	.word	0x40012c00
 80085e8:	40013400 	.word	0x40013400
 80085ec:	40014000 	.word	0x40014000
 80085f0:	40014400 	.word	0x40014400
 80085f4:	40014800 	.word	0x40014800

080085f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a1b      	ldr	r3, [r3, #32]
 8008612:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800861e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800862a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	021b      	lsls	r3, r3, #8
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	4313      	orrs	r3, r2
 8008636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800863e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	051b      	lsls	r3, r3, #20
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	4313      	orrs	r3, r2
 800864a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a18      	ldr	r2, [pc, #96]	; (80086b0 <TIM_OC6_SetConfig+0xb8>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d00f      	beq.n	8008674 <TIM_OC6_SetConfig+0x7c>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a17      	ldr	r2, [pc, #92]	; (80086b4 <TIM_OC6_SetConfig+0xbc>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d00b      	beq.n	8008674 <TIM_OC6_SetConfig+0x7c>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a16      	ldr	r2, [pc, #88]	; (80086b8 <TIM_OC6_SetConfig+0xc0>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d007      	beq.n	8008674 <TIM_OC6_SetConfig+0x7c>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a15      	ldr	r2, [pc, #84]	; (80086bc <TIM_OC6_SetConfig+0xc4>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d003      	beq.n	8008674 <TIM_OC6_SetConfig+0x7c>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a14      	ldr	r2, [pc, #80]	; (80086c0 <TIM_OC6_SetConfig+0xc8>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d109      	bne.n	8008688 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800867a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	029b      	lsls	r3, r3, #10
 8008682:	697a      	ldr	r2, [r7, #20]
 8008684:	4313      	orrs	r3, r2
 8008686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	621a      	str	r2, [r3, #32]
}
 80086a2:	bf00      	nop
 80086a4:	371c      	adds	r7, #28
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	40012c00 	.word	0x40012c00
 80086b4:	40013400 	.word	0x40013400
 80086b8:	40014000 	.word	0x40014000
 80086bc:	40014400 	.word	0x40014400
 80086c0:	40014800 	.word	0x40014800

080086c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f003 031f 	and.w	r3, r3, #31
 80086d6:	2201      	movs	r2, #1
 80086d8:	fa02 f303 	lsl.w	r3, r2, r3
 80086dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6a1a      	ldr	r2, [r3, #32]
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	43db      	mvns	r3, r3
 80086e6:	401a      	ands	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6a1a      	ldr	r2, [r3, #32]
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	f003 031f 	and.w	r3, r3, #31
 80086f6:	6879      	ldr	r1, [r7, #4]
 80086f8:	fa01 f303 	lsl.w	r3, r1, r3
 80086fc:	431a      	orrs	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	621a      	str	r2, [r3, #32]
}
 8008702:	bf00      	nop
 8008704:	371c      	adds	r7, #28
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
	...

08008710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008720:	2b01      	cmp	r3, #1
 8008722:	d101      	bne.n	8008728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008724:	2302      	movs	r3, #2
 8008726:	e068      	b.n	80087fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2202      	movs	r2, #2
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a2e      	ldr	r2, [pc, #184]	; (8008808 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d004      	beq.n	800875c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a2d      	ldr	r2, [pc, #180]	; (800880c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d108      	bne.n	800876e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008762:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	4313      	orrs	r3, r2
 800876c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008774:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	4313      	orrs	r3, r2
 800877e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a1e      	ldr	r2, [pc, #120]	; (8008808 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d01d      	beq.n	80087ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800879a:	d018      	beq.n	80087ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a1b      	ldr	r2, [pc, #108]	; (8008810 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d013      	beq.n	80087ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a1a      	ldr	r2, [pc, #104]	; (8008814 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d00e      	beq.n	80087ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a18      	ldr	r2, [pc, #96]	; (8008818 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d009      	beq.n	80087ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a13      	ldr	r2, [pc, #76]	; (800880c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d004      	beq.n	80087ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a14      	ldr	r2, [pc, #80]	; (800881c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d10c      	bne.n	80087e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	4313      	orrs	r3, r2
 80087de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	40012c00 	.word	0x40012c00
 800880c:	40013400 	.word	0x40013400
 8008810:	40000400 	.word	0x40000400
 8008814:	40000800 	.word	0x40000800
 8008818:	40000c00 	.word	0x40000c00
 800881c:	40014000 	.word	0x40014000

08008820 <__errno>:
 8008820:	4b01      	ldr	r3, [pc, #4]	; (8008828 <__errno+0x8>)
 8008822:	6818      	ldr	r0, [r3, #0]
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	20000010 	.word	0x20000010

0800882c <__libc_init_array>:
 800882c:	b570      	push	{r4, r5, r6, lr}
 800882e:	4d0d      	ldr	r5, [pc, #52]	; (8008864 <__libc_init_array+0x38>)
 8008830:	4c0d      	ldr	r4, [pc, #52]	; (8008868 <__libc_init_array+0x3c>)
 8008832:	1b64      	subs	r4, r4, r5
 8008834:	10a4      	asrs	r4, r4, #2
 8008836:	2600      	movs	r6, #0
 8008838:	42a6      	cmp	r6, r4
 800883a:	d109      	bne.n	8008850 <__libc_init_array+0x24>
 800883c:	4d0b      	ldr	r5, [pc, #44]	; (800886c <__libc_init_array+0x40>)
 800883e:	4c0c      	ldr	r4, [pc, #48]	; (8008870 <__libc_init_array+0x44>)
 8008840:	f003 f88a 	bl	800b958 <_init>
 8008844:	1b64      	subs	r4, r4, r5
 8008846:	10a4      	asrs	r4, r4, #2
 8008848:	2600      	movs	r6, #0
 800884a:	42a6      	cmp	r6, r4
 800884c:	d105      	bne.n	800885a <__libc_init_array+0x2e>
 800884e:	bd70      	pop	{r4, r5, r6, pc}
 8008850:	f855 3b04 	ldr.w	r3, [r5], #4
 8008854:	4798      	blx	r3
 8008856:	3601      	adds	r6, #1
 8008858:	e7ee      	b.n	8008838 <__libc_init_array+0xc>
 800885a:	f855 3b04 	ldr.w	r3, [r5], #4
 800885e:	4798      	blx	r3
 8008860:	3601      	adds	r6, #1
 8008862:	e7f2      	b.n	800884a <__libc_init_array+0x1e>
 8008864:	080c8784 	.word	0x080c8784
 8008868:	080c8784 	.word	0x080c8784
 800886c:	080c8784 	.word	0x080c8784
 8008870:	080c8788 	.word	0x080c8788

08008874 <memset>:
 8008874:	4402      	add	r2, r0
 8008876:	4603      	mov	r3, r0
 8008878:	4293      	cmp	r3, r2
 800887a:	d100      	bne.n	800887e <memset+0xa>
 800887c:	4770      	bx	lr
 800887e:	f803 1b01 	strb.w	r1, [r3], #1
 8008882:	e7f9      	b.n	8008878 <memset+0x4>

08008884 <__cvt>:
 8008884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008888:	ec55 4b10 	vmov	r4, r5, d0
 800888c:	2d00      	cmp	r5, #0
 800888e:	460e      	mov	r6, r1
 8008890:	4619      	mov	r1, r3
 8008892:	462b      	mov	r3, r5
 8008894:	bfbb      	ittet	lt
 8008896:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800889a:	461d      	movlt	r5, r3
 800889c:	2300      	movge	r3, #0
 800889e:	232d      	movlt	r3, #45	; 0x2d
 80088a0:	700b      	strb	r3, [r1, #0]
 80088a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80088a8:	4691      	mov	r9, r2
 80088aa:	f023 0820 	bic.w	r8, r3, #32
 80088ae:	bfbc      	itt	lt
 80088b0:	4622      	movlt	r2, r4
 80088b2:	4614      	movlt	r4, r2
 80088b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088b8:	d005      	beq.n	80088c6 <__cvt+0x42>
 80088ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80088be:	d100      	bne.n	80088c2 <__cvt+0x3e>
 80088c0:	3601      	adds	r6, #1
 80088c2:	2102      	movs	r1, #2
 80088c4:	e000      	b.n	80088c8 <__cvt+0x44>
 80088c6:	2103      	movs	r1, #3
 80088c8:	ab03      	add	r3, sp, #12
 80088ca:	9301      	str	r3, [sp, #4]
 80088cc:	ab02      	add	r3, sp, #8
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	ec45 4b10 	vmov	d0, r4, r5
 80088d4:	4653      	mov	r3, sl
 80088d6:	4632      	mov	r2, r6
 80088d8:	f000 fe72 	bl	80095c0 <_dtoa_r>
 80088dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80088e0:	4607      	mov	r7, r0
 80088e2:	d102      	bne.n	80088ea <__cvt+0x66>
 80088e4:	f019 0f01 	tst.w	r9, #1
 80088e8:	d022      	beq.n	8008930 <__cvt+0xac>
 80088ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088ee:	eb07 0906 	add.w	r9, r7, r6
 80088f2:	d110      	bne.n	8008916 <__cvt+0x92>
 80088f4:	783b      	ldrb	r3, [r7, #0]
 80088f6:	2b30      	cmp	r3, #48	; 0x30
 80088f8:	d10a      	bne.n	8008910 <__cvt+0x8c>
 80088fa:	2200      	movs	r2, #0
 80088fc:	2300      	movs	r3, #0
 80088fe:	4620      	mov	r0, r4
 8008900:	4629      	mov	r1, r5
 8008902:	f7f8 f8f9 	bl	8000af8 <__aeabi_dcmpeq>
 8008906:	b918      	cbnz	r0, 8008910 <__cvt+0x8c>
 8008908:	f1c6 0601 	rsb	r6, r6, #1
 800890c:	f8ca 6000 	str.w	r6, [sl]
 8008910:	f8da 3000 	ldr.w	r3, [sl]
 8008914:	4499      	add	r9, r3
 8008916:	2200      	movs	r2, #0
 8008918:	2300      	movs	r3, #0
 800891a:	4620      	mov	r0, r4
 800891c:	4629      	mov	r1, r5
 800891e:	f7f8 f8eb 	bl	8000af8 <__aeabi_dcmpeq>
 8008922:	b108      	cbz	r0, 8008928 <__cvt+0xa4>
 8008924:	f8cd 900c 	str.w	r9, [sp, #12]
 8008928:	2230      	movs	r2, #48	; 0x30
 800892a:	9b03      	ldr	r3, [sp, #12]
 800892c:	454b      	cmp	r3, r9
 800892e:	d307      	bcc.n	8008940 <__cvt+0xbc>
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008934:	1bdb      	subs	r3, r3, r7
 8008936:	4638      	mov	r0, r7
 8008938:	6013      	str	r3, [r2, #0]
 800893a:	b004      	add	sp, #16
 800893c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008940:	1c59      	adds	r1, r3, #1
 8008942:	9103      	str	r1, [sp, #12]
 8008944:	701a      	strb	r2, [r3, #0]
 8008946:	e7f0      	b.n	800892a <__cvt+0xa6>

08008948 <__exponent>:
 8008948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800894a:	4603      	mov	r3, r0
 800894c:	2900      	cmp	r1, #0
 800894e:	bfb8      	it	lt
 8008950:	4249      	neglt	r1, r1
 8008952:	f803 2b02 	strb.w	r2, [r3], #2
 8008956:	bfb4      	ite	lt
 8008958:	222d      	movlt	r2, #45	; 0x2d
 800895a:	222b      	movge	r2, #43	; 0x2b
 800895c:	2909      	cmp	r1, #9
 800895e:	7042      	strb	r2, [r0, #1]
 8008960:	dd2a      	ble.n	80089b8 <__exponent+0x70>
 8008962:	f10d 0407 	add.w	r4, sp, #7
 8008966:	46a4      	mov	ip, r4
 8008968:	270a      	movs	r7, #10
 800896a:	46a6      	mov	lr, r4
 800896c:	460a      	mov	r2, r1
 800896e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008972:	fb07 1516 	mls	r5, r7, r6, r1
 8008976:	3530      	adds	r5, #48	; 0x30
 8008978:	2a63      	cmp	r2, #99	; 0x63
 800897a:	f104 34ff 	add.w	r4, r4, #4294967295
 800897e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008982:	4631      	mov	r1, r6
 8008984:	dcf1      	bgt.n	800896a <__exponent+0x22>
 8008986:	3130      	adds	r1, #48	; 0x30
 8008988:	f1ae 0502 	sub.w	r5, lr, #2
 800898c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008990:	1c44      	adds	r4, r0, #1
 8008992:	4629      	mov	r1, r5
 8008994:	4561      	cmp	r1, ip
 8008996:	d30a      	bcc.n	80089ae <__exponent+0x66>
 8008998:	f10d 0209 	add.w	r2, sp, #9
 800899c:	eba2 020e 	sub.w	r2, r2, lr
 80089a0:	4565      	cmp	r5, ip
 80089a2:	bf88      	it	hi
 80089a4:	2200      	movhi	r2, #0
 80089a6:	4413      	add	r3, r2
 80089a8:	1a18      	subs	r0, r3, r0
 80089aa:	b003      	add	sp, #12
 80089ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80089b6:	e7ed      	b.n	8008994 <__exponent+0x4c>
 80089b8:	2330      	movs	r3, #48	; 0x30
 80089ba:	3130      	adds	r1, #48	; 0x30
 80089bc:	7083      	strb	r3, [r0, #2]
 80089be:	70c1      	strb	r1, [r0, #3]
 80089c0:	1d03      	adds	r3, r0, #4
 80089c2:	e7f1      	b.n	80089a8 <__exponent+0x60>

080089c4 <_printf_float>:
 80089c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c8:	ed2d 8b02 	vpush	{d8}
 80089cc:	b08d      	sub	sp, #52	; 0x34
 80089ce:	460c      	mov	r4, r1
 80089d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80089d4:	4616      	mov	r6, r2
 80089d6:	461f      	mov	r7, r3
 80089d8:	4605      	mov	r5, r0
 80089da:	f001 fbdf 	bl	800a19c <_localeconv_r>
 80089de:	f8d0 a000 	ldr.w	sl, [r0]
 80089e2:	4650      	mov	r0, sl
 80089e4:	f7f7 fc0c 	bl	8000200 <strlen>
 80089e8:	2300      	movs	r3, #0
 80089ea:	930a      	str	r3, [sp, #40]	; 0x28
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	9305      	str	r3, [sp, #20]
 80089f0:	f8d8 3000 	ldr.w	r3, [r8]
 80089f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80089f8:	3307      	adds	r3, #7
 80089fa:	f023 0307 	bic.w	r3, r3, #7
 80089fe:	f103 0208 	add.w	r2, r3, #8
 8008a02:	f8c8 2000 	str.w	r2, [r8]
 8008a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008a0e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008a12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a16:	9307      	str	r3, [sp, #28]
 8008a18:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a1c:	ee08 0a10 	vmov	s16, r0
 8008a20:	4b9f      	ldr	r3, [pc, #636]	; (8008ca0 <_printf_float+0x2dc>)
 8008a22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a26:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2a:	f7f8 f897 	bl	8000b5c <__aeabi_dcmpun>
 8008a2e:	bb88      	cbnz	r0, 8008a94 <_printf_float+0xd0>
 8008a30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a34:	4b9a      	ldr	r3, [pc, #616]	; (8008ca0 <_printf_float+0x2dc>)
 8008a36:	f04f 32ff 	mov.w	r2, #4294967295
 8008a3a:	f7f8 f871 	bl	8000b20 <__aeabi_dcmple>
 8008a3e:	bb48      	cbnz	r0, 8008a94 <_printf_float+0xd0>
 8008a40:	2200      	movs	r2, #0
 8008a42:	2300      	movs	r3, #0
 8008a44:	4640      	mov	r0, r8
 8008a46:	4649      	mov	r1, r9
 8008a48:	f7f8 f860 	bl	8000b0c <__aeabi_dcmplt>
 8008a4c:	b110      	cbz	r0, 8008a54 <_printf_float+0x90>
 8008a4e:	232d      	movs	r3, #45	; 0x2d
 8008a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a54:	4b93      	ldr	r3, [pc, #588]	; (8008ca4 <_printf_float+0x2e0>)
 8008a56:	4894      	ldr	r0, [pc, #592]	; (8008ca8 <_printf_float+0x2e4>)
 8008a58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008a5c:	bf94      	ite	ls
 8008a5e:	4698      	movls	r8, r3
 8008a60:	4680      	movhi	r8, r0
 8008a62:	2303      	movs	r3, #3
 8008a64:	6123      	str	r3, [r4, #16]
 8008a66:	9b05      	ldr	r3, [sp, #20]
 8008a68:	f023 0204 	bic.w	r2, r3, #4
 8008a6c:	6022      	str	r2, [r4, #0]
 8008a6e:	f04f 0900 	mov.w	r9, #0
 8008a72:	9700      	str	r7, [sp, #0]
 8008a74:	4633      	mov	r3, r6
 8008a76:	aa0b      	add	r2, sp, #44	; 0x2c
 8008a78:	4621      	mov	r1, r4
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	f000 f9d8 	bl	8008e30 <_printf_common>
 8008a80:	3001      	adds	r0, #1
 8008a82:	f040 8090 	bne.w	8008ba6 <_printf_float+0x1e2>
 8008a86:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8a:	b00d      	add	sp, #52	; 0x34
 8008a8c:	ecbd 8b02 	vpop	{d8}
 8008a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a94:	4642      	mov	r2, r8
 8008a96:	464b      	mov	r3, r9
 8008a98:	4640      	mov	r0, r8
 8008a9a:	4649      	mov	r1, r9
 8008a9c:	f7f8 f85e 	bl	8000b5c <__aeabi_dcmpun>
 8008aa0:	b140      	cbz	r0, 8008ab4 <_printf_float+0xf0>
 8008aa2:	464b      	mov	r3, r9
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	bfbc      	itt	lt
 8008aa8:	232d      	movlt	r3, #45	; 0x2d
 8008aaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008aae:	487f      	ldr	r0, [pc, #508]	; (8008cac <_printf_float+0x2e8>)
 8008ab0:	4b7f      	ldr	r3, [pc, #508]	; (8008cb0 <_printf_float+0x2ec>)
 8008ab2:	e7d1      	b.n	8008a58 <_printf_float+0x94>
 8008ab4:	6863      	ldr	r3, [r4, #4]
 8008ab6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008aba:	9206      	str	r2, [sp, #24]
 8008abc:	1c5a      	adds	r2, r3, #1
 8008abe:	d13f      	bne.n	8008b40 <_printf_float+0x17c>
 8008ac0:	2306      	movs	r3, #6
 8008ac2:	6063      	str	r3, [r4, #4]
 8008ac4:	9b05      	ldr	r3, [sp, #20]
 8008ac6:	6861      	ldr	r1, [r4, #4]
 8008ac8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008acc:	2300      	movs	r3, #0
 8008ace:	9303      	str	r3, [sp, #12]
 8008ad0:	ab0a      	add	r3, sp, #40	; 0x28
 8008ad2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008ad6:	ab09      	add	r3, sp, #36	; 0x24
 8008ad8:	ec49 8b10 	vmov	d0, r8, r9
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	6022      	str	r2, [r4, #0]
 8008ae0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	f7ff fecd 	bl	8008884 <__cvt>
 8008aea:	9b06      	ldr	r3, [sp, #24]
 8008aec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008aee:	2b47      	cmp	r3, #71	; 0x47
 8008af0:	4680      	mov	r8, r0
 8008af2:	d108      	bne.n	8008b06 <_printf_float+0x142>
 8008af4:	1cc8      	adds	r0, r1, #3
 8008af6:	db02      	blt.n	8008afe <_printf_float+0x13a>
 8008af8:	6863      	ldr	r3, [r4, #4]
 8008afa:	4299      	cmp	r1, r3
 8008afc:	dd41      	ble.n	8008b82 <_printf_float+0x1be>
 8008afe:	f1ab 0b02 	sub.w	fp, fp, #2
 8008b02:	fa5f fb8b 	uxtb.w	fp, fp
 8008b06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b0a:	d820      	bhi.n	8008b4e <_printf_float+0x18a>
 8008b0c:	3901      	subs	r1, #1
 8008b0e:	465a      	mov	r2, fp
 8008b10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b14:	9109      	str	r1, [sp, #36]	; 0x24
 8008b16:	f7ff ff17 	bl	8008948 <__exponent>
 8008b1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b1c:	1813      	adds	r3, r2, r0
 8008b1e:	2a01      	cmp	r2, #1
 8008b20:	4681      	mov	r9, r0
 8008b22:	6123      	str	r3, [r4, #16]
 8008b24:	dc02      	bgt.n	8008b2c <_printf_float+0x168>
 8008b26:	6822      	ldr	r2, [r4, #0]
 8008b28:	07d2      	lsls	r2, r2, #31
 8008b2a:	d501      	bpl.n	8008b30 <_printf_float+0x16c>
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	6123      	str	r3, [r4, #16]
 8008b30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d09c      	beq.n	8008a72 <_printf_float+0xae>
 8008b38:	232d      	movs	r3, #45	; 0x2d
 8008b3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b3e:	e798      	b.n	8008a72 <_printf_float+0xae>
 8008b40:	9a06      	ldr	r2, [sp, #24]
 8008b42:	2a47      	cmp	r2, #71	; 0x47
 8008b44:	d1be      	bne.n	8008ac4 <_printf_float+0x100>
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1bc      	bne.n	8008ac4 <_printf_float+0x100>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e7b9      	b.n	8008ac2 <_printf_float+0xfe>
 8008b4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008b52:	d118      	bne.n	8008b86 <_printf_float+0x1c2>
 8008b54:	2900      	cmp	r1, #0
 8008b56:	6863      	ldr	r3, [r4, #4]
 8008b58:	dd0b      	ble.n	8008b72 <_printf_float+0x1ae>
 8008b5a:	6121      	str	r1, [r4, #16]
 8008b5c:	b913      	cbnz	r3, 8008b64 <_printf_float+0x1a0>
 8008b5e:	6822      	ldr	r2, [r4, #0]
 8008b60:	07d0      	lsls	r0, r2, #31
 8008b62:	d502      	bpl.n	8008b6a <_printf_float+0x1a6>
 8008b64:	3301      	adds	r3, #1
 8008b66:	440b      	add	r3, r1
 8008b68:	6123      	str	r3, [r4, #16]
 8008b6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b6c:	f04f 0900 	mov.w	r9, #0
 8008b70:	e7de      	b.n	8008b30 <_printf_float+0x16c>
 8008b72:	b913      	cbnz	r3, 8008b7a <_printf_float+0x1b6>
 8008b74:	6822      	ldr	r2, [r4, #0]
 8008b76:	07d2      	lsls	r2, r2, #31
 8008b78:	d501      	bpl.n	8008b7e <_printf_float+0x1ba>
 8008b7a:	3302      	adds	r3, #2
 8008b7c:	e7f4      	b.n	8008b68 <_printf_float+0x1a4>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e7f2      	b.n	8008b68 <_printf_float+0x1a4>
 8008b82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b88:	4299      	cmp	r1, r3
 8008b8a:	db05      	blt.n	8008b98 <_printf_float+0x1d4>
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	6121      	str	r1, [r4, #16]
 8008b90:	07d8      	lsls	r0, r3, #31
 8008b92:	d5ea      	bpl.n	8008b6a <_printf_float+0x1a6>
 8008b94:	1c4b      	adds	r3, r1, #1
 8008b96:	e7e7      	b.n	8008b68 <_printf_float+0x1a4>
 8008b98:	2900      	cmp	r1, #0
 8008b9a:	bfd4      	ite	le
 8008b9c:	f1c1 0202 	rsble	r2, r1, #2
 8008ba0:	2201      	movgt	r2, #1
 8008ba2:	4413      	add	r3, r2
 8008ba4:	e7e0      	b.n	8008b68 <_printf_float+0x1a4>
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	055a      	lsls	r2, r3, #21
 8008baa:	d407      	bmi.n	8008bbc <_printf_float+0x1f8>
 8008bac:	6923      	ldr	r3, [r4, #16]
 8008bae:	4642      	mov	r2, r8
 8008bb0:	4631      	mov	r1, r6
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	47b8      	blx	r7
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	d12c      	bne.n	8008c14 <_printf_float+0x250>
 8008bba:	e764      	b.n	8008a86 <_printf_float+0xc2>
 8008bbc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008bc0:	f240 80e0 	bls.w	8008d84 <_printf_float+0x3c0>
 8008bc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bc8:	2200      	movs	r2, #0
 8008bca:	2300      	movs	r3, #0
 8008bcc:	f7f7 ff94 	bl	8000af8 <__aeabi_dcmpeq>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d034      	beq.n	8008c3e <_printf_float+0x27a>
 8008bd4:	4a37      	ldr	r2, [pc, #220]	; (8008cb4 <_printf_float+0x2f0>)
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	4631      	mov	r1, r6
 8008bda:	4628      	mov	r0, r5
 8008bdc:	47b8      	blx	r7
 8008bde:	3001      	adds	r0, #1
 8008be0:	f43f af51 	beq.w	8008a86 <_printf_float+0xc2>
 8008be4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008be8:	429a      	cmp	r2, r3
 8008bea:	db02      	blt.n	8008bf2 <_printf_float+0x22e>
 8008bec:	6823      	ldr	r3, [r4, #0]
 8008bee:	07d8      	lsls	r0, r3, #31
 8008bf0:	d510      	bpl.n	8008c14 <_printf_float+0x250>
 8008bf2:	ee18 3a10 	vmov	r3, s16
 8008bf6:	4652      	mov	r2, sl
 8008bf8:	4631      	mov	r1, r6
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	47b8      	blx	r7
 8008bfe:	3001      	adds	r0, #1
 8008c00:	f43f af41 	beq.w	8008a86 <_printf_float+0xc2>
 8008c04:	f04f 0800 	mov.w	r8, #0
 8008c08:	f104 091a 	add.w	r9, r4, #26
 8008c0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	4543      	cmp	r3, r8
 8008c12:	dc09      	bgt.n	8008c28 <_printf_float+0x264>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	079b      	lsls	r3, r3, #30
 8008c18:	f100 8105 	bmi.w	8008e26 <_printf_float+0x462>
 8008c1c:	68e0      	ldr	r0, [r4, #12]
 8008c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c20:	4298      	cmp	r0, r3
 8008c22:	bfb8      	it	lt
 8008c24:	4618      	movlt	r0, r3
 8008c26:	e730      	b.n	8008a8a <_printf_float+0xc6>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	464a      	mov	r2, r9
 8008c2c:	4631      	mov	r1, r6
 8008c2e:	4628      	mov	r0, r5
 8008c30:	47b8      	blx	r7
 8008c32:	3001      	adds	r0, #1
 8008c34:	f43f af27 	beq.w	8008a86 <_printf_float+0xc2>
 8008c38:	f108 0801 	add.w	r8, r8, #1
 8008c3c:	e7e6      	b.n	8008c0c <_printf_float+0x248>
 8008c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	dc39      	bgt.n	8008cb8 <_printf_float+0x2f4>
 8008c44:	4a1b      	ldr	r2, [pc, #108]	; (8008cb4 <_printf_float+0x2f0>)
 8008c46:	2301      	movs	r3, #1
 8008c48:	4631      	mov	r1, r6
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	47b8      	blx	r7
 8008c4e:	3001      	adds	r0, #1
 8008c50:	f43f af19 	beq.w	8008a86 <_printf_float+0xc2>
 8008c54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	d102      	bne.n	8008c62 <_printf_float+0x29e>
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	07d9      	lsls	r1, r3, #31
 8008c60:	d5d8      	bpl.n	8008c14 <_printf_float+0x250>
 8008c62:	ee18 3a10 	vmov	r3, s16
 8008c66:	4652      	mov	r2, sl
 8008c68:	4631      	mov	r1, r6
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	47b8      	blx	r7
 8008c6e:	3001      	adds	r0, #1
 8008c70:	f43f af09 	beq.w	8008a86 <_printf_float+0xc2>
 8008c74:	f04f 0900 	mov.w	r9, #0
 8008c78:	f104 0a1a 	add.w	sl, r4, #26
 8008c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c7e:	425b      	negs	r3, r3
 8008c80:	454b      	cmp	r3, r9
 8008c82:	dc01      	bgt.n	8008c88 <_printf_float+0x2c4>
 8008c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c86:	e792      	b.n	8008bae <_printf_float+0x1ea>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	4652      	mov	r2, sl
 8008c8c:	4631      	mov	r1, r6
 8008c8e:	4628      	mov	r0, r5
 8008c90:	47b8      	blx	r7
 8008c92:	3001      	adds	r0, #1
 8008c94:	f43f aef7 	beq.w	8008a86 <_printf_float+0xc2>
 8008c98:	f109 0901 	add.w	r9, r9, #1
 8008c9c:	e7ee      	b.n	8008c7c <_printf_float+0x2b8>
 8008c9e:	bf00      	nop
 8008ca0:	7fefffff 	.word	0x7fefffff
 8008ca4:	080c83ac 	.word	0x080c83ac
 8008ca8:	080c83b0 	.word	0x080c83b0
 8008cac:	080c83b8 	.word	0x080c83b8
 8008cb0:	080c83b4 	.word	0x080c83b4
 8008cb4:	080c83bc 	.word	0x080c83bc
 8008cb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	bfa8      	it	ge
 8008cc0:	461a      	movge	r2, r3
 8008cc2:	2a00      	cmp	r2, #0
 8008cc4:	4691      	mov	r9, r2
 8008cc6:	dc37      	bgt.n	8008d38 <_printf_float+0x374>
 8008cc8:	f04f 0b00 	mov.w	fp, #0
 8008ccc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cd0:	f104 021a 	add.w	r2, r4, #26
 8008cd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cd6:	9305      	str	r3, [sp, #20]
 8008cd8:	eba3 0309 	sub.w	r3, r3, r9
 8008cdc:	455b      	cmp	r3, fp
 8008cde:	dc33      	bgt.n	8008d48 <_printf_float+0x384>
 8008ce0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	db3b      	blt.n	8008d60 <_printf_float+0x39c>
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	07da      	lsls	r2, r3, #31
 8008cec:	d438      	bmi.n	8008d60 <_printf_float+0x39c>
 8008cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf0:	9a05      	ldr	r2, [sp, #20]
 8008cf2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cf4:	1a9a      	subs	r2, r3, r2
 8008cf6:	eba3 0901 	sub.w	r9, r3, r1
 8008cfa:	4591      	cmp	r9, r2
 8008cfc:	bfa8      	it	ge
 8008cfe:	4691      	movge	r9, r2
 8008d00:	f1b9 0f00 	cmp.w	r9, #0
 8008d04:	dc35      	bgt.n	8008d72 <_printf_float+0x3ae>
 8008d06:	f04f 0800 	mov.w	r8, #0
 8008d0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d0e:	f104 0a1a 	add.w	sl, r4, #26
 8008d12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d16:	1a9b      	subs	r3, r3, r2
 8008d18:	eba3 0309 	sub.w	r3, r3, r9
 8008d1c:	4543      	cmp	r3, r8
 8008d1e:	f77f af79 	ble.w	8008c14 <_printf_float+0x250>
 8008d22:	2301      	movs	r3, #1
 8008d24:	4652      	mov	r2, sl
 8008d26:	4631      	mov	r1, r6
 8008d28:	4628      	mov	r0, r5
 8008d2a:	47b8      	blx	r7
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	f43f aeaa 	beq.w	8008a86 <_printf_float+0xc2>
 8008d32:	f108 0801 	add.w	r8, r8, #1
 8008d36:	e7ec      	b.n	8008d12 <_printf_float+0x34e>
 8008d38:	4613      	mov	r3, r2
 8008d3a:	4631      	mov	r1, r6
 8008d3c:	4642      	mov	r2, r8
 8008d3e:	4628      	mov	r0, r5
 8008d40:	47b8      	blx	r7
 8008d42:	3001      	adds	r0, #1
 8008d44:	d1c0      	bne.n	8008cc8 <_printf_float+0x304>
 8008d46:	e69e      	b.n	8008a86 <_printf_float+0xc2>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	4631      	mov	r1, r6
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	9205      	str	r2, [sp, #20]
 8008d50:	47b8      	blx	r7
 8008d52:	3001      	adds	r0, #1
 8008d54:	f43f ae97 	beq.w	8008a86 <_printf_float+0xc2>
 8008d58:	9a05      	ldr	r2, [sp, #20]
 8008d5a:	f10b 0b01 	add.w	fp, fp, #1
 8008d5e:	e7b9      	b.n	8008cd4 <_printf_float+0x310>
 8008d60:	ee18 3a10 	vmov	r3, s16
 8008d64:	4652      	mov	r2, sl
 8008d66:	4631      	mov	r1, r6
 8008d68:	4628      	mov	r0, r5
 8008d6a:	47b8      	blx	r7
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	d1be      	bne.n	8008cee <_printf_float+0x32a>
 8008d70:	e689      	b.n	8008a86 <_printf_float+0xc2>
 8008d72:	9a05      	ldr	r2, [sp, #20]
 8008d74:	464b      	mov	r3, r9
 8008d76:	4442      	add	r2, r8
 8008d78:	4631      	mov	r1, r6
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	47b8      	blx	r7
 8008d7e:	3001      	adds	r0, #1
 8008d80:	d1c1      	bne.n	8008d06 <_printf_float+0x342>
 8008d82:	e680      	b.n	8008a86 <_printf_float+0xc2>
 8008d84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d86:	2a01      	cmp	r2, #1
 8008d88:	dc01      	bgt.n	8008d8e <_printf_float+0x3ca>
 8008d8a:	07db      	lsls	r3, r3, #31
 8008d8c:	d538      	bpl.n	8008e00 <_printf_float+0x43c>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	4642      	mov	r2, r8
 8008d92:	4631      	mov	r1, r6
 8008d94:	4628      	mov	r0, r5
 8008d96:	47b8      	blx	r7
 8008d98:	3001      	adds	r0, #1
 8008d9a:	f43f ae74 	beq.w	8008a86 <_printf_float+0xc2>
 8008d9e:	ee18 3a10 	vmov	r3, s16
 8008da2:	4652      	mov	r2, sl
 8008da4:	4631      	mov	r1, r6
 8008da6:	4628      	mov	r0, r5
 8008da8:	47b8      	blx	r7
 8008daa:	3001      	adds	r0, #1
 8008dac:	f43f ae6b 	beq.w	8008a86 <_printf_float+0xc2>
 8008db0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008db4:	2200      	movs	r2, #0
 8008db6:	2300      	movs	r3, #0
 8008db8:	f7f7 fe9e 	bl	8000af8 <__aeabi_dcmpeq>
 8008dbc:	b9d8      	cbnz	r0, 8008df6 <_printf_float+0x432>
 8008dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc0:	f108 0201 	add.w	r2, r8, #1
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	4631      	mov	r1, r6
 8008dc8:	4628      	mov	r0, r5
 8008dca:	47b8      	blx	r7
 8008dcc:	3001      	adds	r0, #1
 8008dce:	d10e      	bne.n	8008dee <_printf_float+0x42a>
 8008dd0:	e659      	b.n	8008a86 <_printf_float+0xc2>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	4652      	mov	r2, sl
 8008dd6:	4631      	mov	r1, r6
 8008dd8:	4628      	mov	r0, r5
 8008dda:	47b8      	blx	r7
 8008ddc:	3001      	adds	r0, #1
 8008dde:	f43f ae52 	beq.w	8008a86 <_printf_float+0xc2>
 8008de2:	f108 0801 	add.w	r8, r8, #1
 8008de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008de8:	3b01      	subs	r3, #1
 8008dea:	4543      	cmp	r3, r8
 8008dec:	dcf1      	bgt.n	8008dd2 <_printf_float+0x40e>
 8008dee:	464b      	mov	r3, r9
 8008df0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008df4:	e6dc      	b.n	8008bb0 <_printf_float+0x1ec>
 8008df6:	f04f 0800 	mov.w	r8, #0
 8008dfa:	f104 0a1a 	add.w	sl, r4, #26
 8008dfe:	e7f2      	b.n	8008de6 <_printf_float+0x422>
 8008e00:	2301      	movs	r3, #1
 8008e02:	4642      	mov	r2, r8
 8008e04:	e7df      	b.n	8008dc6 <_printf_float+0x402>
 8008e06:	2301      	movs	r3, #1
 8008e08:	464a      	mov	r2, r9
 8008e0a:	4631      	mov	r1, r6
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	47b8      	blx	r7
 8008e10:	3001      	adds	r0, #1
 8008e12:	f43f ae38 	beq.w	8008a86 <_printf_float+0xc2>
 8008e16:	f108 0801 	add.w	r8, r8, #1
 8008e1a:	68e3      	ldr	r3, [r4, #12]
 8008e1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e1e:	1a5b      	subs	r3, r3, r1
 8008e20:	4543      	cmp	r3, r8
 8008e22:	dcf0      	bgt.n	8008e06 <_printf_float+0x442>
 8008e24:	e6fa      	b.n	8008c1c <_printf_float+0x258>
 8008e26:	f04f 0800 	mov.w	r8, #0
 8008e2a:	f104 0919 	add.w	r9, r4, #25
 8008e2e:	e7f4      	b.n	8008e1a <_printf_float+0x456>

08008e30 <_printf_common>:
 8008e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e34:	4616      	mov	r6, r2
 8008e36:	4699      	mov	r9, r3
 8008e38:	688a      	ldr	r2, [r1, #8]
 8008e3a:	690b      	ldr	r3, [r1, #16]
 8008e3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e40:	4293      	cmp	r3, r2
 8008e42:	bfb8      	it	lt
 8008e44:	4613      	movlt	r3, r2
 8008e46:	6033      	str	r3, [r6, #0]
 8008e48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e4c:	4607      	mov	r7, r0
 8008e4e:	460c      	mov	r4, r1
 8008e50:	b10a      	cbz	r2, 8008e56 <_printf_common+0x26>
 8008e52:	3301      	adds	r3, #1
 8008e54:	6033      	str	r3, [r6, #0]
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	0699      	lsls	r1, r3, #26
 8008e5a:	bf42      	ittt	mi
 8008e5c:	6833      	ldrmi	r3, [r6, #0]
 8008e5e:	3302      	addmi	r3, #2
 8008e60:	6033      	strmi	r3, [r6, #0]
 8008e62:	6825      	ldr	r5, [r4, #0]
 8008e64:	f015 0506 	ands.w	r5, r5, #6
 8008e68:	d106      	bne.n	8008e78 <_printf_common+0x48>
 8008e6a:	f104 0a19 	add.w	sl, r4, #25
 8008e6e:	68e3      	ldr	r3, [r4, #12]
 8008e70:	6832      	ldr	r2, [r6, #0]
 8008e72:	1a9b      	subs	r3, r3, r2
 8008e74:	42ab      	cmp	r3, r5
 8008e76:	dc26      	bgt.n	8008ec6 <_printf_common+0x96>
 8008e78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e7c:	1e13      	subs	r3, r2, #0
 8008e7e:	6822      	ldr	r2, [r4, #0]
 8008e80:	bf18      	it	ne
 8008e82:	2301      	movne	r3, #1
 8008e84:	0692      	lsls	r2, r2, #26
 8008e86:	d42b      	bmi.n	8008ee0 <_printf_common+0xb0>
 8008e88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e8c:	4649      	mov	r1, r9
 8008e8e:	4638      	mov	r0, r7
 8008e90:	47c0      	blx	r8
 8008e92:	3001      	adds	r0, #1
 8008e94:	d01e      	beq.n	8008ed4 <_printf_common+0xa4>
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	68e5      	ldr	r5, [r4, #12]
 8008e9a:	6832      	ldr	r2, [r6, #0]
 8008e9c:	f003 0306 	and.w	r3, r3, #6
 8008ea0:	2b04      	cmp	r3, #4
 8008ea2:	bf08      	it	eq
 8008ea4:	1aad      	subeq	r5, r5, r2
 8008ea6:	68a3      	ldr	r3, [r4, #8]
 8008ea8:	6922      	ldr	r2, [r4, #16]
 8008eaa:	bf0c      	ite	eq
 8008eac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008eb0:	2500      	movne	r5, #0
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	bfc4      	itt	gt
 8008eb6:	1a9b      	subgt	r3, r3, r2
 8008eb8:	18ed      	addgt	r5, r5, r3
 8008eba:	2600      	movs	r6, #0
 8008ebc:	341a      	adds	r4, #26
 8008ebe:	42b5      	cmp	r5, r6
 8008ec0:	d11a      	bne.n	8008ef8 <_printf_common+0xc8>
 8008ec2:	2000      	movs	r0, #0
 8008ec4:	e008      	b.n	8008ed8 <_printf_common+0xa8>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	4652      	mov	r2, sl
 8008eca:	4649      	mov	r1, r9
 8008ecc:	4638      	mov	r0, r7
 8008ece:	47c0      	blx	r8
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	d103      	bne.n	8008edc <_printf_common+0xac>
 8008ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008edc:	3501      	adds	r5, #1
 8008ede:	e7c6      	b.n	8008e6e <_printf_common+0x3e>
 8008ee0:	18e1      	adds	r1, r4, r3
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	2030      	movs	r0, #48	; 0x30
 8008ee6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008eea:	4422      	add	r2, r4
 8008eec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ef0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ef4:	3302      	adds	r3, #2
 8008ef6:	e7c7      	b.n	8008e88 <_printf_common+0x58>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	4622      	mov	r2, r4
 8008efc:	4649      	mov	r1, r9
 8008efe:	4638      	mov	r0, r7
 8008f00:	47c0      	blx	r8
 8008f02:	3001      	adds	r0, #1
 8008f04:	d0e6      	beq.n	8008ed4 <_printf_common+0xa4>
 8008f06:	3601      	adds	r6, #1
 8008f08:	e7d9      	b.n	8008ebe <_printf_common+0x8e>
	...

08008f0c <_printf_i>:
 8008f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f10:	7e0f      	ldrb	r7, [r1, #24]
 8008f12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f14:	2f78      	cmp	r7, #120	; 0x78
 8008f16:	4691      	mov	r9, r2
 8008f18:	4680      	mov	r8, r0
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	469a      	mov	sl, r3
 8008f1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f22:	d807      	bhi.n	8008f34 <_printf_i+0x28>
 8008f24:	2f62      	cmp	r7, #98	; 0x62
 8008f26:	d80a      	bhi.n	8008f3e <_printf_i+0x32>
 8008f28:	2f00      	cmp	r7, #0
 8008f2a:	f000 80d8 	beq.w	80090de <_printf_i+0x1d2>
 8008f2e:	2f58      	cmp	r7, #88	; 0x58
 8008f30:	f000 80a3 	beq.w	800907a <_printf_i+0x16e>
 8008f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f3c:	e03a      	b.n	8008fb4 <_printf_i+0xa8>
 8008f3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f42:	2b15      	cmp	r3, #21
 8008f44:	d8f6      	bhi.n	8008f34 <_printf_i+0x28>
 8008f46:	a101      	add	r1, pc, #4	; (adr r1, 8008f4c <_printf_i+0x40>)
 8008f48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f4c:	08008fa5 	.word	0x08008fa5
 8008f50:	08008fb9 	.word	0x08008fb9
 8008f54:	08008f35 	.word	0x08008f35
 8008f58:	08008f35 	.word	0x08008f35
 8008f5c:	08008f35 	.word	0x08008f35
 8008f60:	08008f35 	.word	0x08008f35
 8008f64:	08008fb9 	.word	0x08008fb9
 8008f68:	08008f35 	.word	0x08008f35
 8008f6c:	08008f35 	.word	0x08008f35
 8008f70:	08008f35 	.word	0x08008f35
 8008f74:	08008f35 	.word	0x08008f35
 8008f78:	080090c5 	.word	0x080090c5
 8008f7c:	08008fe9 	.word	0x08008fe9
 8008f80:	080090a7 	.word	0x080090a7
 8008f84:	08008f35 	.word	0x08008f35
 8008f88:	08008f35 	.word	0x08008f35
 8008f8c:	080090e7 	.word	0x080090e7
 8008f90:	08008f35 	.word	0x08008f35
 8008f94:	08008fe9 	.word	0x08008fe9
 8008f98:	08008f35 	.word	0x08008f35
 8008f9c:	08008f35 	.word	0x08008f35
 8008fa0:	080090af 	.word	0x080090af
 8008fa4:	682b      	ldr	r3, [r5, #0]
 8008fa6:	1d1a      	adds	r2, r3, #4
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	602a      	str	r2, [r5, #0]
 8008fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e0a3      	b.n	8009100 <_printf_i+0x1f4>
 8008fb8:	6820      	ldr	r0, [r4, #0]
 8008fba:	6829      	ldr	r1, [r5, #0]
 8008fbc:	0606      	lsls	r6, r0, #24
 8008fbe:	f101 0304 	add.w	r3, r1, #4
 8008fc2:	d50a      	bpl.n	8008fda <_printf_i+0xce>
 8008fc4:	680e      	ldr	r6, [r1, #0]
 8008fc6:	602b      	str	r3, [r5, #0]
 8008fc8:	2e00      	cmp	r6, #0
 8008fca:	da03      	bge.n	8008fd4 <_printf_i+0xc8>
 8008fcc:	232d      	movs	r3, #45	; 0x2d
 8008fce:	4276      	negs	r6, r6
 8008fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fd4:	485e      	ldr	r0, [pc, #376]	; (8009150 <_printf_i+0x244>)
 8008fd6:	230a      	movs	r3, #10
 8008fd8:	e019      	b.n	800900e <_printf_i+0x102>
 8008fda:	680e      	ldr	r6, [r1, #0]
 8008fdc:	602b      	str	r3, [r5, #0]
 8008fde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fe2:	bf18      	it	ne
 8008fe4:	b236      	sxthne	r6, r6
 8008fe6:	e7ef      	b.n	8008fc8 <_printf_i+0xbc>
 8008fe8:	682b      	ldr	r3, [r5, #0]
 8008fea:	6820      	ldr	r0, [r4, #0]
 8008fec:	1d19      	adds	r1, r3, #4
 8008fee:	6029      	str	r1, [r5, #0]
 8008ff0:	0601      	lsls	r1, r0, #24
 8008ff2:	d501      	bpl.n	8008ff8 <_printf_i+0xec>
 8008ff4:	681e      	ldr	r6, [r3, #0]
 8008ff6:	e002      	b.n	8008ffe <_printf_i+0xf2>
 8008ff8:	0646      	lsls	r6, r0, #25
 8008ffa:	d5fb      	bpl.n	8008ff4 <_printf_i+0xe8>
 8008ffc:	881e      	ldrh	r6, [r3, #0]
 8008ffe:	4854      	ldr	r0, [pc, #336]	; (8009150 <_printf_i+0x244>)
 8009000:	2f6f      	cmp	r7, #111	; 0x6f
 8009002:	bf0c      	ite	eq
 8009004:	2308      	moveq	r3, #8
 8009006:	230a      	movne	r3, #10
 8009008:	2100      	movs	r1, #0
 800900a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800900e:	6865      	ldr	r5, [r4, #4]
 8009010:	60a5      	str	r5, [r4, #8]
 8009012:	2d00      	cmp	r5, #0
 8009014:	bfa2      	ittt	ge
 8009016:	6821      	ldrge	r1, [r4, #0]
 8009018:	f021 0104 	bicge.w	r1, r1, #4
 800901c:	6021      	strge	r1, [r4, #0]
 800901e:	b90e      	cbnz	r6, 8009024 <_printf_i+0x118>
 8009020:	2d00      	cmp	r5, #0
 8009022:	d04d      	beq.n	80090c0 <_printf_i+0x1b4>
 8009024:	4615      	mov	r5, r2
 8009026:	fbb6 f1f3 	udiv	r1, r6, r3
 800902a:	fb03 6711 	mls	r7, r3, r1, r6
 800902e:	5dc7      	ldrb	r7, [r0, r7]
 8009030:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009034:	4637      	mov	r7, r6
 8009036:	42bb      	cmp	r3, r7
 8009038:	460e      	mov	r6, r1
 800903a:	d9f4      	bls.n	8009026 <_printf_i+0x11a>
 800903c:	2b08      	cmp	r3, #8
 800903e:	d10b      	bne.n	8009058 <_printf_i+0x14c>
 8009040:	6823      	ldr	r3, [r4, #0]
 8009042:	07de      	lsls	r6, r3, #31
 8009044:	d508      	bpl.n	8009058 <_printf_i+0x14c>
 8009046:	6923      	ldr	r3, [r4, #16]
 8009048:	6861      	ldr	r1, [r4, #4]
 800904a:	4299      	cmp	r1, r3
 800904c:	bfde      	ittt	le
 800904e:	2330      	movle	r3, #48	; 0x30
 8009050:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009054:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009058:	1b52      	subs	r2, r2, r5
 800905a:	6122      	str	r2, [r4, #16]
 800905c:	f8cd a000 	str.w	sl, [sp]
 8009060:	464b      	mov	r3, r9
 8009062:	aa03      	add	r2, sp, #12
 8009064:	4621      	mov	r1, r4
 8009066:	4640      	mov	r0, r8
 8009068:	f7ff fee2 	bl	8008e30 <_printf_common>
 800906c:	3001      	adds	r0, #1
 800906e:	d14c      	bne.n	800910a <_printf_i+0x1fe>
 8009070:	f04f 30ff 	mov.w	r0, #4294967295
 8009074:	b004      	add	sp, #16
 8009076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800907a:	4835      	ldr	r0, [pc, #212]	; (8009150 <_printf_i+0x244>)
 800907c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009080:	6829      	ldr	r1, [r5, #0]
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	f851 6b04 	ldr.w	r6, [r1], #4
 8009088:	6029      	str	r1, [r5, #0]
 800908a:	061d      	lsls	r5, r3, #24
 800908c:	d514      	bpl.n	80090b8 <_printf_i+0x1ac>
 800908e:	07df      	lsls	r7, r3, #31
 8009090:	bf44      	itt	mi
 8009092:	f043 0320 	orrmi.w	r3, r3, #32
 8009096:	6023      	strmi	r3, [r4, #0]
 8009098:	b91e      	cbnz	r6, 80090a2 <_printf_i+0x196>
 800909a:	6823      	ldr	r3, [r4, #0]
 800909c:	f023 0320 	bic.w	r3, r3, #32
 80090a0:	6023      	str	r3, [r4, #0]
 80090a2:	2310      	movs	r3, #16
 80090a4:	e7b0      	b.n	8009008 <_printf_i+0xfc>
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	f043 0320 	orr.w	r3, r3, #32
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	2378      	movs	r3, #120	; 0x78
 80090b0:	4828      	ldr	r0, [pc, #160]	; (8009154 <_printf_i+0x248>)
 80090b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090b6:	e7e3      	b.n	8009080 <_printf_i+0x174>
 80090b8:	0659      	lsls	r1, r3, #25
 80090ba:	bf48      	it	mi
 80090bc:	b2b6      	uxthmi	r6, r6
 80090be:	e7e6      	b.n	800908e <_printf_i+0x182>
 80090c0:	4615      	mov	r5, r2
 80090c2:	e7bb      	b.n	800903c <_printf_i+0x130>
 80090c4:	682b      	ldr	r3, [r5, #0]
 80090c6:	6826      	ldr	r6, [r4, #0]
 80090c8:	6961      	ldr	r1, [r4, #20]
 80090ca:	1d18      	adds	r0, r3, #4
 80090cc:	6028      	str	r0, [r5, #0]
 80090ce:	0635      	lsls	r5, r6, #24
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	d501      	bpl.n	80090d8 <_printf_i+0x1cc>
 80090d4:	6019      	str	r1, [r3, #0]
 80090d6:	e002      	b.n	80090de <_printf_i+0x1d2>
 80090d8:	0670      	lsls	r0, r6, #25
 80090da:	d5fb      	bpl.n	80090d4 <_printf_i+0x1c8>
 80090dc:	8019      	strh	r1, [r3, #0]
 80090de:	2300      	movs	r3, #0
 80090e0:	6123      	str	r3, [r4, #16]
 80090e2:	4615      	mov	r5, r2
 80090e4:	e7ba      	b.n	800905c <_printf_i+0x150>
 80090e6:	682b      	ldr	r3, [r5, #0]
 80090e8:	1d1a      	adds	r2, r3, #4
 80090ea:	602a      	str	r2, [r5, #0]
 80090ec:	681d      	ldr	r5, [r3, #0]
 80090ee:	6862      	ldr	r2, [r4, #4]
 80090f0:	2100      	movs	r1, #0
 80090f2:	4628      	mov	r0, r5
 80090f4:	f7f7 f88c 	bl	8000210 <memchr>
 80090f8:	b108      	cbz	r0, 80090fe <_printf_i+0x1f2>
 80090fa:	1b40      	subs	r0, r0, r5
 80090fc:	6060      	str	r0, [r4, #4]
 80090fe:	6863      	ldr	r3, [r4, #4]
 8009100:	6123      	str	r3, [r4, #16]
 8009102:	2300      	movs	r3, #0
 8009104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009108:	e7a8      	b.n	800905c <_printf_i+0x150>
 800910a:	6923      	ldr	r3, [r4, #16]
 800910c:	462a      	mov	r2, r5
 800910e:	4649      	mov	r1, r9
 8009110:	4640      	mov	r0, r8
 8009112:	47d0      	blx	sl
 8009114:	3001      	adds	r0, #1
 8009116:	d0ab      	beq.n	8009070 <_printf_i+0x164>
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	079b      	lsls	r3, r3, #30
 800911c:	d413      	bmi.n	8009146 <_printf_i+0x23a>
 800911e:	68e0      	ldr	r0, [r4, #12]
 8009120:	9b03      	ldr	r3, [sp, #12]
 8009122:	4298      	cmp	r0, r3
 8009124:	bfb8      	it	lt
 8009126:	4618      	movlt	r0, r3
 8009128:	e7a4      	b.n	8009074 <_printf_i+0x168>
 800912a:	2301      	movs	r3, #1
 800912c:	4632      	mov	r2, r6
 800912e:	4649      	mov	r1, r9
 8009130:	4640      	mov	r0, r8
 8009132:	47d0      	blx	sl
 8009134:	3001      	adds	r0, #1
 8009136:	d09b      	beq.n	8009070 <_printf_i+0x164>
 8009138:	3501      	adds	r5, #1
 800913a:	68e3      	ldr	r3, [r4, #12]
 800913c:	9903      	ldr	r1, [sp, #12]
 800913e:	1a5b      	subs	r3, r3, r1
 8009140:	42ab      	cmp	r3, r5
 8009142:	dcf2      	bgt.n	800912a <_printf_i+0x21e>
 8009144:	e7eb      	b.n	800911e <_printf_i+0x212>
 8009146:	2500      	movs	r5, #0
 8009148:	f104 0619 	add.w	r6, r4, #25
 800914c:	e7f5      	b.n	800913a <_printf_i+0x22e>
 800914e:	bf00      	nop
 8009150:	080c83be 	.word	0x080c83be
 8009154:	080c83cf 	.word	0x080c83cf

08009158 <swapfunc>:
 8009158:	2b02      	cmp	r3, #2
 800915a:	b510      	push	{r4, lr}
 800915c:	d00a      	beq.n	8009174 <swapfunc+0x1c>
 800915e:	0892      	lsrs	r2, r2, #2
 8009160:	3a01      	subs	r2, #1
 8009162:	6803      	ldr	r3, [r0, #0]
 8009164:	680c      	ldr	r4, [r1, #0]
 8009166:	f840 4b04 	str.w	r4, [r0], #4
 800916a:	2a00      	cmp	r2, #0
 800916c:	f841 3b04 	str.w	r3, [r1], #4
 8009170:	dcf6      	bgt.n	8009160 <swapfunc+0x8>
 8009172:	bd10      	pop	{r4, pc}
 8009174:	4402      	add	r2, r0
 8009176:	780c      	ldrb	r4, [r1, #0]
 8009178:	7803      	ldrb	r3, [r0, #0]
 800917a:	f800 4b01 	strb.w	r4, [r0], #1
 800917e:	f801 3b01 	strb.w	r3, [r1], #1
 8009182:	1a13      	subs	r3, r2, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	dcf6      	bgt.n	8009176 <swapfunc+0x1e>
 8009188:	e7f3      	b.n	8009172 <swapfunc+0x1a>

0800918a <med3.constprop.0>:
 800918a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800918c:	460c      	mov	r4, r1
 800918e:	4615      	mov	r5, r2
 8009190:	4607      	mov	r7, r0
 8009192:	461e      	mov	r6, r3
 8009194:	4798      	blx	r3
 8009196:	2800      	cmp	r0, #0
 8009198:	4629      	mov	r1, r5
 800919a:	4620      	mov	r0, r4
 800919c:	da0a      	bge.n	80091b4 <med3.constprop.0+0x2a>
 800919e:	47b0      	blx	r6
 80091a0:	2800      	cmp	r0, #0
 80091a2:	db05      	blt.n	80091b0 <med3.constprop.0+0x26>
 80091a4:	4629      	mov	r1, r5
 80091a6:	4638      	mov	r0, r7
 80091a8:	47b0      	blx	r6
 80091aa:	2800      	cmp	r0, #0
 80091ac:	db0a      	blt.n	80091c4 <med3.constprop.0+0x3a>
 80091ae:	463c      	mov	r4, r7
 80091b0:	4620      	mov	r0, r4
 80091b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091b4:	47b0      	blx	r6
 80091b6:	2800      	cmp	r0, #0
 80091b8:	dcfa      	bgt.n	80091b0 <med3.constprop.0+0x26>
 80091ba:	4629      	mov	r1, r5
 80091bc:	4638      	mov	r0, r7
 80091be:	47b0      	blx	r6
 80091c0:	2800      	cmp	r0, #0
 80091c2:	dbf4      	blt.n	80091ae <med3.constprop.0+0x24>
 80091c4:	462c      	mov	r4, r5
 80091c6:	e7f3      	b.n	80091b0 <med3.constprop.0+0x26>

080091c8 <qsort>:
 80091c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091cc:	469a      	mov	sl, r3
 80091ce:	ea40 0302 	orr.w	r3, r0, r2
 80091d2:	079b      	lsls	r3, r3, #30
 80091d4:	b097      	sub	sp, #92	; 0x5c
 80091d6:	4606      	mov	r6, r0
 80091d8:	4614      	mov	r4, r2
 80091da:	d11a      	bne.n	8009212 <qsort+0x4a>
 80091dc:	f1b2 0804 	subs.w	r8, r2, #4
 80091e0:	bf18      	it	ne
 80091e2:	f04f 0801 	movne.w	r8, #1
 80091e6:	2300      	movs	r3, #0
 80091e8:	9302      	str	r3, [sp, #8]
 80091ea:	1933      	adds	r3, r6, r4
 80091ec:	fb04 f701 	mul.w	r7, r4, r1
 80091f0:	9301      	str	r3, [sp, #4]
 80091f2:	2906      	cmp	r1, #6
 80091f4:	eb06 0307 	add.w	r3, r6, r7
 80091f8:	9303      	str	r3, [sp, #12]
 80091fa:	d82a      	bhi.n	8009252 <qsort+0x8a>
 80091fc:	9b01      	ldr	r3, [sp, #4]
 80091fe:	9a03      	ldr	r2, [sp, #12]
 8009200:	4293      	cmp	r3, r2
 8009202:	d310      	bcc.n	8009226 <qsort+0x5e>
 8009204:	9b02      	ldr	r3, [sp, #8]
 8009206:	2b00      	cmp	r3, #0
 8009208:	f040 811e 	bne.w	8009448 <qsort+0x280>
 800920c:	b017      	add	sp, #92	; 0x5c
 800920e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009212:	f04f 0802 	mov.w	r8, #2
 8009216:	e7e6      	b.n	80091e6 <qsort+0x1e>
 8009218:	4643      	mov	r3, r8
 800921a:	4622      	mov	r2, r4
 800921c:	4639      	mov	r1, r7
 800921e:	4628      	mov	r0, r5
 8009220:	f7ff ff9a 	bl	8009158 <swapfunc>
 8009224:	e00e      	b.n	8009244 <qsort+0x7c>
 8009226:	9d01      	ldr	r5, [sp, #4]
 8009228:	e00d      	b.n	8009246 <qsort+0x7e>
 800922a:	1b2f      	subs	r7, r5, r4
 800922c:	4629      	mov	r1, r5
 800922e:	4638      	mov	r0, r7
 8009230:	47d0      	blx	sl
 8009232:	2800      	cmp	r0, #0
 8009234:	dd09      	ble.n	800924a <qsort+0x82>
 8009236:	f1b8 0f00 	cmp.w	r8, #0
 800923a:	d1ed      	bne.n	8009218 <qsort+0x50>
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	602a      	str	r2, [r5, #0]
 8009242:	603b      	str	r3, [r7, #0]
 8009244:	463d      	mov	r5, r7
 8009246:	42ae      	cmp	r6, r5
 8009248:	d3ef      	bcc.n	800922a <qsort+0x62>
 800924a:	9b01      	ldr	r3, [sp, #4]
 800924c:	4423      	add	r3, r4
 800924e:	9301      	str	r3, [sp, #4]
 8009250:	e7d4      	b.n	80091fc <qsort+0x34>
 8009252:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8009256:	1b3f      	subs	r7, r7, r4
 8009258:	2907      	cmp	r1, #7
 800925a:	fb04 6909 	mla	r9, r4, r9, r6
 800925e:	4437      	add	r7, r6
 8009260:	d022      	beq.n	80092a8 <qsort+0xe0>
 8009262:	2928      	cmp	r1, #40	; 0x28
 8009264:	d945      	bls.n	80092f2 <qsort+0x12a>
 8009266:	08c9      	lsrs	r1, r1, #3
 8009268:	fb04 f501 	mul.w	r5, r4, r1
 800926c:	4653      	mov	r3, sl
 800926e:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8009272:	1971      	adds	r1, r6, r5
 8009274:	4630      	mov	r0, r6
 8009276:	f7ff ff88 	bl	800918a <med3.constprop.0>
 800927a:	4649      	mov	r1, r9
 800927c:	eb09 0205 	add.w	r2, r9, r5
 8009280:	4653      	mov	r3, sl
 8009282:	4683      	mov	fp, r0
 8009284:	1b48      	subs	r0, r1, r5
 8009286:	f7ff ff80 	bl	800918a <med3.constprop.0>
 800928a:	463a      	mov	r2, r7
 800928c:	4681      	mov	r9, r0
 800928e:	4653      	mov	r3, sl
 8009290:	1b79      	subs	r1, r7, r5
 8009292:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8009296:	f7ff ff78 	bl	800918a <med3.constprop.0>
 800929a:	4602      	mov	r2, r0
 800929c:	4649      	mov	r1, r9
 800929e:	4653      	mov	r3, sl
 80092a0:	4658      	mov	r0, fp
 80092a2:	f7ff ff72 	bl	800918a <med3.constprop.0>
 80092a6:	4681      	mov	r9, r0
 80092a8:	f1b8 0f00 	cmp.w	r8, #0
 80092ac:	d124      	bne.n	80092f8 <qsort+0x130>
 80092ae:	6833      	ldr	r3, [r6, #0]
 80092b0:	f8d9 2000 	ldr.w	r2, [r9]
 80092b4:	6032      	str	r2, [r6, #0]
 80092b6:	f8c9 3000 	str.w	r3, [r9]
 80092ba:	eb06 0b04 	add.w	fp, r6, r4
 80092be:	46b9      	mov	r9, r7
 80092c0:	465d      	mov	r5, fp
 80092c2:	2300      	movs	r3, #0
 80092c4:	45bb      	cmp	fp, r7
 80092c6:	d835      	bhi.n	8009334 <qsort+0x16c>
 80092c8:	4631      	mov	r1, r6
 80092ca:	4658      	mov	r0, fp
 80092cc:	9304      	str	r3, [sp, #16]
 80092ce:	47d0      	blx	sl
 80092d0:	2800      	cmp	r0, #0
 80092d2:	9b04      	ldr	r3, [sp, #16]
 80092d4:	dc3e      	bgt.n	8009354 <qsort+0x18c>
 80092d6:	d10a      	bne.n	80092ee <qsort+0x126>
 80092d8:	f1b8 0f00 	cmp.w	r8, #0
 80092dc:	d113      	bne.n	8009306 <qsort+0x13e>
 80092de:	682b      	ldr	r3, [r5, #0]
 80092e0:	f8db 2000 	ldr.w	r2, [fp]
 80092e4:	602a      	str	r2, [r5, #0]
 80092e6:	f8cb 3000 	str.w	r3, [fp]
 80092ea:	4425      	add	r5, r4
 80092ec:	2301      	movs	r3, #1
 80092ee:	44a3      	add	fp, r4
 80092f0:	e7e8      	b.n	80092c4 <qsort+0xfc>
 80092f2:	463a      	mov	r2, r7
 80092f4:	46b3      	mov	fp, r6
 80092f6:	e7d1      	b.n	800929c <qsort+0xd4>
 80092f8:	4643      	mov	r3, r8
 80092fa:	4622      	mov	r2, r4
 80092fc:	4649      	mov	r1, r9
 80092fe:	4630      	mov	r0, r6
 8009300:	f7ff ff2a 	bl	8009158 <swapfunc>
 8009304:	e7d9      	b.n	80092ba <qsort+0xf2>
 8009306:	4643      	mov	r3, r8
 8009308:	4622      	mov	r2, r4
 800930a:	4659      	mov	r1, fp
 800930c:	4628      	mov	r0, r5
 800930e:	f7ff ff23 	bl	8009158 <swapfunc>
 8009312:	e7ea      	b.n	80092ea <qsort+0x122>
 8009314:	d10b      	bne.n	800932e <qsort+0x166>
 8009316:	f1b8 0f00 	cmp.w	r8, #0
 800931a:	d114      	bne.n	8009346 <qsort+0x17e>
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	f8d9 2000 	ldr.w	r2, [r9]
 8009322:	603a      	str	r2, [r7, #0]
 8009324:	f8c9 3000 	str.w	r3, [r9]
 8009328:	eba9 0904 	sub.w	r9, r9, r4
 800932c:	2301      	movs	r3, #1
 800932e:	9f04      	ldr	r7, [sp, #16]
 8009330:	45bb      	cmp	fp, r7
 8009332:	d90f      	bls.n	8009354 <qsort+0x18c>
 8009334:	2b00      	cmp	r3, #0
 8009336:	d143      	bne.n	80093c0 <qsort+0x1f8>
 8009338:	9b01      	ldr	r3, [sp, #4]
 800933a:	9a03      	ldr	r2, [sp, #12]
 800933c:	4293      	cmp	r3, r2
 800933e:	f4bf af61 	bcs.w	8009204 <qsort+0x3c>
 8009342:	9d01      	ldr	r5, [sp, #4]
 8009344:	e036      	b.n	80093b4 <qsort+0x1ec>
 8009346:	4643      	mov	r3, r8
 8009348:	4622      	mov	r2, r4
 800934a:	4649      	mov	r1, r9
 800934c:	4638      	mov	r0, r7
 800934e:	f7ff ff03 	bl	8009158 <swapfunc>
 8009352:	e7e9      	b.n	8009328 <qsort+0x160>
 8009354:	4631      	mov	r1, r6
 8009356:	4638      	mov	r0, r7
 8009358:	9305      	str	r3, [sp, #20]
 800935a:	47d0      	blx	sl
 800935c:	1b3b      	subs	r3, r7, r4
 800935e:	2800      	cmp	r0, #0
 8009360:	9304      	str	r3, [sp, #16]
 8009362:	9b05      	ldr	r3, [sp, #20]
 8009364:	dad6      	bge.n	8009314 <qsort+0x14c>
 8009366:	f1b8 0f00 	cmp.w	r8, #0
 800936a:	d006      	beq.n	800937a <qsort+0x1b2>
 800936c:	4643      	mov	r3, r8
 800936e:	4622      	mov	r2, r4
 8009370:	4639      	mov	r1, r7
 8009372:	4658      	mov	r0, fp
 8009374:	f7ff fef0 	bl	8009158 <swapfunc>
 8009378:	e005      	b.n	8009386 <qsort+0x1be>
 800937a:	f8db 3000 	ldr.w	r3, [fp]
 800937e:	683a      	ldr	r2, [r7, #0]
 8009380:	f8cb 2000 	str.w	r2, [fp]
 8009384:	603b      	str	r3, [r7, #0]
 8009386:	9f04      	ldr	r7, [sp, #16]
 8009388:	e7b0      	b.n	80092ec <qsort+0x124>
 800938a:	4643      	mov	r3, r8
 800938c:	4622      	mov	r2, r4
 800938e:	4639      	mov	r1, r7
 8009390:	4628      	mov	r0, r5
 8009392:	f7ff fee1 	bl	8009158 <swapfunc>
 8009396:	e00c      	b.n	80093b2 <qsort+0x1ea>
 8009398:	1b2f      	subs	r7, r5, r4
 800939a:	4629      	mov	r1, r5
 800939c:	4638      	mov	r0, r7
 800939e:	47d0      	blx	sl
 80093a0:	2800      	cmp	r0, #0
 80093a2:	dd09      	ble.n	80093b8 <qsort+0x1f0>
 80093a4:	f1b8 0f00 	cmp.w	r8, #0
 80093a8:	d1ef      	bne.n	800938a <qsort+0x1c2>
 80093aa:	682b      	ldr	r3, [r5, #0]
 80093ac:	683a      	ldr	r2, [r7, #0]
 80093ae:	602a      	str	r2, [r5, #0]
 80093b0:	603b      	str	r3, [r7, #0]
 80093b2:	463d      	mov	r5, r7
 80093b4:	42ae      	cmp	r6, r5
 80093b6:	d3ef      	bcc.n	8009398 <qsort+0x1d0>
 80093b8:	9b01      	ldr	r3, [sp, #4]
 80093ba:	4423      	add	r3, r4
 80093bc:	9301      	str	r3, [sp, #4]
 80093be:	e7bb      	b.n	8009338 <qsort+0x170>
 80093c0:	ebab 0305 	sub.w	r3, fp, r5
 80093c4:	1baa      	subs	r2, r5, r6
 80093c6:	429a      	cmp	r2, r3
 80093c8:	bfa8      	it	ge
 80093ca:	461a      	movge	r2, r3
 80093cc:	9301      	str	r3, [sp, #4]
 80093ce:	b12a      	cbz	r2, 80093dc <qsort+0x214>
 80093d0:	4643      	mov	r3, r8
 80093d2:	ebab 0102 	sub.w	r1, fp, r2
 80093d6:	4630      	mov	r0, r6
 80093d8:	f7ff febe 	bl	8009158 <swapfunc>
 80093dc:	9b03      	ldr	r3, [sp, #12]
 80093de:	eba3 0209 	sub.w	r2, r3, r9
 80093e2:	eba9 0707 	sub.w	r7, r9, r7
 80093e6:	1b12      	subs	r2, r2, r4
 80093e8:	42ba      	cmp	r2, r7
 80093ea:	bf28      	it	cs
 80093ec:	463a      	movcs	r2, r7
 80093ee:	b12a      	cbz	r2, 80093fc <qsort+0x234>
 80093f0:	9903      	ldr	r1, [sp, #12]
 80093f2:	4643      	mov	r3, r8
 80093f4:	1a89      	subs	r1, r1, r2
 80093f6:	4658      	mov	r0, fp
 80093f8:	f7ff feae 	bl	8009158 <swapfunc>
 80093fc:	9d01      	ldr	r5, [sp, #4]
 80093fe:	9b03      	ldr	r3, [sp, #12]
 8009400:	42af      	cmp	r7, r5
 8009402:	eba3 0007 	sub.w	r0, r3, r7
 8009406:	d904      	bls.n	8009412 <qsort+0x24a>
 8009408:	4633      	mov	r3, r6
 800940a:	463d      	mov	r5, r7
 800940c:	9f01      	ldr	r7, [sp, #4]
 800940e:	4606      	mov	r6, r0
 8009410:	4618      	mov	r0, r3
 8009412:	42a7      	cmp	r7, r4
 8009414:	d921      	bls.n	800945a <qsort+0x292>
 8009416:	fbb7 f1f4 	udiv	r1, r7, r4
 800941a:	9b02      	ldr	r3, [sp, #8]
 800941c:	2b07      	cmp	r3, #7
 800941e:	d80d      	bhi.n	800943c <qsort+0x274>
 8009420:	fbb5 f5f4 	udiv	r5, r5, r4
 8009424:	aa16      	add	r2, sp, #88	; 0x58
 8009426:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800942a:	f843 6c40 	str.w	r6, [r3, #-64]
 800942e:	f843 5c3c 	str.w	r5, [r3, #-60]
 8009432:	9b02      	ldr	r3, [sp, #8]
 8009434:	3301      	adds	r3, #1
 8009436:	9302      	str	r3, [sp, #8]
 8009438:	4606      	mov	r6, r0
 800943a:	e6d6      	b.n	80091ea <qsort+0x22>
 800943c:	4653      	mov	r3, sl
 800943e:	4622      	mov	r2, r4
 8009440:	f7ff fec2 	bl	80091c8 <qsort>
 8009444:	42a5      	cmp	r5, r4
 8009446:	d80b      	bhi.n	8009460 <qsort+0x298>
 8009448:	9b02      	ldr	r3, [sp, #8]
 800944a:	aa16      	add	r2, sp, #88	; 0x58
 800944c:	3b01      	subs	r3, #1
 800944e:	9302      	str	r3, [sp, #8]
 8009450:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009454:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8009458:	e7ee      	b.n	8009438 <qsort+0x270>
 800945a:	42a5      	cmp	r5, r4
 800945c:	f67f aed2 	bls.w	8009204 <qsort+0x3c>
 8009460:	fbb5 f1f4 	udiv	r1, r5, r4
 8009464:	4630      	mov	r0, r6
 8009466:	e7e7      	b.n	8009438 <qsort+0x270>

08009468 <siprintf>:
 8009468:	b40e      	push	{r1, r2, r3}
 800946a:	b500      	push	{lr}
 800946c:	b09c      	sub	sp, #112	; 0x70
 800946e:	ab1d      	add	r3, sp, #116	; 0x74
 8009470:	9002      	str	r0, [sp, #8]
 8009472:	9006      	str	r0, [sp, #24]
 8009474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009478:	4809      	ldr	r0, [pc, #36]	; (80094a0 <siprintf+0x38>)
 800947a:	9107      	str	r1, [sp, #28]
 800947c:	9104      	str	r1, [sp, #16]
 800947e:	4909      	ldr	r1, [pc, #36]	; (80094a4 <siprintf+0x3c>)
 8009480:	f853 2b04 	ldr.w	r2, [r3], #4
 8009484:	9105      	str	r1, [sp, #20]
 8009486:	6800      	ldr	r0, [r0, #0]
 8009488:	9301      	str	r3, [sp, #4]
 800948a:	a902      	add	r1, sp, #8
 800948c:	f001 fb76 	bl	800ab7c <_svfiprintf_r>
 8009490:	9b02      	ldr	r3, [sp, #8]
 8009492:	2200      	movs	r2, #0
 8009494:	701a      	strb	r2, [r3, #0]
 8009496:	b01c      	add	sp, #112	; 0x70
 8009498:	f85d eb04 	ldr.w	lr, [sp], #4
 800949c:	b003      	add	sp, #12
 800949e:	4770      	bx	lr
 80094a0:	20000010 	.word	0x20000010
 80094a4:	ffff0208 	.word	0xffff0208

080094a8 <quorem>:
 80094a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ac:	6903      	ldr	r3, [r0, #16]
 80094ae:	690c      	ldr	r4, [r1, #16]
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	4607      	mov	r7, r0
 80094b4:	f2c0 8081 	blt.w	80095ba <quorem+0x112>
 80094b8:	3c01      	subs	r4, #1
 80094ba:	f101 0814 	add.w	r8, r1, #20
 80094be:	f100 0514 	add.w	r5, r0, #20
 80094c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094c6:	9301      	str	r3, [sp, #4]
 80094c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094d0:	3301      	adds	r3, #1
 80094d2:	429a      	cmp	r2, r3
 80094d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80094d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80094e0:	d331      	bcc.n	8009546 <quorem+0x9e>
 80094e2:	f04f 0e00 	mov.w	lr, #0
 80094e6:	4640      	mov	r0, r8
 80094e8:	46ac      	mov	ip, r5
 80094ea:	46f2      	mov	sl, lr
 80094ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80094f0:	b293      	uxth	r3, r2
 80094f2:	fb06 e303 	mla	r3, r6, r3, lr
 80094f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	ebaa 0303 	sub.w	r3, sl, r3
 8009500:	f8dc a000 	ldr.w	sl, [ip]
 8009504:	0c12      	lsrs	r2, r2, #16
 8009506:	fa13 f38a 	uxtah	r3, r3, sl
 800950a:	fb06 e202 	mla	r2, r6, r2, lr
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	9b00      	ldr	r3, [sp, #0]
 8009512:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009516:	b292      	uxth	r2, r2
 8009518:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800951c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009520:	f8bd 3000 	ldrh.w	r3, [sp]
 8009524:	4581      	cmp	r9, r0
 8009526:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800952a:	f84c 3b04 	str.w	r3, [ip], #4
 800952e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009532:	d2db      	bcs.n	80094ec <quorem+0x44>
 8009534:	f855 300b 	ldr.w	r3, [r5, fp]
 8009538:	b92b      	cbnz	r3, 8009546 <quorem+0x9e>
 800953a:	9b01      	ldr	r3, [sp, #4]
 800953c:	3b04      	subs	r3, #4
 800953e:	429d      	cmp	r5, r3
 8009540:	461a      	mov	r2, r3
 8009542:	d32e      	bcc.n	80095a2 <quorem+0xfa>
 8009544:	613c      	str	r4, [r7, #16]
 8009546:	4638      	mov	r0, r7
 8009548:	f001 f8c4 	bl	800a6d4 <__mcmp>
 800954c:	2800      	cmp	r0, #0
 800954e:	db24      	blt.n	800959a <quorem+0xf2>
 8009550:	3601      	adds	r6, #1
 8009552:	4628      	mov	r0, r5
 8009554:	f04f 0c00 	mov.w	ip, #0
 8009558:	f858 2b04 	ldr.w	r2, [r8], #4
 800955c:	f8d0 e000 	ldr.w	lr, [r0]
 8009560:	b293      	uxth	r3, r2
 8009562:	ebac 0303 	sub.w	r3, ip, r3
 8009566:	0c12      	lsrs	r2, r2, #16
 8009568:	fa13 f38e 	uxtah	r3, r3, lr
 800956c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009570:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009574:	b29b      	uxth	r3, r3
 8009576:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800957a:	45c1      	cmp	r9, r8
 800957c:	f840 3b04 	str.w	r3, [r0], #4
 8009580:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009584:	d2e8      	bcs.n	8009558 <quorem+0xb0>
 8009586:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800958a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800958e:	b922      	cbnz	r2, 800959a <quorem+0xf2>
 8009590:	3b04      	subs	r3, #4
 8009592:	429d      	cmp	r5, r3
 8009594:	461a      	mov	r2, r3
 8009596:	d30a      	bcc.n	80095ae <quorem+0x106>
 8009598:	613c      	str	r4, [r7, #16]
 800959a:	4630      	mov	r0, r6
 800959c:	b003      	add	sp, #12
 800959e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a2:	6812      	ldr	r2, [r2, #0]
 80095a4:	3b04      	subs	r3, #4
 80095a6:	2a00      	cmp	r2, #0
 80095a8:	d1cc      	bne.n	8009544 <quorem+0x9c>
 80095aa:	3c01      	subs	r4, #1
 80095ac:	e7c7      	b.n	800953e <quorem+0x96>
 80095ae:	6812      	ldr	r2, [r2, #0]
 80095b0:	3b04      	subs	r3, #4
 80095b2:	2a00      	cmp	r2, #0
 80095b4:	d1f0      	bne.n	8009598 <quorem+0xf0>
 80095b6:	3c01      	subs	r4, #1
 80095b8:	e7eb      	b.n	8009592 <quorem+0xea>
 80095ba:	2000      	movs	r0, #0
 80095bc:	e7ee      	b.n	800959c <quorem+0xf4>
	...

080095c0 <_dtoa_r>:
 80095c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c4:	ed2d 8b04 	vpush	{d8-d9}
 80095c8:	ec57 6b10 	vmov	r6, r7, d0
 80095cc:	b093      	sub	sp, #76	; 0x4c
 80095ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80095d4:	9106      	str	r1, [sp, #24]
 80095d6:	ee10 aa10 	vmov	sl, s0
 80095da:	4604      	mov	r4, r0
 80095dc:	9209      	str	r2, [sp, #36]	; 0x24
 80095de:	930c      	str	r3, [sp, #48]	; 0x30
 80095e0:	46bb      	mov	fp, r7
 80095e2:	b975      	cbnz	r5, 8009602 <_dtoa_r+0x42>
 80095e4:	2010      	movs	r0, #16
 80095e6:	f000 fddd 	bl	800a1a4 <malloc>
 80095ea:	4602      	mov	r2, r0
 80095ec:	6260      	str	r0, [r4, #36]	; 0x24
 80095ee:	b920      	cbnz	r0, 80095fa <_dtoa_r+0x3a>
 80095f0:	4ba7      	ldr	r3, [pc, #668]	; (8009890 <_dtoa_r+0x2d0>)
 80095f2:	21ea      	movs	r1, #234	; 0xea
 80095f4:	48a7      	ldr	r0, [pc, #668]	; (8009894 <_dtoa_r+0x2d4>)
 80095f6:	f001 fbd1 	bl	800ad9c <__assert_func>
 80095fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80095fe:	6005      	str	r5, [r0, #0]
 8009600:	60c5      	str	r5, [r0, #12]
 8009602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009604:	6819      	ldr	r1, [r3, #0]
 8009606:	b151      	cbz	r1, 800961e <_dtoa_r+0x5e>
 8009608:	685a      	ldr	r2, [r3, #4]
 800960a:	604a      	str	r2, [r1, #4]
 800960c:	2301      	movs	r3, #1
 800960e:	4093      	lsls	r3, r2
 8009610:	608b      	str	r3, [r1, #8]
 8009612:	4620      	mov	r0, r4
 8009614:	f000 fe1c 	bl	800a250 <_Bfree>
 8009618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800961a:	2200      	movs	r2, #0
 800961c:	601a      	str	r2, [r3, #0]
 800961e:	1e3b      	subs	r3, r7, #0
 8009620:	bfaa      	itet	ge
 8009622:	2300      	movge	r3, #0
 8009624:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009628:	f8c8 3000 	strge.w	r3, [r8]
 800962c:	4b9a      	ldr	r3, [pc, #616]	; (8009898 <_dtoa_r+0x2d8>)
 800962e:	bfbc      	itt	lt
 8009630:	2201      	movlt	r2, #1
 8009632:	f8c8 2000 	strlt.w	r2, [r8]
 8009636:	ea33 030b 	bics.w	r3, r3, fp
 800963a:	d11b      	bne.n	8009674 <_dtoa_r+0xb4>
 800963c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800963e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009642:	6013      	str	r3, [r2, #0]
 8009644:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009648:	4333      	orrs	r3, r6
 800964a:	f000 8592 	beq.w	800a172 <_dtoa_r+0xbb2>
 800964e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009650:	b963      	cbnz	r3, 800966c <_dtoa_r+0xac>
 8009652:	4b92      	ldr	r3, [pc, #584]	; (800989c <_dtoa_r+0x2dc>)
 8009654:	e022      	b.n	800969c <_dtoa_r+0xdc>
 8009656:	4b92      	ldr	r3, [pc, #584]	; (80098a0 <_dtoa_r+0x2e0>)
 8009658:	9301      	str	r3, [sp, #4]
 800965a:	3308      	adds	r3, #8
 800965c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800965e:	6013      	str	r3, [r2, #0]
 8009660:	9801      	ldr	r0, [sp, #4]
 8009662:	b013      	add	sp, #76	; 0x4c
 8009664:	ecbd 8b04 	vpop	{d8-d9}
 8009668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966c:	4b8b      	ldr	r3, [pc, #556]	; (800989c <_dtoa_r+0x2dc>)
 800966e:	9301      	str	r3, [sp, #4]
 8009670:	3303      	adds	r3, #3
 8009672:	e7f3      	b.n	800965c <_dtoa_r+0x9c>
 8009674:	2200      	movs	r2, #0
 8009676:	2300      	movs	r3, #0
 8009678:	4650      	mov	r0, sl
 800967a:	4659      	mov	r1, fp
 800967c:	f7f7 fa3c 	bl	8000af8 <__aeabi_dcmpeq>
 8009680:	ec4b ab19 	vmov	d9, sl, fp
 8009684:	4680      	mov	r8, r0
 8009686:	b158      	cbz	r0, 80096a0 <_dtoa_r+0xe0>
 8009688:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800968a:	2301      	movs	r3, #1
 800968c:	6013      	str	r3, [r2, #0]
 800968e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 856b 	beq.w	800a16c <_dtoa_r+0xbac>
 8009696:	4883      	ldr	r0, [pc, #524]	; (80098a4 <_dtoa_r+0x2e4>)
 8009698:	6018      	str	r0, [r3, #0]
 800969a:	1e43      	subs	r3, r0, #1
 800969c:	9301      	str	r3, [sp, #4]
 800969e:	e7df      	b.n	8009660 <_dtoa_r+0xa0>
 80096a0:	ec4b ab10 	vmov	d0, sl, fp
 80096a4:	aa10      	add	r2, sp, #64	; 0x40
 80096a6:	a911      	add	r1, sp, #68	; 0x44
 80096a8:	4620      	mov	r0, r4
 80096aa:	f001 f8b9 	bl	800a820 <__d2b>
 80096ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80096b2:	ee08 0a10 	vmov	s16, r0
 80096b6:	2d00      	cmp	r5, #0
 80096b8:	f000 8084 	beq.w	80097c4 <_dtoa_r+0x204>
 80096bc:	ee19 3a90 	vmov	r3, s19
 80096c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80096c8:	4656      	mov	r6, sl
 80096ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80096ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80096d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80096d6:	4b74      	ldr	r3, [pc, #464]	; (80098a8 <_dtoa_r+0x2e8>)
 80096d8:	2200      	movs	r2, #0
 80096da:	4630      	mov	r0, r6
 80096dc:	4639      	mov	r1, r7
 80096de:	f7f6 fdeb 	bl	80002b8 <__aeabi_dsub>
 80096e2:	a365      	add	r3, pc, #404	; (adr r3, 8009878 <_dtoa_r+0x2b8>)
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	f7f6 ff9e 	bl	8000628 <__aeabi_dmul>
 80096ec:	a364      	add	r3, pc, #400	; (adr r3, 8009880 <_dtoa_r+0x2c0>)
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	f7f6 fde3 	bl	80002bc <__adddf3>
 80096f6:	4606      	mov	r6, r0
 80096f8:	4628      	mov	r0, r5
 80096fa:	460f      	mov	r7, r1
 80096fc:	f7f6 ff2a 	bl	8000554 <__aeabi_i2d>
 8009700:	a361      	add	r3, pc, #388	; (adr r3, 8009888 <_dtoa_r+0x2c8>)
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	f7f6 ff8f 	bl	8000628 <__aeabi_dmul>
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	4630      	mov	r0, r6
 8009710:	4639      	mov	r1, r7
 8009712:	f7f6 fdd3 	bl	80002bc <__adddf3>
 8009716:	4606      	mov	r6, r0
 8009718:	460f      	mov	r7, r1
 800971a:	f7f7 fa35 	bl	8000b88 <__aeabi_d2iz>
 800971e:	2200      	movs	r2, #0
 8009720:	9000      	str	r0, [sp, #0]
 8009722:	2300      	movs	r3, #0
 8009724:	4630      	mov	r0, r6
 8009726:	4639      	mov	r1, r7
 8009728:	f7f7 f9f0 	bl	8000b0c <__aeabi_dcmplt>
 800972c:	b150      	cbz	r0, 8009744 <_dtoa_r+0x184>
 800972e:	9800      	ldr	r0, [sp, #0]
 8009730:	f7f6 ff10 	bl	8000554 <__aeabi_i2d>
 8009734:	4632      	mov	r2, r6
 8009736:	463b      	mov	r3, r7
 8009738:	f7f7 f9de 	bl	8000af8 <__aeabi_dcmpeq>
 800973c:	b910      	cbnz	r0, 8009744 <_dtoa_r+0x184>
 800973e:	9b00      	ldr	r3, [sp, #0]
 8009740:	3b01      	subs	r3, #1
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	9b00      	ldr	r3, [sp, #0]
 8009746:	2b16      	cmp	r3, #22
 8009748:	d85a      	bhi.n	8009800 <_dtoa_r+0x240>
 800974a:	9a00      	ldr	r2, [sp, #0]
 800974c:	4b57      	ldr	r3, [pc, #348]	; (80098ac <_dtoa_r+0x2ec>)
 800974e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	ec51 0b19 	vmov	r0, r1, d9
 800975a:	f7f7 f9d7 	bl	8000b0c <__aeabi_dcmplt>
 800975e:	2800      	cmp	r0, #0
 8009760:	d050      	beq.n	8009804 <_dtoa_r+0x244>
 8009762:	9b00      	ldr	r3, [sp, #0]
 8009764:	3b01      	subs	r3, #1
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	2300      	movs	r3, #0
 800976a:	930b      	str	r3, [sp, #44]	; 0x2c
 800976c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800976e:	1b5d      	subs	r5, r3, r5
 8009770:	1e6b      	subs	r3, r5, #1
 8009772:	9305      	str	r3, [sp, #20]
 8009774:	bf45      	ittet	mi
 8009776:	f1c5 0301 	rsbmi	r3, r5, #1
 800977a:	9304      	strmi	r3, [sp, #16]
 800977c:	2300      	movpl	r3, #0
 800977e:	2300      	movmi	r3, #0
 8009780:	bf4c      	ite	mi
 8009782:	9305      	strmi	r3, [sp, #20]
 8009784:	9304      	strpl	r3, [sp, #16]
 8009786:	9b00      	ldr	r3, [sp, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	db3d      	blt.n	8009808 <_dtoa_r+0x248>
 800978c:	9b05      	ldr	r3, [sp, #20]
 800978e:	9a00      	ldr	r2, [sp, #0]
 8009790:	920a      	str	r2, [sp, #40]	; 0x28
 8009792:	4413      	add	r3, r2
 8009794:	9305      	str	r3, [sp, #20]
 8009796:	2300      	movs	r3, #0
 8009798:	9307      	str	r3, [sp, #28]
 800979a:	9b06      	ldr	r3, [sp, #24]
 800979c:	2b09      	cmp	r3, #9
 800979e:	f200 8089 	bhi.w	80098b4 <_dtoa_r+0x2f4>
 80097a2:	2b05      	cmp	r3, #5
 80097a4:	bfc4      	itt	gt
 80097a6:	3b04      	subgt	r3, #4
 80097a8:	9306      	strgt	r3, [sp, #24]
 80097aa:	9b06      	ldr	r3, [sp, #24]
 80097ac:	f1a3 0302 	sub.w	r3, r3, #2
 80097b0:	bfcc      	ite	gt
 80097b2:	2500      	movgt	r5, #0
 80097b4:	2501      	movle	r5, #1
 80097b6:	2b03      	cmp	r3, #3
 80097b8:	f200 8087 	bhi.w	80098ca <_dtoa_r+0x30a>
 80097bc:	e8df f003 	tbb	[pc, r3]
 80097c0:	59383a2d 	.word	0x59383a2d
 80097c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80097c8:	441d      	add	r5, r3
 80097ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80097ce:	2b20      	cmp	r3, #32
 80097d0:	bfc1      	itttt	gt
 80097d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80097d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80097da:	fa0b f303 	lslgt.w	r3, fp, r3
 80097de:	fa26 f000 	lsrgt.w	r0, r6, r0
 80097e2:	bfda      	itte	le
 80097e4:	f1c3 0320 	rsble	r3, r3, #32
 80097e8:	fa06 f003 	lslle.w	r0, r6, r3
 80097ec:	4318      	orrgt	r0, r3
 80097ee:	f7f6 fea1 	bl	8000534 <__aeabi_ui2d>
 80097f2:	2301      	movs	r3, #1
 80097f4:	4606      	mov	r6, r0
 80097f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80097fa:	3d01      	subs	r5, #1
 80097fc:	930e      	str	r3, [sp, #56]	; 0x38
 80097fe:	e76a      	b.n	80096d6 <_dtoa_r+0x116>
 8009800:	2301      	movs	r3, #1
 8009802:	e7b2      	b.n	800976a <_dtoa_r+0x1aa>
 8009804:	900b      	str	r0, [sp, #44]	; 0x2c
 8009806:	e7b1      	b.n	800976c <_dtoa_r+0x1ac>
 8009808:	9b04      	ldr	r3, [sp, #16]
 800980a:	9a00      	ldr	r2, [sp, #0]
 800980c:	1a9b      	subs	r3, r3, r2
 800980e:	9304      	str	r3, [sp, #16]
 8009810:	4253      	negs	r3, r2
 8009812:	9307      	str	r3, [sp, #28]
 8009814:	2300      	movs	r3, #0
 8009816:	930a      	str	r3, [sp, #40]	; 0x28
 8009818:	e7bf      	b.n	800979a <_dtoa_r+0x1da>
 800981a:	2300      	movs	r3, #0
 800981c:	9308      	str	r3, [sp, #32]
 800981e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009820:	2b00      	cmp	r3, #0
 8009822:	dc55      	bgt.n	80098d0 <_dtoa_r+0x310>
 8009824:	2301      	movs	r3, #1
 8009826:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800982a:	461a      	mov	r2, r3
 800982c:	9209      	str	r2, [sp, #36]	; 0x24
 800982e:	e00c      	b.n	800984a <_dtoa_r+0x28a>
 8009830:	2301      	movs	r3, #1
 8009832:	e7f3      	b.n	800981c <_dtoa_r+0x25c>
 8009834:	2300      	movs	r3, #0
 8009836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009838:	9308      	str	r3, [sp, #32]
 800983a:	9b00      	ldr	r3, [sp, #0]
 800983c:	4413      	add	r3, r2
 800983e:	9302      	str	r3, [sp, #8]
 8009840:	3301      	adds	r3, #1
 8009842:	2b01      	cmp	r3, #1
 8009844:	9303      	str	r3, [sp, #12]
 8009846:	bfb8      	it	lt
 8009848:	2301      	movlt	r3, #1
 800984a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800984c:	2200      	movs	r2, #0
 800984e:	6042      	str	r2, [r0, #4]
 8009850:	2204      	movs	r2, #4
 8009852:	f102 0614 	add.w	r6, r2, #20
 8009856:	429e      	cmp	r6, r3
 8009858:	6841      	ldr	r1, [r0, #4]
 800985a:	d93d      	bls.n	80098d8 <_dtoa_r+0x318>
 800985c:	4620      	mov	r0, r4
 800985e:	f000 fcb7 	bl	800a1d0 <_Balloc>
 8009862:	9001      	str	r0, [sp, #4]
 8009864:	2800      	cmp	r0, #0
 8009866:	d13b      	bne.n	80098e0 <_dtoa_r+0x320>
 8009868:	4b11      	ldr	r3, [pc, #68]	; (80098b0 <_dtoa_r+0x2f0>)
 800986a:	4602      	mov	r2, r0
 800986c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009870:	e6c0      	b.n	80095f4 <_dtoa_r+0x34>
 8009872:	2301      	movs	r3, #1
 8009874:	e7df      	b.n	8009836 <_dtoa_r+0x276>
 8009876:	bf00      	nop
 8009878:	636f4361 	.word	0x636f4361
 800987c:	3fd287a7 	.word	0x3fd287a7
 8009880:	8b60c8b3 	.word	0x8b60c8b3
 8009884:	3fc68a28 	.word	0x3fc68a28
 8009888:	509f79fb 	.word	0x509f79fb
 800988c:	3fd34413 	.word	0x3fd34413
 8009890:	080c83ed 	.word	0x080c83ed
 8009894:	080c8404 	.word	0x080c8404
 8009898:	7ff00000 	.word	0x7ff00000
 800989c:	080c83e9 	.word	0x080c83e9
 80098a0:	080c83e0 	.word	0x080c83e0
 80098a4:	080c83bd 	.word	0x080c83bd
 80098a8:	3ff80000 	.word	0x3ff80000
 80098ac:	080c84f8 	.word	0x080c84f8
 80098b0:	080c845f 	.word	0x080c845f
 80098b4:	2501      	movs	r5, #1
 80098b6:	2300      	movs	r3, #0
 80098b8:	9306      	str	r3, [sp, #24]
 80098ba:	9508      	str	r5, [sp, #32]
 80098bc:	f04f 33ff 	mov.w	r3, #4294967295
 80098c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098c4:	2200      	movs	r2, #0
 80098c6:	2312      	movs	r3, #18
 80098c8:	e7b0      	b.n	800982c <_dtoa_r+0x26c>
 80098ca:	2301      	movs	r3, #1
 80098cc:	9308      	str	r3, [sp, #32]
 80098ce:	e7f5      	b.n	80098bc <_dtoa_r+0x2fc>
 80098d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098d6:	e7b8      	b.n	800984a <_dtoa_r+0x28a>
 80098d8:	3101      	adds	r1, #1
 80098da:	6041      	str	r1, [r0, #4]
 80098dc:	0052      	lsls	r2, r2, #1
 80098de:	e7b8      	b.n	8009852 <_dtoa_r+0x292>
 80098e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098e2:	9a01      	ldr	r2, [sp, #4]
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	9b03      	ldr	r3, [sp, #12]
 80098e8:	2b0e      	cmp	r3, #14
 80098ea:	f200 809d 	bhi.w	8009a28 <_dtoa_r+0x468>
 80098ee:	2d00      	cmp	r5, #0
 80098f0:	f000 809a 	beq.w	8009a28 <_dtoa_r+0x468>
 80098f4:	9b00      	ldr	r3, [sp, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	dd32      	ble.n	8009960 <_dtoa_r+0x3a0>
 80098fa:	4ab7      	ldr	r2, [pc, #732]	; (8009bd8 <_dtoa_r+0x618>)
 80098fc:	f003 030f 	and.w	r3, r3, #15
 8009900:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009904:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009908:	9b00      	ldr	r3, [sp, #0]
 800990a:	05d8      	lsls	r0, r3, #23
 800990c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009910:	d516      	bpl.n	8009940 <_dtoa_r+0x380>
 8009912:	4bb2      	ldr	r3, [pc, #712]	; (8009bdc <_dtoa_r+0x61c>)
 8009914:	ec51 0b19 	vmov	r0, r1, d9
 8009918:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800991c:	f7f6 ffae 	bl	800087c <__aeabi_ddiv>
 8009920:	f007 070f 	and.w	r7, r7, #15
 8009924:	4682      	mov	sl, r0
 8009926:	468b      	mov	fp, r1
 8009928:	2503      	movs	r5, #3
 800992a:	4eac      	ldr	r6, [pc, #688]	; (8009bdc <_dtoa_r+0x61c>)
 800992c:	b957      	cbnz	r7, 8009944 <_dtoa_r+0x384>
 800992e:	4642      	mov	r2, r8
 8009930:	464b      	mov	r3, r9
 8009932:	4650      	mov	r0, sl
 8009934:	4659      	mov	r1, fp
 8009936:	f7f6 ffa1 	bl	800087c <__aeabi_ddiv>
 800993a:	4682      	mov	sl, r0
 800993c:	468b      	mov	fp, r1
 800993e:	e028      	b.n	8009992 <_dtoa_r+0x3d2>
 8009940:	2502      	movs	r5, #2
 8009942:	e7f2      	b.n	800992a <_dtoa_r+0x36a>
 8009944:	07f9      	lsls	r1, r7, #31
 8009946:	d508      	bpl.n	800995a <_dtoa_r+0x39a>
 8009948:	4640      	mov	r0, r8
 800994a:	4649      	mov	r1, r9
 800994c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009950:	f7f6 fe6a 	bl	8000628 <__aeabi_dmul>
 8009954:	3501      	adds	r5, #1
 8009956:	4680      	mov	r8, r0
 8009958:	4689      	mov	r9, r1
 800995a:	107f      	asrs	r7, r7, #1
 800995c:	3608      	adds	r6, #8
 800995e:	e7e5      	b.n	800992c <_dtoa_r+0x36c>
 8009960:	f000 809b 	beq.w	8009a9a <_dtoa_r+0x4da>
 8009964:	9b00      	ldr	r3, [sp, #0]
 8009966:	4f9d      	ldr	r7, [pc, #628]	; (8009bdc <_dtoa_r+0x61c>)
 8009968:	425e      	negs	r6, r3
 800996a:	4b9b      	ldr	r3, [pc, #620]	; (8009bd8 <_dtoa_r+0x618>)
 800996c:	f006 020f 	and.w	r2, r6, #15
 8009970:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009978:	ec51 0b19 	vmov	r0, r1, d9
 800997c:	f7f6 fe54 	bl	8000628 <__aeabi_dmul>
 8009980:	1136      	asrs	r6, r6, #4
 8009982:	4682      	mov	sl, r0
 8009984:	468b      	mov	fp, r1
 8009986:	2300      	movs	r3, #0
 8009988:	2502      	movs	r5, #2
 800998a:	2e00      	cmp	r6, #0
 800998c:	d17a      	bne.n	8009a84 <_dtoa_r+0x4c4>
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1d3      	bne.n	800993a <_dtoa_r+0x37a>
 8009992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009994:	2b00      	cmp	r3, #0
 8009996:	f000 8082 	beq.w	8009a9e <_dtoa_r+0x4de>
 800999a:	4b91      	ldr	r3, [pc, #580]	; (8009be0 <_dtoa_r+0x620>)
 800999c:	2200      	movs	r2, #0
 800999e:	4650      	mov	r0, sl
 80099a0:	4659      	mov	r1, fp
 80099a2:	f7f7 f8b3 	bl	8000b0c <__aeabi_dcmplt>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d079      	beq.n	8009a9e <_dtoa_r+0x4de>
 80099aa:	9b03      	ldr	r3, [sp, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d076      	beq.n	8009a9e <_dtoa_r+0x4de>
 80099b0:	9b02      	ldr	r3, [sp, #8]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	dd36      	ble.n	8009a24 <_dtoa_r+0x464>
 80099b6:	9b00      	ldr	r3, [sp, #0]
 80099b8:	4650      	mov	r0, sl
 80099ba:	4659      	mov	r1, fp
 80099bc:	1e5f      	subs	r7, r3, #1
 80099be:	2200      	movs	r2, #0
 80099c0:	4b88      	ldr	r3, [pc, #544]	; (8009be4 <_dtoa_r+0x624>)
 80099c2:	f7f6 fe31 	bl	8000628 <__aeabi_dmul>
 80099c6:	9e02      	ldr	r6, [sp, #8]
 80099c8:	4682      	mov	sl, r0
 80099ca:	468b      	mov	fp, r1
 80099cc:	3501      	adds	r5, #1
 80099ce:	4628      	mov	r0, r5
 80099d0:	f7f6 fdc0 	bl	8000554 <__aeabi_i2d>
 80099d4:	4652      	mov	r2, sl
 80099d6:	465b      	mov	r3, fp
 80099d8:	f7f6 fe26 	bl	8000628 <__aeabi_dmul>
 80099dc:	4b82      	ldr	r3, [pc, #520]	; (8009be8 <_dtoa_r+0x628>)
 80099de:	2200      	movs	r2, #0
 80099e0:	f7f6 fc6c 	bl	80002bc <__adddf3>
 80099e4:	46d0      	mov	r8, sl
 80099e6:	46d9      	mov	r9, fp
 80099e8:	4682      	mov	sl, r0
 80099ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80099ee:	2e00      	cmp	r6, #0
 80099f0:	d158      	bne.n	8009aa4 <_dtoa_r+0x4e4>
 80099f2:	4b7e      	ldr	r3, [pc, #504]	; (8009bec <_dtoa_r+0x62c>)
 80099f4:	2200      	movs	r2, #0
 80099f6:	4640      	mov	r0, r8
 80099f8:	4649      	mov	r1, r9
 80099fa:	f7f6 fc5d 	bl	80002b8 <__aeabi_dsub>
 80099fe:	4652      	mov	r2, sl
 8009a00:	465b      	mov	r3, fp
 8009a02:	4680      	mov	r8, r0
 8009a04:	4689      	mov	r9, r1
 8009a06:	f7f7 f89f 	bl	8000b48 <__aeabi_dcmpgt>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	f040 8295 	bne.w	8009f3a <_dtoa_r+0x97a>
 8009a10:	4652      	mov	r2, sl
 8009a12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009a16:	4640      	mov	r0, r8
 8009a18:	4649      	mov	r1, r9
 8009a1a:	f7f7 f877 	bl	8000b0c <__aeabi_dcmplt>
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	f040 8289 	bne.w	8009f36 <_dtoa_r+0x976>
 8009a24:	ec5b ab19 	vmov	sl, fp, d9
 8009a28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f2c0 8148 	blt.w	8009cc0 <_dtoa_r+0x700>
 8009a30:	9a00      	ldr	r2, [sp, #0]
 8009a32:	2a0e      	cmp	r2, #14
 8009a34:	f300 8144 	bgt.w	8009cc0 <_dtoa_r+0x700>
 8009a38:	4b67      	ldr	r3, [pc, #412]	; (8009bd8 <_dtoa_r+0x618>)
 8009a3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f280 80d5 	bge.w	8009bf4 <_dtoa_r+0x634>
 8009a4a:	9b03      	ldr	r3, [sp, #12]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f300 80d1 	bgt.w	8009bf4 <_dtoa_r+0x634>
 8009a52:	f040 826f 	bne.w	8009f34 <_dtoa_r+0x974>
 8009a56:	4b65      	ldr	r3, [pc, #404]	; (8009bec <_dtoa_r+0x62c>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	4640      	mov	r0, r8
 8009a5c:	4649      	mov	r1, r9
 8009a5e:	f7f6 fde3 	bl	8000628 <__aeabi_dmul>
 8009a62:	4652      	mov	r2, sl
 8009a64:	465b      	mov	r3, fp
 8009a66:	f7f7 f865 	bl	8000b34 <__aeabi_dcmpge>
 8009a6a:	9e03      	ldr	r6, [sp, #12]
 8009a6c:	4637      	mov	r7, r6
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	f040 8245 	bne.w	8009efe <_dtoa_r+0x93e>
 8009a74:	9d01      	ldr	r5, [sp, #4]
 8009a76:	2331      	movs	r3, #49	; 0x31
 8009a78:	f805 3b01 	strb.w	r3, [r5], #1
 8009a7c:	9b00      	ldr	r3, [sp, #0]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	e240      	b.n	8009f06 <_dtoa_r+0x946>
 8009a84:	07f2      	lsls	r2, r6, #31
 8009a86:	d505      	bpl.n	8009a94 <_dtoa_r+0x4d4>
 8009a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a8c:	f7f6 fdcc 	bl	8000628 <__aeabi_dmul>
 8009a90:	3501      	adds	r5, #1
 8009a92:	2301      	movs	r3, #1
 8009a94:	1076      	asrs	r6, r6, #1
 8009a96:	3708      	adds	r7, #8
 8009a98:	e777      	b.n	800998a <_dtoa_r+0x3ca>
 8009a9a:	2502      	movs	r5, #2
 8009a9c:	e779      	b.n	8009992 <_dtoa_r+0x3d2>
 8009a9e:	9f00      	ldr	r7, [sp, #0]
 8009aa0:	9e03      	ldr	r6, [sp, #12]
 8009aa2:	e794      	b.n	80099ce <_dtoa_r+0x40e>
 8009aa4:	9901      	ldr	r1, [sp, #4]
 8009aa6:	4b4c      	ldr	r3, [pc, #304]	; (8009bd8 <_dtoa_r+0x618>)
 8009aa8:	4431      	add	r1, r6
 8009aaa:	910d      	str	r1, [sp, #52]	; 0x34
 8009aac:	9908      	ldr	r1, [sp, #32]
 8009aae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ab2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ab6:	2900      	cmp	r1, #0
 8009ab8:	d043      	beq.n	8009b42 <_dtoa_r+0x582>
 8009aba:	494d      	ldr	r1, [pc, #308]	; (8009bf0 <_dtoa_r+0x630>)
 8009abc:	2000      	movs	r0, #0
 8009abe:	f7f6 fedd 	bl	800087c <__aeabi_ddiv>
 8009ac2:	4652      	mov	r2, sl
 8009ac4:	465b      	mov	r3, fp
 8009ac6:	f7f6 fbf7 	bl	80002b8 <__aeabi_dsub>
 8009aca:	9d01      	ldr	r5, [sp, #4]
 8009acc:	4682      	mov	sl, r0
 8009ace:	468b      	mov	fp, r1
 8009ad0:	4649      	mov	r1, r9
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	f7f7 f858 	bl	8000b88 <__aeabi_d2iz>
 8009ad8:	4606      	mov	r6, r0
 8009ada:	f7f6 fd3b 	bl	8000554 <__aeabi_i2d>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4640      	mov	r0, r8
 8009ae4:	4649      	mov	r1, r9
 8009ae6:	f7f6 fbe7 	bl	80002b8 <__aeabi_dsub>
 8009aea:	3630      	adds	r6, #48	; 0x30
 8009aec:	f805 6b01 	strb.w	r6, [r5], #1
 8009af0:	4652      	mov	r2, sl
 8009af2:	465b      	mov	r3, fp
 8009af4:	4680      	mov	r8, r0
 8009af6:	4689      	mov	r9, r1
 8009af8:	f7f7 f808 	bl	8000b0c <__aeabi_dcmplt>
 8009afc:	2800      	cmp	r0, #0
 8009afe:	d163      	bne.n	8009bc8 <_dtoa_r+0x608>
 8009b00:	4642      	mov	r2, r8
 8009b02:	464b      	mov	r3, r9
 8009b04:	4936      	ldr	r1, [pc, #216]	; (8009be0 <_dtoa_r+0x620>)
 8009b06:	2000      	movs	r0, #0
 8009b08:	f7f6 fbd6 	bl	80002b8 <__aeabi_dsub>
 8009b0c:	4652      	mov	r2, sl
 8009b0e:	465b      	mov	r3, fp
 8009b10:	f7f6 fffc 	bl	8000b0c <__aeabi_dcmplt>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	f040 80b5 	bne.w	8009c84 <_dtoa_r+0x6c4>
 8009b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b1c:	429d      	cmp	r5, r3
 8009b1e:	d081      	beq.n	8009a24 <_dtoa_r+0x464>
 8009b20:	4b30      	ldr	r3, [pc, #192]	; (8009be4 <_dtoa_r+0x624>)
 8009b22:	2200      	movs	r2, #0
 8009b24:	4650      	mov	r0, sl
 8009b26:	4659      	mov	r1, fp
 8009b28:	f7f6 fd7e 	bl	8000628 <__aeabi_dmul>
 8009b2c:	4b2d      	ldr	r3, [pc, #180]	; (8009be4 <_dtoa_r+0x624>)
 8009b2e:	4682      	mov	sl, r0
 8009b30:	468b      	mov	fp, r1
 8009b32:	4640      	mov	r0, r8
 8009b34:	4649      	mov	r1, r9
 8009b36:	2200      	movs	r2, #0
 8009b38:	f7f6 fd76 	bl	8000628 <__aeabi_dmul>
 8009b3c:	4680      	mov	r8, r0
 8009b3e:	4689      	mov	r9, r1
 8009b40:	e7c6      	b.n	8009ad0 <_dtoa_r+0x510>
 8009b42:	4650      	mov	r0, sl
 8009b44:	4659      	mov	r1, fp
 8009b46:	f7f6 fd6f 	bl	8000628 <__aeabi_dmul>
 8009b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b4c:	9d01      	ldr	r5, [sp, #4]
 8009b4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b50:	4682      	mov	sl, r0
 8009b52:	468b      	mov	fp, r1
 8009b54:	4649      	mov	r1, r9
 8009b56:	4640      	mov	r0, r8
 8009b58:	f7f7 f816 	bl	8000b88 <__aeabi_d2iz>
 8009b5c:	4606      	mov	r6, r0
 8009b5e:	f7f6 fcf9 	bl	8000554 <__aeabi_i2d>
 8009b62:	3630      	adds	r6, #48	; 0x30
 8009b64:	4602      	mov	r2, r0
 8009b66:	460b      	mov	r3, r1
 8009b68:	4640      	mov	r0, r8
 8009b6a:	4649      	mov	r1, r9
 8009b6c:	f7f6 fba4 	bl	80002b8 <__aeabi_dsub>
 8009b70:	f805 6b01 	strb.w	r6, [r5], #1
 8009b74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b76:	429d      	cmp	r5, r3
 8009b78:	4680      	mov	r8, r0
 8009b7a:	4689      	mov	r9, r1
 8009b7c:	f04f 0200 	mov.w	r2, #0
 8009b80:	d124      	bne.n	8009bcc <_dtoa_r+0x60c>
 8009b82:	4b1b      	ldr	r3, [pc, #108]	; (8009bf0 <_dtoa_r+0x630>)
 8009b84:	4650      	mov	r0, sl
 8009b86:	4659      	mov	r1, fp
 8009b88:	f7f6 fb98 	bl	80002bc <__adddf3>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4640      	mov	r0, r8
 8009b92:	4649      	mov	r1, r9
 8009b94:	f7f6 ffd8 	bl	8000b48 <__aeabi_dcmpgt>
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	d173      	bne.n	8009c84 <_dtoa_r+0x6c4>
 8009b9c:	4652      	mov	r2, sl
 8009b9e:	465b      	mov	r3, fp
 8009ba0:	4913      	ldr	r1, [pc, #76]	; (8009bf0 <_dtoa_r+0x630>)
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	f7f6 fb88 	bl	80002b8 <__aeabi_dsub>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	460b      	mov	r3, r1
 8009bac:	4640      	mov	r0, r8
 8009bae:	4649      	mov	r1, r9
 8009bb0:	f7f6 ffac 	bl	8000b0c <__aeabi_dcmplt>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	f43f af35 	beq.w	8009a24 <_dtoa_r+0x464>
 8009bba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009bbc:	1e6b      	subs	r3, r5, #1
 8009bbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bc0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009bc4:	2b30      	cmp	r3, #48	; 0x30
 8009bc6:	d0f8      	beq.n	8009bba <_dtoa_r+0x5fa>
 8009bc8:	9700      	str	r7, [sp, #0]
 8009bca:	e049      	b.n	8009c60 <_dtoa_r+0x6a0>
 8009bcc:	4b05      	ldr	r3, [pc, #20]	; (8009be4 <_dtoa_r+0x624>)
 8009bce:	f7f6 fd2b 	bl	8000628 <__aeabi_dmul>
 8009bd2:	4680      	mov	r8, r0
 8009bd4:	4689      	mov	r9, r1
 8009bd6:	e7bd      	b.n	8009b54 <_dtoa_r+0x594>
 8009bd8:	080c84f8 	.word	0x080c84f8
 8009bdc:	080c84d0 	.word	0x080c84d0
 8009be0:	3ff00000 	.word	0x3ff00000
 8009be4:	40240000 	.word	0x40240000
 8009be8:	401c0000 	.word	0x401c0000
 8009bec:	40140000 	.word	0x40140000
 8009bf0:	3fe00000 	.word	0x3fe00000
 8009bf4:	9d01      	ldr	r5, [sp, #4]
 8009bf6:	4656      	mov	r6, sl
 8009bf8:	465f      	mov	r7, fp
 8009bfa:	4642      	mov	r2, r8
 8009bfc:	464b      	mov	r3, r9
 8009bfe:	4630      	mov	r0, r6
 8009c00:	4639      	mov	r1, r7
 8009c02:	f7f6 fe3b 	bl	800087c <__aeabi_ddiv>
 8009c06:	f7f6 ffbf 	bl	8000b88 <__aeabi_d2iz>
 8009c0a:	4682      	mov	sl, r0
 8009c0c:	f7f6 fca2 	bl	8000554 <__aeabi_i2d>
 8009c10:	4642      	mov	r2, r8
 8009c12:	464b      	mov	r3, r9
 8009c14:	f7f6 fd08 	bl	8000628 <__aeabi_dmul>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	4639      	mov	r1, r7
 8009c20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009c24:	f7f6 fb48 	bl	80002b8 <__aeabi_dsub>
 8009c28:	f805 6b01 	strb.w	r6, [r5], #1
 8009c2c:	9e01      	ldr	r6, [sp, #4]
 8009c2e:	9f03      	ldr	r7, [sp, #12]
 8009c30:	1bae      	subs	r6, r5, r6
 8009c32:	42b7      	cmp	r7, r6
 8009c34:	4602      	mov	r2, r0
 8009c36:	460b      	mov	r3, r1
 8009c38:	d135      	bne.n	8009ca6 <_dtoa_r+0x6e6>
 8009c3a:	f7f6 fb3f 	bl	80002bc <__adddf3>
 8009c3e:	4642      	mov	r2, r8
 8009c40:	464b      	mov	r3, r9
 8009c42:	4606      	mov	r6, r0
 8009c44:	460f      	mov	r7, r1
 8009c46:	f7f6 ff7f 	bl	8000b48 <__aeabi_dcmpgt>
 8009c4a:	b9d0      	cbnz	r0, 8009c82 <_dtoa_r+0x6c2>
 8009c4c:	4642      	mov	r2, r8
 8009c4e:	464b      	mov	r3, r9
 8009c50:	4630      	mov	r0, r6
 8009c52:	4639      	mov	r1, r7
 8009c54:	f7f6 ff50 	bl	8000af8 <__aeabi_dcmpeq>
 8009c58:	b110      	cbz	r0, 8009c60 <_dtoa_r+0x6a0>
 8009c5a:	f01a 0f01 	tst.w	sl, #1
 8009c5e:	d110      	bne.n	8009c82 <_dtoa_r+0x6c2>
 8009c60:	4620      	mov	r0, r4
 8009c62:	ee18 1a10 	vmov	r1, s16
 8009c66:	f000 faf3 	bl	800a250 <_Bfree>
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	9800      	ldr	r0, [sp, #0]
 8009c6e:	702b      	strb	r3, [r5, #0]
 8009c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c72:	3001      	adds	r0, #1
 8009c74:	6018      	str	r0, [r3, #0]
 8009c76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f43f acf1 	beq.w	8009660 <_dtoa_r+0xa0>
 8009c7e:	601d      	str	r5, [r3, #0]
 8009c80:	e4ee      	b.n	8009660 <_dtoa_r+0xa0>
 8009c82:	9f00      	ldr	r7, [sp, #0]
 8009c84:	462b      	mov	r3, r5
 8009c86:	461d      	mov	r5, r3
 8009c88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c8c:	2a39      	cmp	r2, #57	; 0x39
 8009c8e:	d106      	bne.n	8009c9e <_dtoa_r+0x6de>
 8009c90:	9a01      	ldr	r2, [sp, #4]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d1f7      	bne.n	8009c86 <_dtoa_r+0x6c6>
 8009c96:	9901      	ldr	r1, [sp, #4]
 8009c98:	2230      	movs	r2, #48	; 0x30
 8009c9a:	3701      	adds	r7, #1
 8009c9c:	700a      	strb	r2, [r1, #0]
 8009c9e:	781a      	ldrb	r2, [r3, #0]
 8009ca0:	3201      	adds	r2, #1
 8009ca2:	701a      	strb	r2, [r3, #0]
 8009ca4:	e790      	b.n	8009bc8 <_dtoa_r+0x608>
 8009ca6:	4ba6      	ldr	r3, [pc, #664]	; (8009f40 <_dtoa_r+0x980>)
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f7f6 fcbd 	bl	8000628 <__aeabi_dmul>
 8009cae:	2200      	movs	r2, #0
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	4606      	mov	r6, r0
 8009cb4:	460f      	mov	r7, r1
 8009cb6:	f7f6 ff1f 	bl	8000af8 <__aeabi_dcmpeq>
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	d09d      	beq.n	8009bfa <_dtoa_r+0x63a>
 8009cbe:	e7cf      	b.n	8009c60 <_dtoa_r+0x6a0>
 8009cc0:	9a08      	ldr	r2, [sp, #32]
 8009cc2:	2a00      	cmp	r2, #0
 8009cc4:	f000 80d7 	beq.w	8009e76 <_dtoa_r+0x8b6>
 8009cc8:	9a06      	ldr	r2, [sp, #24]
 8009cca:	2a01      	cmp	r2, #1
 8009ccc:	f300 80ba 	bgt.w	8009e44 <_dtoa_r+0x884>
 8009cd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cd2:	2a00      	cmp	r2, #0
 8009cd4:	f000 80b2 	beq.w	8009e3c <_dtoa_r+0x87c>
 8009cd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009cdc:	9e07      	ldr	r6, [sp, #28]
 8009cde:	9d04      	ldr	r5, [sp, #16]
 8009ce0:	9a04      	ldr	r2, [sp, #16]
 8009ce2:	441a      	add	r2, r3
 8009ce4:	9204      	str	r2, [sp, #16]
 8009ce6:	9a05      	ldr	r2, [sp, #20]
 8009ce8:	2101      	movs	r1, #1
 8009cea:	441a      	add	r2, r3
 8009cec:	4620      	mov	r0, r4
 8009cee:	9205      	str	r2, [sp, #20]
 8009cf0:	f000 fb66 	bl	800a3c0 <__i2b>
 8009cf4:	4607      	mov	r7, r0
 8009cf6:	2d00      	cmp	r5, #0
 8009cf8:	dd0c      	ble.n	8009d14 <_dtoa_r+0x754>
 8009cfa:	9b05      	ldr	r3, [sp, #20]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	dd09      	ble.n	8009d14 <_dtoa_r+0x754>
 8009d00:	42ab      	cmp	r3, r5
 8009d02:	9a04      	ldr	r2, [sp, #16]
 8009d04:	bfa8      	it	ge
 8009d06:	462b      	movge	r3, r5
 8009d08:	1ad2      	subs	r2, r2, r3
 8009d0a:	9204      	str	r2, [sp, #16]
 8009d0c:	9a05      	ldr	r2, [sp, #20]
 8009d0e:	1aed      	subs	r5, r5, r3
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	9305      	str	r3, [sp, #20]
 8009d14:	9b07      	ldr	r3, [sp, #28]
 8009d16:	b31b      	cbz	r3, 8009d60 <_dtoa_r+0x7a0>
 8009d18:	9b08      	ldr	r3, [sp, #32]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f000 80af 	beq.w	8009e7e <_dtoa_r+0x8be>
 8009d20:	2e00      	cmp	r6, #0
 8009d22:	dd13      	ble.n	8009d4c <_dtoa_r+0x78c>
 8009d24:	4639      	mov	r1, r7
 8009d26:	4632      	mov	r2, r6
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f000 fc09 	bl	800a540 <__pow5mult>
 8009d2e:	ee18 2a10 	vmov	r2, s16
 8009d32:	4601      	mov	r1, r0
 8009d34:	4607      	mov	r7, r0
 8009d36:	4620      	mov	r0, r4
 8009d38:	f000 fb58 	bl	800a3ec <__multiply>
 8009d3c:	ee18 1a10 	vmov	r1, s16
 8009d40:	4680      	mov	r8, r0
 8009d42:	4620      	mov	r0, r4
 8009d44:	f000 fa84 	bl	800a250 <_Bfree>
 8009d48:	ee08 8a10 	vmov	s16, r8
 8009d4c:	9b07      	ldr	r3, [sp, #28]
 8009d4e:	1b9a      	subs	r2, r3, r6
 8009d50:	d006      	beq.n	8009d60 <_dtoa_r+0x7a0>
 8009d52:	ee18 1a10 	vmov	r1, s16
 8009d56:	4620      	mov	r0, r4
 8009d58:	f000 fbf2 	bl	800a540 <__pow5mult>
 8009d5c:	ee08 0a10 	vmov	s16, r0
 8009d60:	2101      	movs	r1, #1
 8009d62:	4620      	mov	r0, r4
 8009d64:	f000 fb2c 	bl	800a3c0 <__i2b>
 8009d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	4606      	mov	r6, r0
 8009d6e:	f340 8088 	ble.w	8009e82 <_dtoa_r+0x8c2>
 8009d72:	461a      	mov	r2, r3
 8009d74:	4601      	mov	r1, r0
 8009d76:	4620      	mov	r0, r4
 8009d78:	f000 fbe2 	bl	800a540 <__pow5mult>
 8009d7c:	9b06      	ldr	r3, [sp, #24]
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	4606      	mov	r6, r0
 8009d82:	f340 8081 	ble.w	8009e88 <_dtoa_r+0x8c8>
 8009d86:	f04f 0800 	mov.w	r8, #0
 8009d8a:	6933      	ldr	r3, [r6, #16]
 8009d8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d90:	6918      	ldr	r0, [r3, #16]
 8009d92:	f000 fac5 	bl	800a320 <__hi0bits>
 8009d96:	f1c0 0020 	rsb	r0, r0, #32
 8009d9a:	9b05      	ldr	r3, [sp, #20]
 8009d9c:	4418      	add	r0, r3
 8009d9e:	f010 001f 	ands.w	r0, r0, #31
 8009da2:	f000 8092 	beq.w	8009eca <_dtoa_r+0x90a>
 8009da6:	f1c0 0320 	rsb	r3, r0, #32
 8009daa:	2b04      	cmp	r3, #4
 8009dac:	f340 808a 	ble.w	8009ec4 <_dtoa_r+0x904>
 8009db0:	f1c0 001c 	rsb	r0, r0, #28
 8009db4:	9b04      	ldr	r3, [sp, #16]
 8009db6:	4403      	add	r3, r0
 8009db8:	9304      	str	r3, [sp, #16]
 8009dba:	9b05      	ldr	r3, [sp, #20]
 8009dbc:	4403      	add	r3, r0
 8009dbe:	4405      	add	r5, r0
 8009dc0:	9305      	str	r3, [sp, #20]
 8009dc2:	9b04      	ldr	r3, [sp, #16]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	dd07      	ble.n	8009dd8 <_dtoa_r+0x818>
 8009dc8:	ee18 1a10 	vmov	r1, s16
 8009dcc:	461a      	mov	r2, r3
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f000 fc10 	bl	800a5f4 <__lshift>
 8009dd4:	ee08 0a10 	vmov	s16, r0
 8009dd8:	9b05      	ldr	r3, [sp, #20]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	dd05      	ble.n	8009dea <_dtoa_r+0x82a>
 8009dde:	4631      	mov	r1, r6
 8009de0:	461a      	mov	r2, r3
 8009de2:	4620      	mov	r0, r4
 8009de4:	f000 fc06 	bl	800a5f4 <__lshift>
 8009de8:	4606      	mov	r6, r0
 8009dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d06e      	beq.n	8009ece <_dtoa_r+0x90e>
 8009df0:	ee18 0a10 	vmov	r0, s16
 8009df4:	4631      	mov	r1, r6
 8009df6:	f000 fc6d 	bl	800a6d4 <__mcmp>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	da67      	bge.n	8009ece <_dtoa_r+0x90e>
 8009dfe:	9b00      	ldr	r3, [sp, #0]
 8009e00:	3b01      	subs	r3, #1
 8009e02:	ee18 1a10 	vmov	r1, s16
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	220a      	movs	r2, #10
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	f000 fa41 	bl	800a294 <__multadd>
 8009e12:	9b08      	ldr	r3, [sp, #32]
 8009e14:	ee08 0a10 	vmov	s16, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f000 81b1 	beq.w	800a180 <_dtoa_r+0xbc0>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	4639      	mov	r1, r7
 8009e22:	220a      	movs	r2, #10
 8009e24:	4620      	mov	r0, r4
 8009e26:	f000 fa35 	bl	800a294 <__multadd>
 8009e2a:	9b02      	ldr	r3, [sp, #8]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	4607      	mov	r7, r0
 8009e30:	f300 808e 	bgt.w	8009f50 <_dtoa_r+0x990>
 8009e34:	9b06      	ldr	r3, [sp, #24]
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	dc51      	bgt.n	8009ede <_dtoa_r+0x91e>
 8009e3a:	e089      	b.n	8009f50 <_dtoa_r+0x990>
 8009e3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e42:	e74b      	b.n	8009cdc <_dtoa_r+0x71c>
 8009e44:	9b03      	ldr	r3, [sp, #12]
 8009e46:	1e5e      	subs	r6, r3, #1
 8009e48:	9b07      	ldr	r3, [sp, #28]
 8009e4a:	42b3      	cmp	r3, r6
 8009e4c:	bfbf      	itttt	lt
 8009e4e:	9b07      	ldrlt	r3, [sp, #28]
 8009e50:	9607      	strlt	r6, [sp, #28]
 8009e52:	1af2      	sublt	r2, r6, r3
 8009e54:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009e56:	bfb6      	itet	lt
 8009e58:	189b      	addlt	r3, r3, r2
 8009e5a:	1b9e      	subge	r6, r3, r6
 8009e5c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009e5e:	9b03      	ldr	r3, [sp, #12]
 8009e60:	bfb8      	it	lt
 8009e62:	2600      	movlt	r6, #0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	bfb7      	itett	lt
 8009e68:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009e6c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009e70:	1a9d      	sublt	r5, r3, r2
 8009e72:	2300      	movlt	r3, #0
 8009e74:	e734      	b.n	8009ce0 <_dtoa_r+0x720>
 8009e76:	9e07      	ldr	r6, [sp, #28]
 8009e78:	9d04      	ldr	r5, [sp, #16]
 8009e7a:	9f08      	ldr	r7, [sp, #32]
 8009e7c:	e73b      	b.n	8009cf6 <_dtoa_r+0x736>
 8009e7e:	9a07      	ldr	r2, [sp, #28]
 8009e80:	e767      	b.n	8009d52 <_dtoa_r+0x792>
 8009e82:	9b06      	ldr	r3, [sp, #24]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	dc18      	bgt.n	8009eba <_dtoa_r+0x8fa>
 8009e88:	f1ba 0f00 	cmp.w	sl, #0
 8009e8c:	d115      	bne.n	8009eba <_dtoa_r+0x8fa>
 8009e8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e92:	b993      	cbnz	r3, 8009eba <_dtoa_r+0x8fa>
 8009e94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e98:	0d1b      	lsrs	r3, r3, #20
 8009e9a:	051b      	lsls	r3, r3, #20
 8009e9c:	b183      	cbz	r3, 8009ec0 <_dtoa_r+0x900>
 8009e9e:	9b04      	ldr	r3, [sp, #16]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	9304      	str	r3, [sp, #16]
 8009ea4:	9b05      	ldr	r3, [sp, #20]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	9305      	str	r3, [sp, #20]
 8009eaa:	f04f 0801 	mov.w	r8, #1
 8009eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f47f af6a 	bne.w	8009d8a <_dtoa_r+0x7ca>
 8009eb6:	2001      	movs	r0, #1
 8009eb8:	e76f      	b.n	8009d9a <_dtoa_r+0x7da>
 8009eba:	f04f 0800 	mov.w	r8, #0
 8009ebe:	e7f6      	b.n	8009eae <_dtoa_r+0x8ee>
 8009ec0:	4698      	mov	r8, r3
 8009ec2:	e7f4      	b.n	8009eae <_dtoa_r+0x8ee>
 8009ec4:	f43f af7d 	beq.w	8009dc2 <_dtoa_r+0x802>
 8009ec8:	4618      	mov	r0, r3
 8009eca:	301c      	adds	r0, #28
 8009ecc:	e772      	b.n	8009db4 <_dtoa_r+0x7f4>
 8009ece:	9b03      	ldr	r3, [sp, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	dc37      	bgt.n	8009f44 <_dtoa_r+0x984>
 8009ed4:	9b06      	ldr	r3, [sp, #24]
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	dd34      	ble.n	8009f44 <_dtoa_r+0x984>
 8009eda:	9b03      	ldr	r3, [sp, #12]
 8009edc:	9302      	str	r3, [sp, #8]
 8009ede:	9b02      	ldr	r3, [sp, #8]
 8009ee0:	b96b      	cbnz	r3, 8009efe <_dtoa_r+0x93e>
 8009ee2:	4631      	mov	r1, r6
 8009ee4:	2205      	movs	r2, #5
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f000 f9d4 	bl	800a294 <__multadd>
 8009eec:	4601      	mov	r1, r0
 8009eee:	4606      	mov	r6, r0
 8009ef0:	ee18 0a10 	vmov	r0, s16
 8009ef4:	f000 fbee 	bl	800a6d4 <__mcmp>
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	f73f adbb 	bgt.w	8009a74 <_dtoa_r+0x4b4>
 8009efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f00:	9d01      	ldr	r5, [sp, #4]
 8009f02:	43db      	mvns	r3, r3
 8009f04:	9300      	str	r3, [sp, #0]
 8009f06:	f04f 0800 	mov.w	r8, #0
 8009f0a:	4631      	mov	r1, r6
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f000 f99f 	bl	800a250 <_Bfree>
 8009f12:	2f00      	cmp	r7, #0
 8009f14:	f43f aea4 	beq.w	8009c60 <_dtoa_r+0x6a0>
 8009f18:	f1b8 0f00 	cmp.w	r8, #0
 8009f1c:	d005      	beq.n	8009f2a <_dtoa_r+0x96a>
 8009f1e:	45b8      	cmp	r8, r7
 8009f20:	d003      	beq.n	8009f2a <_dtoa_r+0x96a>
 8009f22:	4641      	mov	r1, r8
 8009f24:	4620      	mov	r0, r4
 8009f26:	f000 f993 	bl	800a250 <_Bfree>
 8009f2a:	4639      	mov	r1, r7
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	f000 f98f 	bl	800a250 <_Bfree>
 8009f32:	e695      	b.n	8009c60 <_dtoa_r+0x6a0>
 8009f34:	2600      	movs	r6, #0
 8009f36:	4637      	mov	r7, r6
 8009f38:	e7e1      	b.n	8009efe <_dtoa_r+0x93e>
 8009f3a:	9700      	str	r7, [sp, #0]
 8009f3c:	4637      	mov	r7, r6
 8009f3e:	e599      	b.n	8009a74 <_dtoa_r+0x4b4>
 8009f40:	40240000 	.word	0x40240000
 8009f44:	9b08      	ldr	r3, [sp, #32]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f000 80ca 	beq.w	800a0e0 <_dtoa_r+0xb20>
 8009f4c:	9b03      	ldr	r3, [sp, #12]
 8009f4e:	9302      	str	r3, [sp, #8]
 8009f50:	2d00      	cmp	r5, #0
 8009f52:	dd05      	ble.n	8009f60 <_dtoa_r+0x9a0>
 8009f54:	4639      	mov	r1, r7
 8009f56:	462a      	mov	r2, r5
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f000 fb4b 	bl	800a5f4 <__lshift>
 8009f5e:	4607      	mov	r7, r0
 8009f60:	f1b8 0f00 	cmp.w	r8, #0
 8009f64:	d05b      	beq.n	800a01e <_dtoa_r+0xa5e>
 8009f66:	6879      	ldr	r1, [r7, #4]
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f000 f931 	bl	800a1d0 <_Balloc>
 8009f6e:	4605      	mov	r5, r0
 8009f70:	b928      	cbnz	r0, 8009f7e <_dtoa_r+0x9be>
 8009f72:	4b87      	ldr	r3, [pc, #540]	; (800a190 <_dtoa_r+0xbd0>)
 8009f74:	4602      	mov	r2, r0
 8009f76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009f7a:	f7ff bb3b 	b.w	80095f4 <_dtoa_r+0x34>
 8009f7e:	693a      	ldr	r2, [r7, #16]
 8009f80:	3202      	adds	r2, #2
 8009f82:	0092      	lsls	r2, r2, #2
 8009f84:	f107 010c 	add.w	r1, r7, #12
 8009f88:	300c      	adds	r0, #12
 8009f8a:	f000 f913 	bl	800a1b4 <memcpy>
 8009f8e:	2201      	movs	r2, #1
 8009f90:	4629      	mov	r1, r5
 8009f92:	4620      	mov	r0, r4
 8009f94:	f000 fb2e 	bl	800a5f4 <__lshift>
 8009f98:	9b01      	ldr	r3, [sp, #4]
 8009f9a:	f103 0901 	add.w	r9, r3, #1
 8009f9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	9305      	str	r3, [sp, #20]
 8009fa6:	f00a 0301 	and.w	r3, sl, #1
 8009faa:	46b8      	mov	r8, r7
 8009fac:	9304      	str	r3, [sp, #16]
 8009fae:	4607      	mov	r7, r0
 8009fb0:	4631      	mov	r1, r6
 8009fb2:	ee18 0a10 	vmov	r0, s16
 8009fb6:	f7ff fa77 	bl	80094a8 <quorem>
 8009fba:	4641      	mov	r1, r8
 8009fbc:	9002      	str	r0, [sp, #8]
 8009fbe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009fc2:	ee18 0a10 	vmov	r0, s16
 8009fc6:	f000 fb85 	bl	800a6d4 <__mcmp>
 8009fca:	463a      	mov	r2, r7
 8009fcc:	9003      	str	r0, [sp, #12]
 8009fce:	4631      	mov	r1, r6
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	f000 fb9b 	bl	800a70c <__mdiff>
 8009fd6:	68c2      	ldr	r2, [r0, #12]
 8009fd8:	f109 3bff 	add.w	fp, r9, #4294967295
 8009fdc:	4605      	mov	r5, r0
 8009fde:	bb02      	cbnz	r2, 800a022 <_dtoa_r+0xa62>
 8009fe0:	4601      	mov	r1, r0
 8009fe2:	ee18 0a10 	vmov	r0, s16
 8009fe6:	f000 fb75 	bl	800a6d4 <__mcmp>
 8009fea:	4602      	mov	r2, r0
 8009fec:	4629      	mov	r1, r5
 8009fee:	4620      	mov	r0, r4
 8009ff0:	9207      	str	r2, [sp, #28]
 8009ff2:	f000 f92d 	bl	800a250 <_Bfree>
 8009ff6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009ffa:	ea43 0102 	orr.w	r1, r3, r2
 8009ffe:	9b04      	ldr	r3, [sp, #16]
 800a000:	430b      	orrs	r3, r1
 800a002:	464d      	mov	r5, r9
 800a004:	d10f      	bne.n	800a026 <_dtoa_r+0xa66>
 800a006:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a00a:	d02a      	beq.n	800a062 <_dtoa_r+0xaa2>
 800a00c:	9b03      	ldr	r3, [sp, #12]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	dd02      	ble.n	800a018 <_dtoa_r+0xa58>
 800a012:	9b02      	ldr	r3, [sp, #8]
 800a014:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a018:	f88b a000 	strb.w	sl, [fp]
 800a01c:	e775      	b.n	8009f0a <_dtoa_r+0x94a>
 800a01e:	4638      	mov	r0, r7
 800a020:	e7ba      	b.n	8009f98 <_dtoa_r+0x9d8>
 800a022:	2201      	movs	r2, #1
 800a024:	e7e2      	b.n	8009fec <_dtoa_r+0xa2c>
 800a026:	9b03      	ldr	r3, [sp, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	db04      	blt.n	800a036 <_dtoa_r+0xa76>
 800a02c:	9906      	ldr	r1, [sp, #24]
 800a02e:	430b      	orrs	r3, r1
 800a030:	9904      	ldr	r1, [sp, #16]
 800a032:	430b      	orrs	r3, r1
 800a034:	d122      	bne.n	800a07c <_dtoa_r+0xabc>
 800a036:	2a00      	cmp	r2, #0
 800a038:	ddee      	ble.n	800a018 <_dtoa_r+0xa58>
 800a03a:	ee18 1a10 	vmov	r1, s16
 800a03e:	2201      	movs	r2, #1
 800a040:	4620      	mov	r0, r4
 800a042:	f000 fad7 	bl	800a5f4 <__lshift>
 800a046:	4631      	mov	r1, r6
 800a048:	ee08 0a10 	vmov	s16, r0
 800a04c:	f000 fb42 	bl	800a6d4 <__mcmp>
 800a050:	2800      	cmp	r0, #0
 800a052:	dc03      	bgt.n	800a05c <_dtoa_r+0xa9c>
 800a054:	d1e0      	bne.n	800a018 <_dtoa_r+0xa58>
 800a056:	f01a 0f01 	tst.w	sl, #1
 800a05a:	d0dd      	beq.n	800a018 <_dtoa_r+0xa58>
 800a05c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a060:	d1d7      	bne.n	800a012 <_dtoa_r+0xa52>
 800a062:	2339      	movs	r3, #57	; 0x39
 800a064:	f88b 3000 	strb.w	r3, [fp]
 800a068:	462b      	mov	r3, r5
 800a06a:	461d      	mov	r5, r3
 800a06c:	3b01      	subs	r3, #1
 800a06e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a072:	2a39      	cmp	r2, #57	; 0x39
 800a074:	d071      	beq.n	800a15a <_dtoa_r+0xb9a>
 800a076:	3201      	adds	r2, #1
 800a078:	701a      	strb	r2, [r3, #0]
 800a07a:	e746      	b.n	8009f0a <_dtoa_r+0x94a>
 800a07c:	2a00      	cmp	r2, #0
 800a07e:	dd07      	ble.n	800a090 <_dtoa_r+0xad0>
 800a080:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a084:	d0ed      	beq.n	800a062 <_dtoa_r+0xaa2>
 800a086:	f10a 0301 	add.w	r3, sl, #1
 800a08a:	f88b 3000 	strb.w	r3, [fp]
 800a08e:	e73c      	b.n	8009f0a <_dtoa_r+0x94a>
 800a090:	9b05      	ldr	r3, [sp, #20]
 800a092:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a096:	4599      	cmp	r9, r3
 800a098:	d047      	beq.n	800a12a <_dtoa_r+0xb6a>
 800a09a:	ee18 1a10 	vmov	r1, s16
 800a09e:	2300      	movs	r3, #0
 800a0a0:	220a      	movs	r2, #10
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f000 f8f6 	bl	800a294 <__multadd>
 800a0a8:	45b8      	cmp	r8, r7
 800a0aa:	ee08 0a10 	vmov	s16, r0
 800a0ae:	f04f 0300 	mov.w	r3, #0
 800a0b2:	f04f 020a 	mov.w	r2, #10
 800a0b6:	4641      	mov	r1, r8
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	d106      	bne.n	800a0ca <_dtoa_r+0xb0a>
 800a0bc:	f000 f8ea 	bl	800a294 <__multadd>
 800a0c0:	4680      	mov	r8, r0
 800a0c2:	4607      	mov	r7, r0
 800a0c4:	f109 0901 	add.w	r9, r9, #1
 800a0c8:	e772      	b.n	8009fb0 <_dtoa_r+0x9f0>
 800a0ca:	f000 f8e3 	bl	800a294 <__multadd>
 800a0ce:	4639      	mov	r1, r7
 800a0d0:	4680      	mov	r8, r0
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	220a      	movs	r2, #10
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f000 f8dc 	bl	800a294 <__multadd>
 800a0dc:	4607      	mov	r7, r0
 800a0de:	e7f1      	b.n	800a0c4 <_dtoa_r+0xb04>
 800a0e0:	9b03      	ldr	r3, [sp, #12]
 800a0e2:	9302      	str	r3, [sp, #8]
 800a0e4:	9d01      	ldr	r5, [sp, #4]
 800a0e6:	ee18 0a10 	vmov	r0, s16
 800a0ea:	4631      	mov	r1, r6
 800a0ec:	f7ff f9dc 	bl	80094a8 <quorem>
 800a0f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a0f4:	9b01      	ldr	r3, [sp, #4]
 800a0f6:	f805 ab01 	strb.w	sl, [r5], #1
 800a0fa:	1aea      	subs	r2, r5, r3
 800a0fc:	9b02      	ldr	r3, [sp, #8]
 800a0fe:	4293      	cmp	r3, r2
 800a100:	dd09      	ble.n	800a116 <_dtoa_r+0xb56>
 800a102:	ee18 1a10 	vmov	r1, s16
 800a106:	2300      	movs	r3, #0
 800a108:	220a      	movs	r2, #10
 800a10a:	4620      	mov	r0, r4
 800a10c:	f000 f8c2 	bl	800a294 <__multadd>
 800a110:	ee08 0a10 	vmov	s16, r0
 800a114:	e7e7      	b.n	800a0e6 <_dtoa_r+0xb26>
 800a116:	9b02      	ldr	r3, [sp, #8]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	bfc8      	it	gt
 800a11c:	461d      	movgt	r5, r3
 800a11e:	9b01      	ldr	r3, [sp, #4]
 800a120:	bfd8      	it	le
 800a122:	2501      	movle	r5, #1
 800a124:	441d      	add	r5, r3
 800a126:	f04f 0800 	mov.w	r8, #0
 800a12a:	ee18 1a10 	vmov	r1, s16
 800a12e:	2201      	movs	r2, #1
 800a130:	4620      	mov	r0, r4
 800a132:	f000 fa5f 	bl	800a5f4 <__lshift>
 800a136:	4631      	mov	r1, r6
 800a138:	ee08 0a10 	vmov	s16, r0
 800a13c:	f000 faca 	bl	800a6d4 <__mcmp>
 800a140:	2800      	cmp	r0, #0
 800a142:	dc91      	bgt.n	800a068 <_dtoa_r+0xaa8>
 800a144:	d102      	bne.n	800a14c <_dtoa_r+0xb8c>
 800a146:	f01a 0f01 	tst.w	sl, #1
 800a14a:	d18d      	bne.n	800a068 <_dtoa_r+0xaa8>
 800a14c:	462b      	mov	r3, r5
 800a14e:	461d      	mov	r5, r3
 800a150:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a154:	2a30      	cmp	r2, #48	; 0x30
 800a156:	d0fa      	beq.n	800a14e <_dtoa_r+0xb8e>
 800a158:	e6d7      	b.n	8009f0a <_dtoa_r+0x94a>
 800a15a:	9a01      	ldr	r2, [sp, #4]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d184      	bne.n	800a06a <_dtoa_r+0xaaa>
 800a160:	9b00      	ldr	r3, [sp, #0]
 800a162:	3301      	adds	r3, #1
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	2331      	movs	r3, #49	; 0x31
 800a168:	7013      	strb	r3, [r2, #0]
 800a16a:	e6ce      	b.n	8009f0a <_dtoa_r+0x94a>
 800a16c:	4b09      	ldr	r3, [pc, #36]	; (800a194 <_dtoa_r+0xbd4>)
 800a16e:	f7ff ba95 	b.w	800969c <_dtoa_r+0xdc>
 800a172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a174:	2b00      	cmp	r3, #0
 800a176:	f47f aa6e 	bne.w	8009656 <_dtoa_r+0x96>
 800a17a:	4b07      	ldr	r3, [pc, #28]	; (800a198 <_dtoa_r+0xbd8>)
 800a17c:	f7ff ba8e 	b.w	800969c <_dtoa_r+0xdc>
 800a180:	9b02      	ldr	r3, [sp, #8]
 800a182:	2b00      	cmp	r3, #0
 800a184:	dcae      	bgt.n	800a0e4 <_dtoa_r+0xb24>
 800a186:	9b06      	ldr	r3, [sp, #24]
 800a188:	2b02      	cmp	r3, #2
 800a18a:	f73f aea8 	bgt.w	8009ede <_dtoa_r+0x91e>
 800a18e:	e7a9      	b.n	800a0e4 <_dtoa_r+0xb24>
 800a190:	080c845f 	.word	0x080c845f
 800a194:	080c83bc 	.word	0x080c83bc
 800a198:	080c83e0 	.word	0x080c83e0

0800a19c <_localeconv_r>:
 800a19c:	4800      	ldr	r0, [pc, #0]	; (800a1a0 <_localeconv_r+0x4>)
 800a19e:	4770      	bx	lr
 800a1a0:	20000164 	.word	0x20000164

0800a1a4 <malloc>:
 800a1a4:	4b02      	ldr	r3, [pc, #8]	; (800a1b0 <malloc+0xc>)
 800a1a6:	4601      	mov	r1, r0
 800a1a8:	6818      	ldr	r0, [r3, #0]
 800a1aa:	f000 bc17 	b.w	800a9dc <_malloc_r>
 800a1ae:	bf00      	nop
 800a1b0:	20000010 	.word	0x20000010

0800a1b4 <memcpy>:
 800a1b4:	440a      	add	r2, r1
 800a1b6:	4291      	cmp	r1, r2
 800a1b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1bc:	d100      	bne.n	800a1c0 <memcpy+0xc>
 800a1be:	4770      	bx	lr
 800a1c0:	b510      	push	{r4, lr}
 800a1c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1ca:	4291      	cmp	r1, r2
 800a1cc:	d1f9      	bne.n	800a1c2 <memcpy+0xe>
 800a1ce:	bd10      	pop	{r4, pc}

0800a1d0 <_Balloc>:
 800a1d0:	b570      	push	{r4, r5, r6, lr}
 800a1d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	460d      	mov	r5, r1
 800a1d8:	b976      	cbnz	r6, 800a1f8 <_Balloc+0x28>
 800a1da:	2010      	movs	r0, #16
 800a1dc:	f7ff ffe2 	bl	800a1a4 <malloc>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	6260      	str	r0, [r4, #36]	; 0x24
 800a1e4:	b920      	cbnz	r0, 800a1f0 <_Balloc+0x20>
 800a1e6:	4b18      	ldr	r3, [pc, #96]	; (800a248 <_Balloc+0x78>)
 800a1e8:	4818      	ldr	r0, [pc, #96]	; (800a24c <_Balloc+0x7c>)
 800a1ea:	2166      	movs	r1, #102	; 0x66
 800a1ec:	f000 fdd6 	bl	800ad9c <__assert_func>
 800a1f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1f4:	6006      	str	r6, [r0, #0]
 800a1f6:	60c6      	str	r6, [r0, #12]
 800a1f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1fa:	68f3      	ldr	r3, [r6, #12]
 800a1fc:	b183      	cbz	r3, 800a220 <_Balloc+0x50>
 800a1fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a206:	b9b8      	cbnz	r0, 800a238 <_Balloc+0x68>
 800a208:	2101      	movs	r1, #1
 800a20a:	fa01 f605 	lsl.w	r6, r1, r5
 800a20e:	1d72      	adds	r2, r6, #5
 800a210:	0092      	lsls	r2, r2, #2
 800a212:	4620      	mov	r0, r4
 800a214:	f000 fb60 	bl	800a8d8 <_calloc_r>
 800a218:	b160      	cbz	r0, 800a234 <_Balloc+0x64>
 800a21a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a21e:	e00e      	b.n	800a23e <_Balloc+0x6e>
 800a220:	2221      	movs	r2, #33	; 0x21
 800a222:	2104      	movs	r1, #4
 800a224:	4620      	mov	r0, r4
 800a226:	f000 fb57 	bl	800a8d8 <_calloc_r>
 800a22a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a22c:	60f0      	str	r0, [r6, #12]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1e4      	bne.n	800a1fe <_Balloc+0x2e>
 800a234:	2000      	movs	r0, #0
 800a236:	bd70      	pop	{r4, r5, r6, pc}
 800a238:	6802      	ldr	r2, [r0, #0]
 800a23a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a23e:	2300      	movs	r3, #0
 800a240:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a244:	e7f7      	b.n	800a236 <_Balloc+0x66>
 800a246:	bf00      	nop
 800a248:	080c83ed 	.word	0x080c83ed
 800a24c:	080c8470 	.word	0x080c8470

0800a250 <_Bfree>:
 800a250:	b570      	push	{r4, r5, r6, lr}
 800a252:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a254:	4605      	mov	r5, r0
 800a256:	460c      	mov	r4, r1
 800a258:	b976      	cbnz	r6, 800a278 <_Bfree+0x28>
 800a25a:	2010      	movs	r0, #16
 800a25c:	f7ff ffa2 	bl	800a1a4 <malloc>
 800a260:	4602      	mov	r2, r0
 800a262:	6268      	str	r0, [r5, #36]	; 0x24
 800a264:	b920      	cbnz	r0, 800a270 <_Bfree+0x20>
 800a266:	4b09      	ldr	r3, [pc, #36]	; (800a28c <_Bfree+0x3c>)
 800a268:	4809      	ldr	r0, [pc, #36]	; (800a290 <_Bfree+0x40>)
 800a26a:	218a      	movs	r1, #138	; 0x8a
 800a26c:	f000 fd96 	bl	800ad9c <__assert_func>
 800a270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a274:	6006      	str	r6, [r0, #0]
 800a276:	60c6      	str	r6, [r0, #12]
 800a278:	b13c      	cbz	r4, 800a28a <_Bfree+0x3a>
 800a27a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a27c:	6862      	ldr	r2, [r4, #4]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a284:	6021      	str	r1, [r4, #0]
 800a286:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a28a:	bd70      	pop	{r4, r5, r6, pc}
 800a28c:	080c83ed 	.word	0x080c83ed
 800a290:	080c8470 	.word	0x080c8470

0800a294 <__multadd>:
 800a294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a298:	690d      	ldr	r5, [r1, #16]
 800a29a:	4607      	mov	r7, r0
 800a29c:	460c      	mov	r4, r1
 800a29e:	461e      	mov	r6, r3
 800a2a0:	f101 0c14 	add.w	ip, r1, #20
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	f8dc 3000 	ldr.w	r3, [ip]
 800a2aa:	b299      	uxth	r1, r3
 800a2ac:	fb02 6101 	mla	r1, r2, r1, r6
 800a2b0:	0c1e      	lsrs	r6, r3, #16
 800a2b2:	0c0b      	lsrs	r3, r1, #16
 800a2b4:	fb02 3306 	mla	r3, r2, r6, r3
 800a2b8:	b289      	uxth	r1, r1
 800a2ba:	3001      	adds	r0, #1
 800a2bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2c0:	4285      	cmp	r5, r0
 800a2c2:	f84c 1b04 	str.w	r1, [ip], #4
 800a2c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2ca:	dcec      	bgt.n	800a2a6 <__multadd+0x12>
 800a2cc:	b30e      	cbz	r6, 800a312 <__multadd+0x7e>
 800a2ce:	68a3      	ldr	r3, [r4, #8]
 800a2d0:	42ab      	cmp	r3, r5
 800a2d2:	dc19      	bgt.n	800a308 <__multadd+0x74>
 800a2d4:	6861      	ldr	r1, [r4, #4]
 800a2d6:	4638      	mov	r0, r7
 800a2d8:	3101      	adds	r1, #1
 800a2da:	f7ff ff79 	bl	800a1d0 <_Balloc>
 800a2de:	4680      	mov	r8, r0
 800a2e0:	b928      	cbnz	r0, 800a2ee <__multadd+0x5a>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	4b0c      	ldr	r3, [pc, #48]	; (800a318 <__multadd+0x84>)
 800a2e6:	480d      	ldr	r0, [pc, #52]	; (800a31c <__multadd+0x88>)
 800a2e8:	21b5      	movs	r1, #181	; 0xb5
 800a2ea:	f000 fd57 	bl	800ad9c <__assert_func>
 800a2ee:	6922      	ldr	r2, [r4, #16]
 800a2f0:	3202      	adds	r2, #2
 800a2f2:	f104 010c 	add.w	r1, r4, #12
 800a2f6:	0092      	lsls	r2, r2, #2
 800a2f8:	300c      	adds	r0, #12
 800a2fa:	f7ff ff5b 	bl	800a1b4 <memcpy>
 800a2fe:	4621      	mov	r1, r4
 800a300:	4638      	mov	r0, r7
 800a302:	f7ff ffa5 	bl	800a250 <_Bfree>
 800a306:	4644      	mov	r4, r8
 800a308:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a30c:	3501      	adds	r5, #1
 800a30e:	615e      	str	r6, [r3, #20]
 800a310:	6125      	str	r5, [r4, #16]
 800a312:	4620      	mov	r0, r4
 800a314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a318:	080c845f 	.word	0x080c845f
 800a31c:	080c8470 	.word	0x080c8470

0800a320 <__hi0bits>:
 800a320:	0c03      	lsrs	r3, r0, #16
 800a322:	041b      	lsls	r3, r3, #16
 800a324:	b9d3      	cbnz	r3, 800a35c <__hi0bits+0x3c>
 800a326:	0400      	lsls	r0, r0, #16
 800a328:	2310      	movs	r3, #16
 800a32a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a32e:	bf04      	itt	eq
 800a330:	0200      	lsleq	r0, r0, #8
 800a332:	3308      	addeq	r3, #8
 800a334:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a338:	bf04      	itt	eq
 800a33a:	0100      	lsleq	r0, r0, #4
 800a33c:	3304      	addeq	r3, #4
 800a33e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a342:	bf04      	itt	eq
 800a344:	0080      	lsleq	r0, r0, #2
 800a346:	3302      	addeq	r3, #2
 800a348:	2800      	cmp	r0, #0
 800a34a:	db05      	blt.n	800a358 <__hi0bits+0x38>
 800a34c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a350:	f103 0301 	add.w	r3, r3, #1
 800a354:	bf08      	it	eq
 800a356:	2320      	moveq	r3, #32
 800a358:	4618      	mov	r0, r3
 800a35a:	4770      	bx	lr
 800a35c:	2300      	movs	r3, #0
 800a35e:	e7e4      	b.n	800a32a <__hi0bits+0xa>

0800a360 <__lo0bits>:
 800a360:	6803      	ldr	r3, [r0, #0]
 800a362:	f013 0207 	ands.w	r2, r3, #7
 800a366:	4601      	mov	r1, r0
 800a368:	d00b      	beq.n	800a382 <__lo0bits+0x22>
 800a36a:	07da      	lsls	r2, r3, #31
 800a36c:	d423      	bmi.n	800a3b6 <__lo0bits+0x56>
 800a36e:	0798      	lsls	r0, r3, #30
 800a370:	bf49      	itett	mi
 800a372:	085b      	lsrmi	r3, r3, #1
 800a374:	089b      	lsrpl	r3, r3, #2
 800a376:	2001      	movmi	r0, #1
 800a378:	600b      	strmi	r3, [r1, #0]
 800a37a:	bf5c      	itt	pl
 800a37c:	600b      	strpl	r3, [r1, #0]
 800a37e:	2002      	movpl	r0, #2
 800a380:	4770      	bx	lr
 800a382:	b298      	uxth	r0, r3
 800a384:	b9a8      	cbnz	r0, 800a3b2 <__lo0bits+0x52>
 800a386:	0c1b      	lsrs	r3, r3, #16
 800a388:	2010      	movs	r0, #16
 800a38a:	b2da      	uxtb	r2, r3
 800a38c:	b90a      	cbnz	r2, 800a392 <__lo0bits+0x32>
 800a38e:	3008      	adds	r0, #8
 800a390:	0a1b      	lsrs	r3, r3, #8
 800a392:	071a      	lsls	r2, r3, #28
 800a394:	bf04      	itt	eq
 800a396:	091b      	lsreq	r3, r3, #4
 800a398:	3004      	addeq	r0, #4
 800a39a:	079a      	lsls	r2, r3, #30
 800a39c:	bf04      	itt	eq
 800a39e:	089b      	lsreq	r3, r3, #2
 800a3a0:	3002      	addeq	r0, #2
 800a3a2:	07da      	lsls	r2, r3, #31
 800a3a4:	d403      	bmi.n	800a3ae <__lo0bits+0x4e>
 800a3a6:	085b      	lsrs	r3, r3, #1
 800a3a8:	f100 0001 	add.w	r0, r0, #1
 800a3ac:	d005      	beq.n	800a3ba <__lo0bits+0x5a>
 800a3ae:	600b      	str	r3, [r1, #0]
 800a3b0:	4770      	bx	lr
 800a3b2:	4610      	mov	r0, r2
 800a3b4:	e7e9      	b.n	800a38a <__lo0bits+0x2a>
 800a3b6:	2000      	movs	r0, #0
 800a3b8:	4770      	bx	lr
 800a3ba:	2020      	movs	r0, #32
 800a3bc:	4770      	bx	lr
	...

0800a3c0 <__i2b>:
 800a3c0:	b510      	push	{r4, lr}
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	2101      	movs	r1, #1
 800a3c6:	f7ff ff03 	bl	800a1d0 <_Balloc>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	b928      	cbnz	r0, 800a3da <__i2b+0x1a>
 800a3ce:	4b05      	ldr	r3, [pc, #20]	; (800a3e4 <__i2b+0x24>)
 800a3d0:	4805      	ldr	r0, [pc, #20]	; (800a3e8 <__i2b+0x28>)
 800a3d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a3d6:	f000 fce1 	bl	800ad9c <__assert_func>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	6144      	str	r4, [r0, #20]
 800a3de:	6103      	str	r3, [r0, #16]
 800a3e0:	bd10      	pop	{r4, pc}
 800a3e2:	bf00      	nop
 800a3e4:	080c845f 	.word	0x080c845f
 800a3e8:	080c8470 	.word	0x080c8470

0800a3ec <__multiply>:
 800a3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f0:	4691      	mov	r9, r2
 800a3f2:	690a      	ldr	r2, [r1, #16]
 800a3f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	bfb8      	it	lt
 800a3fc:	460b      	movlt	r3, r1
 800a3fe:	460c      	mov	r4, r1
 800a400:	bfbc      	itt	lt
 800a402:	464c      	movlt	r4, r9
 800a404:	4699      	movlt	r9, r3
 800a406:	6927      	ldr	r7, [r4, #16]
 800a408:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a40c:	68a3      	ldr	r3, [r4, #8]
 800a40e:	6861      	ldr	r1, [r4, #4]
 800a410:	eb07 060a 	add.w	r6, r7, sl
 800a414:	42b3      	cmp	r3, r6
 800a416:	b085      	sub	sp, #20
 800a418:	bfb8      	it	lt
 800a41a:	3101      	addlt	r1, #1
 800a41c:	f7ff fed8 	bl	800a1d0 <_Balloc>
 800a420:	b930      	cbnz	r0, 800a430 <__multiply+0x44>
 800a422:	4602      	mov	r2, r0
 800a424:	4b44      	ldr	r3, [pc, #272]	; (800a538 <__multiply+0x14c>)
 800a426:	4845      	ldr	r0, [pc, #276]	; (800a53c <__multiply+0x150>)
 800a428:	f240 115d 	movw	r1, #349	; 0x15d
 800a42c:	f000 fcb6 	bl	800ad9c <__assert_func>
 800a430:	f100 0514 	add.w	r5, r0, #20
 800a434:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a438:	462b      	mov	r3, r5
 800a43a:	2200      	movs	r2, #0
 800a43c:	4543      	cmp	r3, r8
 800a43e:	d321      	bcc.n	800a484 <__multiply+0x98>
 800a440:	f104 0314 	add.w	r3, r4, #20
 800a444:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a448:	f109 0314 	add.w	r3, r9, #20
 800a44c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a450:	9202      	str	r2, [sp, #8]
 800a452:	1b3a      	subs	r2, r7, r4
 800a454:	3a15      	subs	r2, #21
 800a456:	f022 0203 	bic.w	r2, r2, #3
 800a45a:	3204      	adds	r2, #4
 800a45c:	f104 0115 	add.w	r1, r4, #21
 800a460:	428f      	cmp	r7, r1
 800a462:	bf38      	it	cc
 800a464:	2204      	movcc	r2, #4
 800a466:	9201      	str	r2, [sp, #4]
 800a468:	9a02      	ldr	r2, [sp, #8]
 800a46a:	9303      	str	r3, [sp, #12]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d80c      	bhi.n	800a48a <__multiply+0x9e>
 800a470:	2e00      	cmp	r6, #0
 800a472:	dd03      	ble.n	800a47c <__multiply+0x90>
 800a474:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d05a      	beq.n	800a532 <__multiply+0x146>
 800a47c:	6106      	str	r6, [r0, #16]
 800a47e:	b005      	add	sp, #20
 800a480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a484:	f843 2b04 	str.w	r2, [r3], #4
 800a488:	e7d8      	b.n	800a43c <__multiply+0x50>
 800a48a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a48e:	f1ba 0f00 	cmp.w	sl, #0
 800a492:	d024      	beq.n	800a4de <__multiply+0xf2>
 800a494:	f104 0e14 	add.w	lr, r4, #20
 800a498:	46a9      	mov	r9, r5
 800a49a:	f04f 0c00 	mov.w	ip, #0
 800a49e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a4a2:	f8d9 1000 	ldr.w	r1, [r9]
 800a4a6:	fa1f fb82 	uxth.w	fp, r2
 800a4aa:	b289      	uxth	r1, r1
 800a4ac:	fb0a 110b 	mla	r1, sl, fp, r1
 800a4b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a4b4:	f8d9 2000 	ldr.w	r2, [r9]
 800a4b8:	4461      	add	r1, ip
 800a4ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4be:	fb0a c20b 	mla	r2, sl, fp, ip
 800a4c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a4c6:	b289      	uxth	r1, r1
 800a4c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a4cc:	4577      	cmp	r7, lr
 800a4ce:	f849 1b04 	str.w	r1, [r9], #4
 800a4d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4d6:	d8e2      	bhi.n	800a49e <__multiply+0xb2>
 800a4d8:	9a01      	ldr	r2, [sp, #4]
 800a4da:	f845 c002 	str.w	ip, [r5, r2]
 800a4de:	9a03      	ldr	r2, [sp, #12]
 800a4e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	f1b9 0f00 	cmp.w	r9, #0
 800a4ea:	d020      	beq.n	800a52e <__multiply+0x142>
 800a4ec:	6829      	ldr	r1, [r5, #0]
 800a4ee:	f104 0c14 	add.w	ip, r4, #20
 800a4f2:	46ae      	mov	lr, r5
 800a4f4:	f04f 0a00 	mov.w	sl, #0
 800a4f8:	f8bc b000 	ldrh.w	fp, [ip]
 800a4fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a500:	fb09 220b 	mla	r2, r9, fp, r2
 800a504:	4492      	add	sl, r2
 800a506:	b289      	uxth	r1, r1
 800a508:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a50c:	f84e 1b04 	str.w	r1, [lr], #4
 800a510:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a514:	f8be 1000 	ldrh.w	r1, [lr]
 800a518:	0c12      	lsrs	r2, r2, #16
 800a51a:	fb09 1102 	mla	r1, r9, r2, r1
 800a51e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a522:	4567      	cmp	r7, ip
 800a524:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a528:	d8e6      	bhi.n	800a4f8 <__multiply+0x10c>
 800a52a:	9a01      	ldr	r2, [sp, #4]
 800a52c:	50a9      	str	r1, [r5, r2]
 800a52e:	3504      	adds	r5, #4
 800a530:	e79a      	b.n	800a468 <__multiply+0x7c>
 800a532:	3e01      	subs	r6, #1
 800a534:	e79c      	b.n	800a470 <__multiply+0x84>
 800a536:	bf00      	nop
 800a538:	080c845f 	.word	0x080c845f
 800a53c:	080c8470 	.word	0x080c8470

0800a540 <__pow5mult>:
 800a540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a544:	4615      	mov	r5, r2
 800a546:	f012 0203 	ands.w	r2, r2, #3
 800a54a:	4606      	mov	r6, r0
 800a54c:	460f      	mov	r7, r1
 800a54e:	d007      	beq.n	800a560 <__pow5mult+0x20>
 800a550:	4c25      	ldr	r4, [pc, #148]	; (800a5e8 <__pow5mult+0xa8>)
 800a552:	3a01      	subs	r2, #1
 800a554:	2300      	movs	r3, #0
 800a556:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a55a:	f7ff fe9b 	bl	800a294 <__multadd>
 800a55e:	4607      	mov	r7, r0
 800a560:	10ad      	asrs	r5, r5, #2
 800a562:	d03d      	beq.n	800a5e0 <__pow5mult+0xa0>
 800a564:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a566:	b97c      	cbnz	r4, 800a588 <__pow5mult+0x48>
 800a568:	2010      	movs	r0, #16
 800a56a:	f7ff fe1b 	bl	800a1a4 <malloc>
 800a56e:	4602      	mov	r2, r0
 800a570:	6270      	str	r0, [r6, #36]	; 0x24
 800a572:	b928      	cbnz	r0, 800a580 <__pow5mult+0x40>
 800a574:	4b1d      	ldr	r3, [pc, #116]	; (800a5ec <__pow5mult+0xac>)
 800a576:	481e      	ldr	r0, [pc, #120]	; (800a5f0 <__pow5mult+0xb0>)
 800a578:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a57c:	f000 fc0e 	bl	800ad9c <__assert_func>
 800a580:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a584:	6004      	str	r4, [r0, #0]
 800a586:	60c4      	str	r4, [r0, #12]
 800a588:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a58c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a590:	b94c      	cbnz	r4, 800a5a6 <__pow5mult+0x66>
 800a592:	f240 2171 	movw	r1, #625	; 0x271
 800a596:	4630      	mov	r0, r6
 800a598:	f7ff ff12 	bl	800a3c0 <__i2b>
 800a59c:	2300      	movs	r3, #0
 800a59e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	6003      	str	r3, [r0, #0]
 800a5a6:	f04f 0900 	mov.w	r9, #0
 800a5aa:	07eb      	lsls	r3, r5, #31
 800a5ac:	d50a      	bpl.n	800a5c4 <__pow5mult+0x84>
 800a5ae:	4639      	mov	r1, r7
 800a5b0:	4622      	mov	r2, r4
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	f7ff ff1a 	bl	800a3ec <__multiply>
 800a5b8:	4639      	mov	r1, r7
 800a5ba:	4680      	mov	r8, r0
 800a5bc:	4630      	mov	r0, r6
 800a5be:	f7ff fe47 	bl	800a250 <_Bfree>
 800a5c2:	4647      	mov	r7, r8
 800a5c4:	106d      	asrs	r5, r5, #1
 800a5c6:	d00b      	beq.n	800a5e0 <__pow5mult+0xa0>
 800a5c8:	6820      	ldr	r0, [r4, #0]
 800a5ca:	b938      	cbnz	r0, 800a5dc <__pow5mult+0x9c>
 800a5cc:	4622      	mov	r2, r4
 800a5ce:	4621      	mov	r1, r4
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	f7ff ff0b 	bl	800a3ec <__multiply>
 800a5d6:	6020      	str	r0, [r4, #0]
 800a5d8:	f8c0 9000 	str.w	r9, [r0]
 800a5dc:	4604      	mov	r4, r0
 800a5de:	e7e4      	b.n	800a5aa <__pow5mult+0x6a>
 800a5e0:	4638      	mov	r0, r7
 800a5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5e6:	bf00      	nop
 800a5e8:	080c85c0 	.word	0x080c85c0
 800a5ec:	080c83ed 	.word	0x080c83ed
 800a5f0:	080c8470 	.word	0x080c8470

0800a5f4 <__lshift>:
 800a5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f8:	460c      	mov	r4, r1
 800a5fa:	6849      	ldr	r1, [r1, #4]
 800a5fc:	6923      	ldr	r3, [r4, #16]
 800a5fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a602:	68a3      	ldr	r3, [r4, #8]
 800a604:	4607      	mov	r7, r0
 800a606:	4691      	mov	r9, r2
 800a608:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a60c:	f108 0601 	add.w	r6, r8, #1
 800a610:	42b3      	cmp	r3, r6
 800a612:	db0b      	blt.n	800a62c <__lshift+0x38>
 800a614:	4638      	mov	r0, r7
 800a616:	f7ff fddb 	bl	800a1d0 <_Balloc>
 800a61a:	4605      	mov	r5, r0
 800a61c:	b948      	cbnz	r0, 800a632 <__lshift+0x3e>
 800a61e:	4602      	mov	r2, r0
 800a620:	4b2a      	ldr	r3, [pc, #168]	; (800a6cc <__lshift+0xd8>)
 800a622:	482b      	ldr	r0, [pc, #172]	; (800a6d0 <__lshift+0xdc>)
 800a624:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a628:	f000 fbb8 	bl	800ad9c <__assert_func>
 800a62c:	3101      	adds	r1, #1
 800a62e:	005b      	lsls	r3, r3, #1
 800a630:	e7ee      	b.n	800a610 <__lshift+0x1c>
 800a632:	2300      	movs	r3, #0
 800a634:	f100 0114 	add.w	r1, r0, #20
 800a638:	f100 0210 	add.w	r2, r0, #16
 800a63c:	4618      	mov	r0, r3
 800a63e:	4553      	cmp	r3, sl
 800a640:	db37      	blt.n	800a6b2 <__lshift+0xbe>
 800a642:	6920      	ldr	r0, [r4, #16]
 800a644:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a648:	f104 0314 	add.w	r3, r4, #20
 800a64c:	f019 091f 	ands.w	r9, r9, #31
 800a650:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a654:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a658:	d02f      	beq.n	800a6ba <__lshift+0xc6>
 800a65a:	f1c9 0e20 	rsb	lr, r9, #32
 800a65e:	468a      	mov	sl, r1
 800a660:	f04f 0c00 	mov.w	ip, #0
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	fa02 f209 	lsl.w	r2, r2, r9
 800a66a:	ea42 020c 	orr.w	r2, r2, ip
 800a66e:	f84a 2b04 	str.w	r2, [sl], #4
 800a672:	f853 2b04 	ldr.w	r2, [r3], #4
 800a676:	4298      	cmp	r0, r3
 800a678:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a67c:	d8f2      	bhi.n	800a664 <__lshift+0x70>
 800a67e:	1b03      	subs	r3, r0, r4
 800a680:	3b15      	subs	r3, #21
 800a682:	f023 0303 	bic.w	r3, r3, #3
 800a686:	3304      	adds	r3, #4
 800a688:	f104 0215 	add.w	r2, r4, #21
 800a68c:	4290      	cmp	r0, r2
 800a68e:	bf38      	it	cc
 800a690:	2304      	movcc	r3, #4
 800a692:	f841 c003 	str.w	ip, [r1, r3]
 800a696:	f1bc 0f00 	cmp.w	ip, #0
 800a69a:	d001      	beq.n	800a6a0 <__lshift+0xac>
 800a69c:	f108 0602 	add.w	r6, r8, #2
 800a6a0:	3e01      	subs	r6, #1
 800a6a2:	4638      	mov	r0, r7
 800a6a4:	612e      	str	r6, [r5, #16]
 800a6a6:	4621      	mov	r1, r4
 800a6a8:	f7ff fdd2 	bl	800a250 <_Bfree>
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	e7c1      	b.n	800a63e <__lshift+0x4a>
 800a6ba:	3904      	subs	r1, #4
 800a6bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6c4:	4298      	cmp	r0, r3
 800a6c6:	d8f9      	bhi.n	800a6bc <__lshift+0xc8>
 800a6c8:	e7ea      	b.n	800a6a0 <__lshift+0xac>
 800a6ca:	bf00      	nop
 800a6cc:	080c845f 	.word	0x080c845f
 800a6d0:	080c8470 	.word	0x080c8470

0800a6d4 <__mcmp>:
 800a6d4:	b530      	push	{r4, r5, lr}
 800a6d6:	6902      	ldr	r2, [r0, #16]
 800a6d8:	690c      	ldr	r4, [r1, #16]
 800a6da:	1b12      	subs	r2, r2, r4
 800a6dc:	d10e      	bne.n	800a6fc <__mcmp+0x28>
 800a6de:	f100 0314 	add.w	r3, r0, #20
 800a6e2:	3114      	adds	r1, #20
 800a6e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a6e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a6ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a6f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a6f4:	42a5      	cmp	r5, r4
 800a6f6:	d003      	beq.n	800a700 <__mcmp+0x2c>
 800a6f8:	d305      	bcc.n	800a706 <__mcmp+0x32>
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	4610      	mov	r0, r2
 800a6fe:	bd30      	pop	{r4, r5, pc}
 800a700:	4283      	cmp	r3, r0
 800a702:	d3f3      	bcc.n	800a6ec <__mcmp+0x18>
 800a704:	e7fa      	b.n	800a6fc <__mcmp+0x28>
 800a706:	f04f 32ff 	mov.w	r2, #4294967295
 800a70a:	e7f7      	b.n	800a6fc <__mcmp+0x28>

0800a70c <__mdiff>:
 800a70c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a710:	460c      	mov	r4, r1
 800a712:	4606      	mov	r6, r0
 800a714:	4611      	mov	r1, r2
 800a716:	4620      	mov	r0, r4
 800a718:	4690      	mov	r8, r2
 800a71a:	f7ff ffdb 	bl	800a6d4 <__mcmp>
 800a71e:	1e05      	subs	r5, r0, #0
 800a720:	d110      	bne.n	800a744 <__mdiff+0x38>
 800a722:	4629      	mov	r1, r5
 800a724:	4630      	mov	r0, r6
 800a726:	f7ff fd53 	bl	800a1d0 <_Balloc>
 800a72a:	b930      	cbnz	r0, 800a73a <__mdiff+0x2e>
 800a72c:	4b3a      	ldr	r3, [pc, #232]	; (800a818 <__mdiff+0x10c>)
 800a72e:	4602      	mov	r2, r0
 800a730:	f240 2132 	movw	r1, #562	; 0x232
 800a734:	4839      	ldr	r0, [pc, #228]	; (800a81c <__mdiff+0x110>)
 800a736:	f000 fb31 	bl	800ad9c <__assert_func>
 800a73a:	2301      	movs	r3, #1
 800a73c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a744:	bfa4      	itt	ge
 800a746:	4643      	movge	r3, r8
 800a748:	46a0      	movge	r8, r4
 800a74a:	4630      	mov	r0, r6
 800a74c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a750:	bfa6      	itte	ge
 800a752:	461c      	movge	r4, r3
 800a754:	2500      	movge	r5, #0
 800a756:	2501      	movlt	r5, #1
 800a758:	f7ff fd3a 	bl	800a1d0 <_Balloc>
 800a75c:	b920      	cbnz	r0, 800a768 <__mdiff+0x5c>
 800a75e:	4b2e      	ldr	r3, [pc, #184]	; (800a818 <__mdiff+0x10c>)
 800a760:	4602      	mov	r2, r0
 800a762:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a766:	e7e5      	b.n	800a734 <__mdiff+0x28>
 800a768:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a76c:	6926      	ldr	r6, [r4, #16]
 800a76e:	60c5      	str	r5, [r0, #12]
 800a770:	f104 0914 	add.w	r9, r4, #20
 800a774:	f108 0514 	add.w	r5, r8, #20
 800a778:	f100 0e14 	add.w	lr, r0, #20
 800a77c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a780:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a784:	f108 0210 	add.w	r2, r8, #16
 800a788:	46f2      	mov	sl, lr
 800a78a:	2100      	movs	r1, #0
 800a78c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a790:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a794:	fa1f f883 	uxth.w	r8, r3
 800a798:	fa11 f18b 	uxtah	r1, r1, fp
 800a79c:	0c1b      	lsrs	r3, r3, #16
 800a79e:	eba1 0808 	sub.w	r8, r1, r8
 800a7a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a7a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a7aa:	fa1f f888 	uxth.w	r8, r8
 800a7ae:	1419      	asrs	r1, r3, #16
 800a7b0:	454e      	cmp	r6, r9
 800a7b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a7b6:	f84a 3b04 	str.w	r3, [sl], #4
 800a7ba:	d8e7      	bhi.n	800a78c <__mdiff+0x80>
 800a7bc:	1b33      	subs	r3, r6, r4
 800a7be:	3b15      	subs	r3, #21
 800a7c0:	f023 0303 	bic.w	r3, r3, #3
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	3415      	adds	r4, #21
 800a7c8:	42a6      	cmp	r6, r4
 800a7ca:	bf38      	it	cc
 800a7cc:	2304      	movcc	r3, #4
 800a7ce:	441d      	add	r5, r3
 800a7d0:	4473      	add	r3, lr
 800a7d2:	469e      	mov	lr, r3
 800a7d4:	462e      	mov	r6, r5
 800a7d6:	4566      	cmp	r6, ip
 800a7d8:	d30e      	bcc.n	800a7f8 <__mdiff+0xec>
 800a7da:	f10c 0203 	add.w	r2, ip, #3
 800a7de:	1b52      	subs	r2, r2, r5
 800a7e0:	f022 0203 	bic.w	r2, r2, #3
 800a7e4:	3d03      	subs	r5, #3
 800a7e6:	45ac      	cmp	ip, r5
 800a7e8:	bf38      	it	cc
 800a7ea:	2200      	movcc	r2, #0
 800a7ec:	441a      	add	r2, r3
 800a7ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a7f2:	b17b      	cbz	r3, 800a814 <__mdiff+0x108>
 800a7f4:	6107      	str	r7, [r0, #16]
 800a7f6:	e7a3      	b.n	800a740 <__mdiff+0x34>
 800a7f8:	f856 8b04 	ldr.w	r8, [r6], #4
 800a7fc:	fa11 f288 	uxtah	r2, r1, r8
 800a800:	1414      	asrs	r4, r2, #16
 800a802:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a806:	b292      	uxth	r2, r2
 800a808:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a80c:	f84e 2b04 	str.w	r2, [lr], #4
 800a810:	1421      	asrs	r1, r4, #16
 800a812:	e7e0      	b.n	800a7d6 <__mdiff+0xca>
 800a814:	3f01      	subs	r7, #1
 800a816:	e7ea      	b.n	800a7ee <__mdiff+0xe2>
 800a818:	080c845f 	.word	0x080c845f
 800a81c:	080c8470 	.word	0x080c8470

0800a820 <__d2b>:
 800a820:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a824:	4689      	mov	r9, r1
 800a826:	2101      	movs	r1, #1
 800a828:	ec57 6b10 	vmov	r6, r7, d0
 800a82c:	4690      	mov	r8, r2
 800a82e:	f7ff fccf 	bl	800a1d0 <_Balloc>
 800a832:	4604      	mov	r4, r0
 800a834:	b930      	cbnz	r0, 800a844 <__d2b+0x24>
 800a836:	4602      	mov	r2, r0
 800a838:	4b25      	ldr	r3, [pc, #148]	; (800a8d0 <__d2b+0xb0>)
 800a83a:	4826      	ldr	r0, [pc, #152]	; (800a8d4 <__d2b+0xb4>)
 800a83c:	f240 310a 	movw	r1, #778	; 0x30a
 800a840:	f000 faac 	bl	800ad9c <__assert_func>
 800a844:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a848:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a84c:	bb35      	cbnz	r5, 800a89c <__d2b+0x7c>
 800a84e:	2e00      	cmp	r6, #0
 800a850:	9301      	str	r3, [sp, #4]
 800a852:	d028      	beq.n	800a8a6 <__d2b+0x86>
 800a854:	4668      	mov	r0, sp
 800a856:	9600      	str	r6, [sp, #0]
 800a858:	f7ff fd82 	bl	800a360 <__lo0bits>
 800a85c:	9900      	ldr	r1, [sp, #0]
 800a85e:	b300      	cbz	r0, 800a8a2 <__d2b+0x82>
 800a860:	9a01      	ldr	r2, [sp, #4]
 800a862:	f1c0 0320 	rsb	r3, r0, #32
 800a866:	fa02 f303 	lsl.w	r3, r2, r3
 800a86a:	430b      	orrs	r3, r1
 800a86c:	40c2      	lsrs	r2, r0
 800a86e:	6163      	str	r3, [r4, #20]
 800a870:	9201      	str	r2, [sp, #4]
 800a872:	9b01      	ldr	r3, [sp, #4]
 800a874:	61a3      	str	r3, [r4, #24]
 800a876:	2b00      	cmp	r3, #0
 800a878:	bf14      	ite	ne
 800a87a:	2202      	movne	r2, #2
 800a87c:	2201      	moveq	r2, #1
 800a87e:	6122      	str	r2, [r4, #16]
 800a880:	b1d5      	cbz	r5, 800a8b8 <__d2b+0x98>
 800a882:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a886:	4405      	add	r5, r0
 800a888:	f8c9 5000 	str.w	r5, [r9]
 800a88c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a890:	f8c8 0000 	str.w	r0, [r8]
 800a894:	4620      	mov	r0, r4
 800a896:	b003      	add	sp, #12
 800a898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a89c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8a0:	e7d5      	b.n	800a84e <__d2b+0x2e>
 800a8a2:	6161      	str	r1, [r4, #20]
 800a8a4:	e7e5      	b.n	800a872 <__d2b+0x52>
 800a8a6:	a801      	add	r0, sp, #4
 800a8a8:	f7ff fd5a 	bl	800a360 <__lo0bits>
 800a8ac:	9b01      	ldr	r3, [sp, #4]
 800a8ae:	6163      	str	r3, [r4, #20]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	6122      	str	r2, [r4, #16]
 800a8b4:	3020      	adds	r0, #32
 800a8b6:	e7e3      	b.n	800a880 <__d2b+0x60>
 800a8b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8c0:	f8c9 0000 	str.w	r0, [r9]
 800a8c4:	6918      	ldr	r0, [r3, #16]
 800a8c6:	f7ff fd2b 	bl	800a320 <__hi0bits>
 800a8ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8ce:	e7df      	b.n	800a890 <__d2b+0x70>
 800a8d0:	080c845f 	.word	0x080c845f
 800a8d4:	080c8470 	.word	0x080c8470

0800a8d8 <_calloc_r>:
 800a8d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8da:	fba1 2402 	umull	r2, r4, r1, r2
 800a8de:	b94c      	cbnz	r4, 800a8f4 <_calloc_r+0x1c>
 800a8e0:	4611      	mov	r1, r2
 800a8e2:	9201      	str	r2, [sp, #4]
 800a8e4:	f000 f87a 	bl	800a9dc <_malloc_r>
 800a8e8:	9a01      	ldr	r2, [sp, #4]
 800a8ea:	4605      	mov	r5, r0
 800a8ec:	b930      	cbnz	r0, 800a8fc <_calloc_r+0x24>
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	b003      	add	sp, #12
 800a8f2:	bd30      	pop	{r4, r5, pc}
 800a8f4:	220c      	movs	r2, #12
 800a8f6:	6002      	str	r2, [r0, #0]
 800a8f8:	2500      	movs	r5, #0
 800a8fa:	e7f8      	b.n	800a8ee <_calloc_r+0x16>
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	f7fd ffb9 	bl	8008874 <memset>
 800a902:	e7f4      	b.n	800a8ee <_calloc_r+0x16>

0800a904 <_free_r>:
 800a904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a906:	2900      	cmp	r1, #0
 800a908:	d044      	beq.n	800a994 <_free_r+0x90>
 800a90a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a90e:	9001      	str	r0, [sp, #4]
 800a910:	2b00      	cmp	r3, #0
 800a912:	f1a1 0404 	sub.w	r4, r1, #4
 800a916:	bfb8      	it	lt
 800a918:	18e4      	addlt	r4, r4, r3
 800a91a:	f000 fa9b 	bl	800ae54 <__malloc_lock>
 800a91e:	4a1e      	ldr	r2, [pc, #120]	; (800a998 <_free_r+0x94>)
 800a920:	9801      	ldr	r0, [sp, #4]
 800a922:	6813      	ldr	r3, [r2, #0]
 800a924:	b933      	cbnz	r3, 800a934 <_free_r+0x30>
 800a926:	6063      	str	r3, [r4, #4]
 800a928:	6014      	str	r4, [r2, #0]
 800a92a:	b003      	add	sp, #12
 800a92c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a930:	f000 ba96 	b.w	800ae60 <__malloc_unlock>
 800a934:	42a3      	cmp	r3, r4
 800a936:	d908      	bls.n	800a94a <_free_r+0x46>
 800a938:	6825      	ldr	r5, [r4, #0]
 800a93a:	1961      	adds	r1, r4, r5
 800a93c:	428b      	cmp	r3, r1
 800a93e:	bf01      	itttt	eq
 800a940:	6819      	ldreq	r1, [r3, #0]
 800a942:	685b      	ldreq	r3, [r3, #4]
 800a944:	1949      	addeq	r1, r1, r5
 800a946:	6021      	streq	r1, [r4, #0]
 800a948:	e7ed      	b.n	800a926 <_free_r+0x22>
 800a94a:	461a      	mov	r2, r3
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	b10b      	cbz	r3, 800a954 <_free_r+0x50>
 800a950:	42a3      	cmp	r3, r4
 800a952:	d9fa      	bls.n	800a94a <_free_r+0x46>
 800a954:	6811      	ldr	r1, [r2, #0]
 800a956:	1855      	adds	r5, r2, r1
 800a958:	42a5      	cmp	r5, r4
 800a95a:	d10b      	bne.n	800a974 <_free_r+0x70>
 800a95c:	6824      	ldr	r4, [r4, #0]
 800a95e:	4421      	add	r1, r4
 800a960:	1854      	adds	r4, r2, r1
 800a962:	42a3      	cmp	r3, r4
 800a964:	6011      	str	r1, [r2, #0]
 800a966:	d1e0      	bne.n	800a92a <_free_r+0x26>
 800a968:	681c      	ldr	r4, [r3, #0]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	6053      	str	r3, [r2, #4]
 800a96e:	4421      	add	r1, r4
 800a970:	6011      	str	r1, [r2, #0]
 800a972:	e7da      	b.n	800a92a <_free_r+0x26>
 800a974:	d902      	bls.n	800a97c <_free_r+0x78>
 800a976:	230c      	movs	r3, #12
 800a978:	6003      	str	r3, [r0, #0]
 800a97a:	e7d6      	b.n	800a92a <_free_r+0x26>
 800a97c:	6825      	ldr	r5, [r4, #0]
 800a97e:	1961      	adds	r1, r4, r5
 800a980:	428b      	cmp	r3, r1
 800a982:	bf04      	itt	eq
 800a984:	6819      	ldreq	r1, [r3, #0]
 800a986:	685b      	ldreq	r3, [r3, #4]
 800a988:	6063      	str	r3, [r4, #4]
 800a98a:	bf04      	itt	eq
 800a98c:	1949      	addeq	r1, r1, r5
 800a98e:	6021      	streq	r1, [r4, #0]
 800a990:	6054      	str	r4, [r2, #4]
 800a992:	e7ca      	b.n	800a92a <_free_r+0x26>
 800a994:	b003      	add	sp, #12
 800a996:	bd30      	pop	{r4, r5, pc}
 800a998:	200004c4 	.word	0x200004c4

0800a99c <sbrk_aligned>:
 800a99c:	b570      	push	{r4, r5, r6, lr}
 800a99e:	4e0e      	ldr	r6, [pc, #56]	; (800a9d8 <sbrk_aligned+0x3c>)
 800a9a0:	460c      	mov	r4, r1
 800a9a2:	6831      	ldr	r1, [r6, #0]
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	b911      	cbnz	r1, 800a9ae <sbrk_aligned+0x12>
 800a9a8:	f000 f9e8 	bl	800ad7c <_sbrk_r>
 800a9ac:	6030      	str	r0, [r6, #0]
 800a9ae:	4621      	mov	r1, r4
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	f000 f9e3 	bl	800ad7c <_sbrk_r>
 800a9b6:	1c43      	adds	r3, r0, #1
 800a9b8:	d00a      	beq.n	800a9d0 <sbrk_aligned+0x34>
 800a9ba:	1cc4      	adds	r4, r0, #3
 800a9bc:	f024 0403 	bic.w	r4, r4, #3
 800a9c0:	42a0      	cmp	r0, r4
 800a9c2:	d007      	beq.n	800a9d4 <sbrk_aligned+0x38>
 800a9c4:	1a21      	subs	r1, r4, r0
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	f000 f9d8 	bl	800ad7c <_sbrk_r>
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	d101      	bne.n	800a9d4 <sbrk_aligned+0x38>
 800a9d0:	f04f 34ff 	mov.w	r4, #4294967295
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	bd70      	pop	{r4, r5, r6, pc}
 800a9d8:	200004c8 	.word	0x200004c8

0800a9dc <_malloc_r>:
 800a9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e0:	1ccd      	adds	r5, r1, #3
 800a9e2:	f025 0503 	bic.w	r5, r5, #3
 800a9e6:	3508      	adds	r5, #8
 800a9e8:	2d0c      	cmp	r5, #12
 800a9ea:	bf38      	it	cc
 800a9ec:	250c      	movcc	r5, #12
 800a9ee:	2d00      	cmp	r5, #0
 800a9f0:	4607      	mov	r7, r0
 800a9f2:	db01      	blt.n	800a9f8 <_malloc_r+0x1c>
 800a9f4:	42a9      	cmp	r1, r5
 800a9f6:	d905      	bls.n	800aa04 <_malloc_r+0x28>
 800a9f8:	230c      	movs	r3, #12
 800a9fa:	603b      	str	r3, [r7, #0]
 800a9fc:	2600      	movs	r6, #0
 800a9fe:	4630      	mov	r0, r6
 800aa00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa04:	4e2e      	ldr	r6, [pc, #184]	; (800aac0 <_malloc_r+0xe4>)
 800aa06:	f000 fa25 	bl	800ae54 <__malloc_lock>
 800aa0a:	6833      	ldr	r3, [r6, #0]
 800aa0c:	461c      	mov	r4, r3
 800aa0e:	bb34      	cbnz	r4, 800aa5e <_malloc_r+0x82>
 800aa10:	4629      	mov	r1, r5
 800aa12:	4638      	mov	r0, r7
 800aa14:	f7ff ffc2 	bl	800a99c <sbrk_aligned>
 800aa18:	1c43      	adds	r3, r0, #1
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	d14d      	bne.n	800aaba <_malloc_r+0xde>
 800aa1e:	6834      	ldr	r4, [r6, #0]
 800aa20:	4626      	mov	r6, r4
 800aa22:	2e00      	cmp	r6, #0
 800aa24:	d140      	bne.n	800aaa8 <_malloc_r+0xcc>
 800aa26:	6823      	ldr	r3, [r4, #0]
 800aa28:	4631      	mov	r1, r6
 800aa2a:	4638      	mov	r0, r7
 800aa2c:	eb04 0803 	add.w	r8, r4, r3
 800aa30:	f000 f9a4 	bl	800ad7c <_sbrk_r>
 800aa34:	4580      	cmp	r8, r0
 800aa36:	d13a      	bne.n	800aaae <_malloc_r+0xd2>
 800aa38:	6821      	ldr	r1, [r4, #0]
 800aa3a:	3503      	adds	r5, #3
 800aa3c:	1a6d      	subs	r5, r5, r1
 800aa3e:	f025 0503 	bic.w	r5, r5, #3
 800aa42:	3508      	adds	r5, #8
 800aa44:	2d0c      	cmp	r5, #12
 800aa46:	bf38      	it	cc
 800aa48:	250c      	movcc	r5, #12
 800aa4a:	4629      	mov	r1, r5
 800aa4c:	4638      	mov	r0, r7
 800aa4e:	f7ff ffa5 	bl	800a99c <sbrk_aligned>
 800aa52:	3001      	adds	r0, #1
 800aa54:	d02b      	beq.n	800aaae <_malloc_r+0xd2>
 800aa56:	6823      	ldr	r3, [r4, #0]
 800aa58:	442b      	add	r3, r5
 800aa5a:	6023      	str	r3, [r4, #0]
 800aa5c:	e00e      	b.n	800aa7c <_malloc_r+0xa0>
 800aa5e:	6822      	ldr	r2, [r4, #0]
 800aa60:	1b52      	subs	r2, r2, r5
 800aa62:	d41e      	bmi.n	800aaa2 <_malloc_r+0xc6>
 800aa64:	2a0b      	cmp	r2, #11
 800aa66:	d916      	bls.n	800aa96 <_malloc_r+0xba>
 800aa68:	1961      	adds	r1, r4, r5
 800aa6a:	42a3      	cmp	r3, r4
 800aa6c:	6025      	str	r5, [r4, #0]
 800aa6e:	bf18      	it	ne
 800aa70:	6059      	strne	r1, [r3, #4]
 800aa72:	6863      	ldr	r3, [r4, #4]
 800aa74:	bf08      	it	eq
 800aa76:	6031      	streq	r1, [r6, #0]
 800aa78:	5162      	str	r2, [r4, r5]
 800aa7a:	604b      	str	r3, [r1, #4]
 800aa7c:	4638      	mov	r0, r7
 800aa7e:	f104 060b 	add.w	r6, r4, #11
 800aa82:	f000 f9ed 	bl	800ae60 <__malloc_unlock>
 800aa86:	f026 0607 	bic.w	r6, r6, #7
 800aa8a:	1d23      	adds	r3, r4, #4
 800aa8c:	1af2      	subs	r2, r6, r3
 800aa8e:	d0b6      	beq.n	800a9fe <_malloc_r+0x22>
 800aa90:	1b9b      	subs	r3, r3, r6
 800aa92:	50a3      	str	r3, [r4, r2]
 800aa94:	e7b3      	b.n	800a9fe <_malloc_r+0x22>
 800aa96:	6862      	ldr	r2, [r4, #4]
 800aa98:	42a3      	cmp	r3, r4
 800aa9a:	bf0c      	ite	eq
 800aa9c:	6032      	streq	r2, [r6, #0]
 800aa9e:	605a      	strne	r2, [r3, #4]
 800aaa0:	e7ec      	b.n	800aa7c <_malloc_r+0xa0>
 800aaa2:	4623      	mov	r3, r4
 800aaa4:	6864      	ldr	r4, [r4, #4]
 800aaa6:	e7b2      	b.n	800aa0e <_malloc_r+0x32>
 800aaa8:	4634      	mov	r4, r6
 800aaaa:	6876      	ldr	r6, [r6, #4]
 800aaac:	e7b9      	b.n	800aa22 <_malloc_r+0x46>
 800aaae:	230c      	movs	r3, #12
 800aab0:	603b      	str	r3, [r7, #0]
 800aab2:	4638      	mov	r0, r7
 800aab4:	f000 f9d4 	bl	800ae60 <__malloc_unlock>
 800aab8:	e7a1      	b.n	800a9fe <_malloc_r+0x22>
 800aaba:	6025      	str	r5, [r4, #0]
 800aabc:	e7de      	b.n	800aa7c <_malloc_r+0xa0>
 800aabe:	bf00      	nop
 800aac0:	200004c4 	.word	0x200004c4

0800aac4 <__ssputs_r>:
 800aac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aac8:	688e      	ldr	r6, [r1, #8]
 800aaca:	429e      	cmp	r6, r3
 800aacc:	4682      	mov	sl, r0
 800aace:	460c      	mov	r4, r1
 800aad0:	4690      	mov	r8, r2
 800aad2:	461f      	mov	r7, r3
 800aad4:	d838      	bhi.n	800ab48 <__ssputs_r+0x84>
 800aad6:	898a      	ldrh	r2, [r1, #12]
 800aad8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aadc:	d032      	beq.n	800ab44 <__ssputs_r+0x80>
 800aade:	6825      	ldr	r5, [r4, #0]
 800aae0:	6909      	ldr	r1, [r1, #16]
 800aae2:	eba5 0901 	sub.w	r9, r5, r1
 800aae6:	6965      	ldr	r5, [r4, #20]
 800aae8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aaec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	444b      	add	r3, r9
 800aaf4:	106d      	asrs	r5, r5, #1
 800aaf6:	429d      	cmp	r5, r3
 800aaf8:	bf38      	it	cc
 800aafa:	461d      	movcc	r5, r3
 800aafc:	0553      	lsls	r3, r2, #21
 800aafe:	d531      	bpl.n	800ab64 <__ssputs_r+0xa0>
 800ab00:	4629      	mov	r1, r5
 800ab02:	f7ff ff6b 	bl	800a9dc <_malloc_r>
 800ab06:	4606      	mov	r6, r0
 800ab08:	b950      	cbnz	r0, 800ab20 <__ssputs_r+0x5c>
 800ab0a:	230c      	movs	r3, #12
 800ab0c:	f8ca 3000 	str.w	r3, [sl]
 800ab10:	89a3      	ldrh	r3, [r4, #12]
 800ab12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab16:	81a3      	strh	r3, [r4, #12]
 800ab18:	f04f 30ff 	mov.w	r0, #4294967295
 800ab1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab20:	6921      	ldr	r1, [r4, #16]
 800ab22:	464a      	mov	r2, r9
 800ab24:	f7ff fb46 	bl	800a1b4 <memcpy>
 800ab28:	89a3      	ldrh	r3, [r4, #12]
 800ab2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab32:	81a3      	strh	r3, [r4, #12]
 800ab34:	6126      	str	r6, [r4, #16]
 800ab36:	6165      	str	r5, [r4, #20]
 800ab38:	444e      	add	r6, r9
 800ab3a:	eba5 0509 	sub.w	r5, r5, r9
 800ab3e:	6026      	str	r6, [r4, #0]
 800ab40:	60a5      	str	r5, [r4, #8]
 800ab42:	463e      	mov	r6, r7
 800ab44:	42be      	cmp	r6, r7
 800ab46:	d900      	bls.n	800ab4a <__ssputs_r+0x86>
 800ab48:	463e      	mov	r6, r7
 800ab4a:	6820      	ldr	r0, [r4, #0]
 800ab4c:	4632      	mov	r2, r6
 800ab4e:	4641      	mov	r1, r8
 800ab50:	f000 f966 	bl	800ae20 <memmove>
 800ab54:	68a3      	ldr	r3, [r4, #8]
 800ab56:	1b9b      	subs	r3, r3, r6
 800ab58:	60a3      	str	r3, [r4, #8]
 800ab5a:	6823      	ldr	r3, [r4, #0]
 800ab5c:	4433      	add	r3, r6
 800ab5e:	6023      	str	r3, [r4, #0]
 800ab60:	2000      	movs	r0, #0
 800ab62:	e7db      	b.n	800ab1c <__ssputs_r+0x58>
 800ab64:	462a      	mov	r2, r5
 800ab66:	f000 f981 	bl	800ae6c <_realloc_r>
 800ab6a:	4606      	mov	r6, r0
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	d1e1      	bne.n	800ab34 <__ssputs_r+0x70>
 800ab70:	6921      	ldr	r1, [r4, #16]
 800ab72:	4650      	mov	r0, sl
 800ab74:	f7ff fec6 	bl	800a904 <_free_r>
 800ab78:	e7c7      	b.n	800ab0a <__ssputs_r+0x46>
	...

0800ab7c <_svfiprintf_r>:
 800ab7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab80:	4698      	mov	r8, r3
 800ab82:	898b      	ldrh	r3, [r1, #12]
 800ab84:	061b      	lsls	r3, r3, #24
 800ab86:	b09d      	sub	sp, #116	; 0x74
 800ab88:	4607      	mov	r7, r0
 800ab8a:	460d      	mov	r5, r1
 800ab8c:	4614      	mov	r4, r2
 800ab8e:	d50e      	bpl.n	800abae <_svfiprintf_r+0x32>
 800ab90:	690b      	ldr	r3, [r1, #16]
 800ab92:	b963      	cbnz	r3, 800abae <_svfiprintf_r+0x32>
 800ab94:	2140      	movs	r1, #64	; 0x40
 800ab96:	f7ff ff21 	bl	800a9dc <_malloc_r>
 800ab9a:	6028      	str	r0, [r5, #0]
 800ab9c:	6128      	str	r0, [r5, #16]
 800ab9e:	b920      	cbnz	r0, 800abaa <_svfiprintf_r+0x2e>
 800aba0:	230c      	movs	r3, #12
 800aba2:	603b      	str	r3, [r7, #0]
 800aba4:	f04f 30ff 	mov.w	r0, #4294967295
 800aba8:	e0d1      	b.n	800ad4e <_svfiprintf_r+0x1d2>
 800abaa:	2340      	movs	r3, #64	; 0x40
 800abac:	616b      	str	r3, [r5, #20]
 800abae:	2300      	movs	r3, #0
 800abb0:	9309      	str	r3, [sp, #36]	; 0x24
 800abb2:	2320      	movs	r3, #32
 800abb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abb8:	f8cd 800c 	str.w	r8, [sp, #12]
 800abbc:	2330      	movs	r3, #48	; 0x30
 800abbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ad68 <_svfiprintf_r+0x1ec>
 800abc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abc6:	f04f 0901 	mov.w	r9, #1
 800abca:	4623      	mov	r3, r4
 800abcc:	469a      	mov	sl, r3
 800abce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abd2:	b10a      	cbz	r2, 800abd8 <_svfiprintf_r+0x5c>
 800abd4:	2a25      	cmp	r2, #37	; 0x25
 800abd6:	d1f9      	bne.n	800abcc <_svfiprintf_r+0x50>
 800abd8:	ebba 0b04 	subs.w	fp, sl, r4
 800abdc:	d00b      	beq.n	800abf6 <_svfiprintf_r+0x7a>
 800abde:	465b      	mov	r3, fp
 800abe0:	4622      	mov	r2, r4
 800abe2:	4629      	mov	r1, r5
 800abe4:	4638      	mov	r0, r7
 800abe6:	f7ff ff6d 	bl	800aac4 <__ssputs_r>
 800abea:	3001      	adds	r0, #1
 800abec:	f000 80aa 	beq.w	800ad44 <_svfiprintf_r+0x1c8>
 800abf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abf2:	445a      	add	r2, fp
 800abf4:	9209      	str	r2, [sp, #36]	; 0x24
 800abf6:	f89a 3000 	ldrb.w	r3, [sl]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f000 80a2 	beq.w	800ad44 <_svfiprintf_r+0x1c8>
 800ac00:	2300      	movs	r3, #0
 800ac02:	f04f 32ff 	mov.w	r2, #4294967295
 800ac06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac0a:	f10a 0a01 	add.w	sl, sl, #1
 800ac0e:	9304      	str	r3, [sp, #16]
 800ac10:	9307      	str	r3, [sp, #28]
 800ac12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac16:	931a      	str	r3, [sp, #104]	; 0x68
 800ac18:	4654      	mov	r4, sl
 800ac1a:	2205      	movs	r2, #5
 800ac1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac20:	4851      	ldr	r0, [pc, #324]	; (800ad68 <_svfiprintf_r+0x1ec>)
 800ac22:	f7f5 faf5 	bl	8000210 <memchr>
 800ac26:	9a04      	ldr	r2, [sp, #16]
 800ac28:	b9d8      	cbnz	r0, 800ac62 <_svfiprintf_r+0xe6>
 800ac2a:	06d0      	lsls	r0, r2, #27
 800ac2c:	bf44      	itt	mi
 800ac2e:	2320      	movmi	r3, #32
 800ac30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac34:	0711      	lsls	r1, r2, #28
 800ac36:	bf44      	itt	mi
 800ac38:	232b      	movmi	r3, #43	; 0x2b
 800ac3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac3e:	f89a 3000 	ldrb.w	r3, [sl]
 800ac42:	2b2a      	cmp	r3, #42	; 0x2a
 800ac44:	d015      	beq.n	800ac72 <_svfiprintf_r+0xf6>
 800ac46:	9a07      	ldr	r2, [sp, #28]
 800ac48:	4654      	mov	r4, sl
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	f04f 0c0a 	mov.w	ip, #10
 800ac50:	4621      	mov	r1, r4
 800ac52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac56:	3b30      	subs	r3, #48	; 0x30
 800ac58:	2b09      	cmp	r3, #9
 800ac5a:	d94e      	bls.n	800acfa <_svfiprintf_r+0x17e>
 800ac5c:	b1b0      	cbz	r0, 800ac8c <_svfiprintf_r+0x110>
 800ac5e:	9207      	str	r2, [sp, #28]
 800ac60:	e014      	b.n	800ac8c <_svfiprintf_r+0x110>
 800ac62:	eba0 0308 	sub.w	r3, r0, r8
 800ac66:	fa09 f303 	lsl.w	r3, r9, r3
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	9304      	str	r3, [sp, #16]
 800ac6e:	46a2      	mov	sl, r4
 800ac70:	e7d2      	b.n	800ac18 <_svfiprintf_r+0x9c>
 800ac72:	9b03      	ldr	r3, [sp, #12]
 800ac74:	1d19      	adds	r1, r3, #4
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	9103      	str	r1, [sp, #12]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	bfbb      	ittet	lt
 800ac7e:	425b      	neglt	r3, r3
 800ac80:	f042 0202 	orrlt.w	r2, r2, #2
 800ac84:	9307      	strge	r3, [sp, #28]
 800ac86:	9307      	strlt	r3, [sp, #28]
 800ac88:	bfb8      	it	lt
 800ac8a:	9204      	strlt	r2, [sp, #16]
 800ac8c:	7823      	ldrb	r3, [r4, #0]
 800ac8e:	2b2e      	cmp	r3, #46	; 0x2e
 800ac90:	d10c      	bne.n	800acac <_svfiprintf_r+0x130>
 800ac92:	7863      	ldrb	r3, [r4, #1]
 800ac94:	2b2a      	cmp	r3, #42	; 0x2a
 800ac96:	d135      	bne.n	800ad04 <_svfiprintf_r+0x188>
 800ac98:	9b03      	ldr	r3, [sp, #12]
 800ac9a:	1d1a      	adds	r2, r3, #4
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	9203      	str	r2, [sp, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	bfb8      	it	lt
 800aca4:	f04f 33ff 	movlt.w	r3, #4294967295
 800aca8:	3402      	adds	r4, #2
 800acaa:	9305      	str	r3, [sp, #20]
 800acac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ad78 <_svfiprintf_r+0x1fc>
 800acb0:	7821      	ldrb	r1, [r4, #0]
 800acb2:	2203      	movs	r2, #3
 800acb4:	4650      	mov	r0, sl
 800acb6:	f7f5 faab 	bl	8000210 <memchr>
 800acba:	b140      	cbz	r0, 800acce <_svfiprintf_r+0x152>
 800acbc:	2340      	movs	r3, #64	; 0x40
 800acbe:	eba0 000a 	sub.w	r0, r0, sl
 800acc2:	fa03 f000 	lsl.w	r0, r3, r0
 800acc6:	9b04      	ldr	r3, [sp, #16]
 800acc8:	4303      	orrs	r3, r0
 800acca:	3401      	adds	r4, #1
 800accc:	9304      	str	r3, [sp, #16]
 800acce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acd2:	4826      	ldr	r0, [pc, #152]	; (800ad6c <_svfiprintf_r+0x1f0>)
 800acd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acd8:	2206      	movs	r2, #6
 800acda:	f7f5 fa99 	bl	8000210 <memchr>
 800acde:	2800      	cmp	r0, #0
 800ace0:	d038      	beq.n	800ad54 <_svfiprintf_r+0x1d8>
 800ace2:	4b23      	ldr	r3, [pc, #140]	; (800ad70 <_svfiprintf_r+0x1f4>)
 800ace4:	bb1b      	cbnz	r3, 800ad2e <_svfiprintf_r+0x1b2>
 800ace6:	9b03      	ldr	r3, [sp, #12]
 800ace8:	3307      	adds	r3, #7
 800acea:	f023 0307 	bic.w	r3, r3, #7
 800acee:	3308      	adds	r3, #8
 800acf0:	9303      	str	r3, [sp, #12]
 800acf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf4:	4433      	add	r3, r6
 800acf6:	9309      	str	r3, [sp, #36]	; 0x24
 800acf8:	e767      	b.n	800abca <_svfiprintf_r+0x4e>
 800acfa:	fb0c 3202 	mla	r2, ip, r2, r3
 800acfe:	460c      	mov	r4, r1
 800ad00:	2001      	movs	r0, #1
 800ad02:	e7a5      	b.n	800ac50 <_svfiprintf_r+0xd4>
 800ad04:	2300      	movs	r3, #0
 800ad06:	3401      	adds	r4, #1
 800ad08:	9305      	str	r3, [sp, #20]
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	f04f 0c0a 	mov.w	ip, #10
 800ad10:	4620      	mov	r0, r4
 800ad12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad16:	3a30      	subs	r2, #48	; 0x30
 800ad18:	2a09      	cmp	r2, #9
 800ad1a:	d903      	bls.n	800ad24 <_svfiprintf_r+0x1a8>
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d0c5      	beq.n	800acac <_svfiprintf_r+0x130>
 800ad20:	9105      	str	r1, [sp, #20]
 800ad22:	e7c3      	b.n	800acac <_svfiprintf_r+0x130>
 800ad24:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad28:	4604      	mov	r4, r0
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e7f0      	b.n	800ad10 <_svfiprintf_r+0x194>
 800ad2e:	ab03      	add	r3, sp, #12
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	462a      	mov	r2, r5
 800ad34:	4b0f      	ldr	r3, [pc, #60]	; (800ad74 <_svfiprintf_r+0x1f8>)
 800ad36:	a904      	add	r1, sp, #16
 800ad38:	4638      	mov	r0, r7
 800ad3a:	f7fd fe43 	bl	80089c4 <_printf_float>
 800ad3e:	1c42      	adds	r2, r0, #1
 800ad40:	4606      	mov	r6, r0
 800ad42:	d1d6      	bne.n	800acf2 <_svfiprintf_r+0x176>
 800ad44:	89ab      	ldrh	r3, [r5, #12]
 800ad46:	065b      	lsls	r3, r3, #25
 800ad48:	f53f af2c 	bmi.w	800aba4 <_svfiprintf_r+0x28>
 800ad4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad4e:	b01d      	add	sp, #116	; 0x74
 800ad50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad54:	ab03      	add	r3, sp, #12
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	462a      	mov	r2, r5
 800ad5a:	4b06      	ldr	r3, [pc, #24]	; (800ad74 <_svfiprintf_r+0x1f8>)
 800ad5c:	a904      	add	r1, sp, #16
 800ad5e:	4638      	mov	r0, r7
 800ad60:	f7fe f8d4 	bl	8008f0c <_printf_i>
 800ad64:	e7eb      	b.n	800ad3e <_svfiprintf_r+0x1c2>
 800ad66:	bf00      	nop
 800ad68:	080c85cc 	.word	0x080c85cc
 800ad6c:	080c85d6 	.word	0x080c85d6
 800ad70:	080089c5 	.word	0x080089c5
 800ad74:	0800aac5 	.word	0x0800aac5
 800ad78:	080c85d2 	.word	0x080c85d2

0800ad7c <_sbrk_r>:
 800ad7c:	b538      	push	{r3, r4, r5, lr}
 800ad7e:	4d06      	ldr	r5, [pc, #24]	; (800ad98 <_sbrk_r+0x1c>)
 800ad80:	2300      	movs	r3, #0
 800ad82:	4604      	mov	r4, r0
 800ad84:	4608      	mov	r0, r1
 800ad86:	602b      	str	r3, [r5, #0]
 800ad88:	f7f7 ff16 	bl	8002bb8 <_sbrk>
 800ad8c:	1c43      	adds	r3, r0, #1
 800ad8e:	d102      	bne.n	800ad96 <_sbrk_r+0x1a>
 800ad90:	682b      	ldr	r3, [r5, #0]
 800ad92:	b103      	cbz	r3, 800ad96 <_sbrk_r+0x1a>
 800ad94:	6023      	str	r3, [r4, #0]
 800ad96:	bd38      	pop	{r3, r4, r5, pc}
 800ad98:	200004cc 	.word	0x200004cc

0800ad9c <__assert_func>:
 800ad9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad9e:	4614      	mov	r4, r2
 800ada0:	461a      	mov	r2, r3
 800ada2:	4b09      	ldr	r3, [pc, #36]	; (800adc8 <__assert_func+0x2c>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4605      	mov	r5, r0
 800ada8:	68d8      	ldr	r0, [r3, #12]
 800adaa:	b14c      	cbz	r4, 800adc0 <__assert_func+0x24>
 800adac:	4b07      	ldr	r3, [pc, #28]	; (800adcc <__assert_func+0x30>)
 800adae:	9100      	str	r1, [sp, #0]
 800adb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adb4:	4906      	ldr	r1, [pc, #24]	; (800add0 <__assert_func+0x34>)
 800adb6:	462b      	mov	r3, r5
 800adb8:	f000 f80e 	bl	800add8 <fiprintf>
 800adbc:	f000 faac 	bl	800b318 <abort>
 800adc0:	4b04      	ldr	r3, [pc, #16]	; (800add4 <__assert_func+0x38>)
 800adc2:	461c      	mov	r4, r3
 800adc4:	e7f3      	b.n	800adae <__assert_func+0x12>
 800adc6:	bf00      	nop
 800adc8:	20000010 	.word	0x20000010
 800adcc:	080c85dd 	.word	0x080c85dd
 800add0:	080c85ea 	.word	0x080c85ea
 800add4:	080c8618 	.word	0x080c8618

0800add8 <fiprintf>:
 800add8:	b40e      	push	{r1, r2, r3}
 800adda:	b503      	push	{r0, r1, lr}
 800addc:	4601      	mov	r1, r0
 800adde:	ab03      	add	r3, sp, #12
 800ade0:	4805      	ldr	r0, [pc, #20]	; (800adf8 <fiprintf+0x20>)
 800ade2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ade6:	6800      	ldr	r0, [r0, #0]
 800ade8:	9301      	str	r3, [sp, #4]
 800adea:	f000 f897 	bl	800af1c <_vfiprintf_r>
 800adee:	b002      	add	sp, #8
 800adf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800adf4:	b003      	add	sp, #12
 800adf6:	4770      	bx	lr
 800adf8:	20000010 	.word	0x20000010

0800adfc <__ascii_mbtowc>:
 800adfc:	b082      	sub	sp, #8
 800adfe:	b901      	cbnz	r1, 800ae02 <__ascii_mbtowc+0x6>
 800ae00:	a901      	add	r1, sp, #4
 800ae02:	b142      	cbz	r2, 800ae16 <__ascii_mbtowc+0x1a>
 800ae04:	b14b      	cbz	r3, 800ae1a <__ascii_mbtowc+0x1e>
 800ae06:	7813      	ldrb	r3, [r2, #0]
 800ae08:	600b      	str	r3, [r1, #0]
 800ae0a:	7812      	ldrb	r2, [r2, #0]
 800ae0c:	1e10      	subs	r0, r2, #0
 800ae0e:	bf18      	it	ne
 800ae10:	2001      	movne	r0, #1
 800ae12:	b002      	add	sp, #8
 800ae14:	4770      	bx	lr
 800ae16:	4610      	mov	r0, r2
 800ae18:	e7fb      	b.n	800ae12 <__ascii_mbtowc+0x16>
 800ae1a:	f06f 0001 	mvn.w	r0, #1
 800ae1e:	e7f8      	b.n	800ae12 <__ascii_mbtowc+0x16>

0800ae20 <memmove>:
 800ae20:	4288      	cmp	r0, r1
 800ae22:	b510      	push	{r4, lr}
 800ae24:	eb01 0402 	add.w	r4, r1, r2
 800ae28:	d902      	bls.n	800ae30 <memmove+0x10>
 800ae2a:	4284      	cmp	r4, r0
 800ae2c:	4623      	mov	r3, r4
 800ae2e:	d807      	bhi.n	800ae40 <memmove+0x20>
 800ae30:	1e43      	subs	r3, r0, #1
 800ae32:	42a1      	cmp	r1, r4
 800ae34:	d008      	beq.n	800ae48 <memmove+0x28>
 800ae36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae3e:	e7f8      	b.n	800ae32 <memmove+0x12>
 800ae40:	4402      	add	r2, r0
 800ae42:	4601      	mov	r1, r0
 800ae44:	428a      	cmp	r2, r1
 800ae46:	d100      	bne.n	800ae4a <memmove+0x2a>
 800ae48:	bd10      	pop	{r4, pc}
 800ae4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae52:	e7f7      	b.n	800ae44 <memmove+0x24>

0800ae54 <__malloc_lock>:
 800ae54:	4801      	ldr	r0, [pc, #4]	; (800ae5c <__malloc_lock+0x8>)
 800ae56:	f000 bc1f 	b.w	800b698 <__retarget_lock_acquire_recursive>
 800ae5a:	bf00      	nop
 800ae5c:	200004d0 	.word	0x200004d0

0800ae60 <__malloc_unlock>:
 800ae60:	4801      	ldr	r0, [pc, #4]	; (800ae68 <__malloc_unlock+0x8>)
 800ae62:	f000 bc1a 	b.w	800b69a <__retarget_lock_release_recursive>
 800ae66:	bf00      	nop
 800ae68:	200004d0 	.word	0x200004d0

0800ae6c <_realloc_r>:
 800ae6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae70:	4680      	mov	r8, r0
 800ae72:	4614      	mov	r4, r2
 800ae74:	460e      	mov	r6, r1
 800ae76:	b921      	cbnz	r1, 800ae82 <_realloc_r+0x16>
 800ae78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae7c:	4611      	mov	r1, r2
 800ae7e:	f7ff bdad 	b.w	800a9dc <_malloc_r>
 800ae82:	b92a      	cbnz	r2, 800ae90 <_realloc_r+0x24>
 800ae84:	f7ff fd3e 	bl	800a904 <_free_r>
 800ae88:	4625      	mov	r5, r4
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae90:	f000 fc6a 	bl	800b768 <_malloc_usable_size_r>
 800ae94:	4284      	cmp	r4, r0
 800ae96:	4607      	mov	r7, r0
 800ae98:	d802      	bhi.n	800aea0 <_realloc_r+0x34>
 800ae9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae9e:	d812      	bhi.n	800aec6 <_realloc_r+0x5a>
 800aea0:	4621      	mov	r1, r4
 800aea2:	4640      	mov	r0, r8
 800aea4:	f7ff fd9a 	bl	800a9dc <_malloc_r>
 800aea8:	4605      	mov	r5, r0
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d0ed      	beq.n	800ae8a <_realloc_r+0x1e>
 800aeae:	42bc      	cmp	r4, r7
 800aeb0:	4622      	mov	r2, r4
 800aeb2:	4631      	mov	r1, r6
 800aeb4:	bf28      	it	cs
 800aeb6:	463a      	movcs	r2, r7
 800aeb8:	f7ff f97c 	bl	800a1b4 <memcpy>
 800aebc:	4631      	mov	r1, r6
 800aebe:	4640      	mov	r0, r8
 800aec0:	f7ff fd20 	bl	800a904 <_free_r>
 800aec4:	e7e1      	b.n	800ae8a <_realloc_r+0x1e>
 800aec6:	4635      	mov	r5, r6
 800aec8:	e7df      	b.n	800ae8a <_realloc_r+0x1e>

0800aeca <__sfputc_r>:
 800aeca:	6893      	ldr	r3, [r2, #8]
 800aecc:	3b01      	subs	r3, #1
 800aece:	2b00      	cmp	r3, #0
 800aed0:	b410      	push	{r4}
 800aed2:	6093      	str	r3, [r2, #8]
 800aed4:	da08      	bge.n	800aee8 <__sfputc_r+0x1e>
 800aed6:	6994      	ldr	r4, [r2, #24]
 800aed8:	42a3      	cmp	r3, r4
 800aeda:	db01      	blt.n	800aee0 <__sfputc_r+0x16>
 800aedc:	290a      	cmp	r1, #10
 800aede:	d103      	bne.n	800aee8 <__sfputc_r+0x1e>
 800aee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aee4:	f000 b94a 	b.w	800b17c <__swbuf_r>
 800aee8:	6813      	ldr	r3, [r2, #0]
 800aeea:	1c58      	adds	r0, r3, #1
 800aeec:	6010      	str	r0, [r2, #0]
 800aeee:	7019      	strb	r1, [r3, #0]
 800aef0:	4608      	mov	r0, r1
 800aef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <__sfputs_r>:
 800aef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefa:	4606      	mov	r6, r0
 800aefc:	460f      	mov	r7, r1
 800aefe:	4614      	mov	r4, r2
 800af00:	18d5      	adds	r5, r2, r3
 800af02:	42ac      	cmp	r4, r5
 800af04:	d101      	bne.n	800af0a <__sfputs_r+0x12>
 800af06:	2000      	movs	r0, #0
 800af08:	e007      	b.n	800af1a <__sfputs_r+0x22>
 800af0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af0e:	463a      	mov	r2, r7
 800af10:	4630      	mov	r0, r6
 800af12:	f7ff ffda 	bl	800aeca <__sfputc_r>
 800af16:	1c43      	adds	r3, r0, #1
 800af18:	d1f3      	bne.n	800af02 <__sfputs_r+0xa>
 800af1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af1c <_vfiprintf_r>:
 800af1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af20:	460d      	mov	r5, r1
 800af22:	b09d      	sub	sp, #116	; 0x74
 800af24:	4614      	mov	r4, r2
 800af26:	4698      	mov	r8, r3
 800af28:	4606      	mov	r6, r0
 800af2a:	b118      	cbz	r0, 800af34 <_vfiprintf_r+0x18>
 800af2c:	6983      	ldr	r3, [r0, #24]
 800af2e:	b90b      	cbnz	r3, 800af34 <_vfiprintf_r+0x18>
 800af30:	f000 fb14 	bl	800b55c <__sinit>
 800af34:	4b89      	ldr	r3, [pc, #548]	; (800b15c <_vfiprintf_r+0x240>)
 800af36:	429d      	cmp	r5, r3
 800af38:	d11b      	bne.n	800af72 <_vfiprintf_r+0x56>
 800af3a:	6875      	ldr	r5, [r6, #4]
 800af3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af3e:	07d9      	lsls	r1, r3, #31
 800af40:	d405      	bmi.n	800af4e <_vfiprintf_r+0x32>
 800af42:	89ab      	ldrh	r3, [r5, #12]
 800af44:	059a      	lsls	r2, r3, #22
 800af46:	d402      	bmi.n	800af4e <_vfiprintf_r+0x32>
 800af48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af4a:	f000 fba5 	bl	800b698 <__retarget_lock_acquire_recursive>
 800af4e:	89ab      	ldrh	r3, [r5, #12]
 800af50:	071b      	lsls	r3, r3, #28
 800af52:	d501      	bpl.n	800af58 <_vfiprintf_r+0x3c>
 800af54:	692b      	ldr	r3, [r5, #16]
 800af56:	b9eb      	cbnz	r3, 800af94 <_vfiprintf_r+0x78>
 800af58:	4629      	mov	r1, r5
 800af5a:	4630      	mov	r0, r6
 800af5c:	f000 f96e 	bl	800b23c <__swsetup_r>
 800af60:	b1c0      	cbz	r0, 800af94 <_vfiprintf_r+0x78>
 800af62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af64:	07dc      	lsls	r4, r3, #31
 800af66:	d50e      	bpl.n	800af86 <_vfiprintf_r+0x6a>
 800af68:	f04f 30ff 	mov.w	r0, #4294967295
 800af6c:	b01d      	add	sp, #116	; 0x74
 800af6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af72:	4b7b      	ldr	r3, [pc, #492]	; (800b160 <_vfiprintf_r+0x244>)
 800af74:	429d      	cmp	r5, r3
 800af76:	d101      	bne.n	800af7c <_vfiprintf_r+0x60>
 800af78:	68b5      	ldr	r5, [r6, #8]
 800af7a:	e7df      	b.n	800af3c <_vfiprintf_r+0x20>
 800af7c:	4b79      	ldr	r3, [pc, #484]	; (800b164 <_vfiprintf_r+0x248>)
 800af7e:	429d      	cmp	r5, r3
 800af80:	bf08      	it	eq
 800af82:	68f5      	ldreq	r5, [r6, #12]
 800af84:	e7da      	b.n	800af3c <_vfiprintf_r+0x20>
 800af86:	89ab      	ldrh	r3, [r5, #12]
 800af88:	0598      	lsls	r0, r3, #22
 800af8a:	d4ed      	bmi.n	800af68 <_vfiprintf_r+0x4c>
 800af8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af8e:	f000 fb84 	bl	800b69a <__retarget_lock_release_recursive>
 800af92:	e7e9      	b.n	800af68 <_vfiprintf_r+0x4c>
 800af94:	2300      	movs	r3, #0
 800af96:	9309      	str	r3, [sp, #36]	; 0x24
 800af98:	2320      	movs	r3, #32
 800af9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800afa2:	2330      	movs	r3, #48	; 0x30
 800afa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b168 <_vfiprintf_r+0x24c>
 800afa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afac:	f04f 0901 	mov.w	r9, #1
 800afb0:	4623      	mov	r3, r4
 800afb2:	469a      	mov	sl, r3
 800afb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afb8:	b10a      	cbz	r2, 800afbe <_vfiprintf_r+0xa2>
 800afba:	2a25      	cmp	r2, #37	; 0x25
 800afbc:	d1f9      	bne.n	800afb2 <_vfiprintf_r+0x96>
 800afbe:	ebba 0b04 	subs.w	fp, sl, r4
 800afc2:	d00b      	beq.n	800afdc <_vfiprintf_r+0xc0>
 800afc4:	465b      	mov	r3, fp
 800afc6:	4622      	mov	r2, r4
 800afc8:	4629      	mov	r1, r5
 800afca:	4630      	mov	r0, r6
 800afcc:	f7ff ff94 	bl	800aef8 <__sfputs_r>
 800afd0:	3001      	adds	r0, #1
 800afd2:	f000 80aa 	beq.w	800b12a <_vfiprintf_r+0x20e>
 800afd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afd8:	445a      	add	r2, fp
 800afda:	9209      	str	r2, [sp, #36]	; 0x24
 800afdc:	f89a 3000 	ldrb.w	r3, [sl]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f000 80a2 	beq.w	800b12a <_vfiprintf_r+0x20e>
 800afe6:	2300      	movs	r3, #0
 800afe8:	f04f 32ff 	mov.w	r2, #4294967295
 800afec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aff0:	f10a 0a01 	add.w	sl, sl, #1
 800aff4:	9304      	str	r3, [sp, #16]
 800aff6:	9307      	str	r3, [sp, #28]
 800aff8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800affc:	931a      	str	r3, [sp, #104]	; 0x68
 800affe:	4654      	mov	r4, sl
 800b000:	2205      	movs	r2, #5
 800b002:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b006:	4858      	ldr	r0, [pc, #352]	; (800b168 <_vfiprintf_r+0x24c>)
 800b008:	f7f5 f902 	bl	8000210 <memchr>
 800b00c:	9a04      	ldr	r2, [sp, #16]
 800b00e:	b9d8      	cbnz	r0, 800b048 <_vfiprintf_r+0x12c>
 800b010:	06d1      	lsls	r1, r2, #27
 800b012:	bf44      	itt	mi
 800b014:	2320      	movmi	r3, #32
 800b016:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b01a:	0713      	lsls	r3, r2, #28
 800b01c:	bf44      	itt	mi
 800b01e:	232b      	movmi	r3, #43	; 0x2b
 800b020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b024:	f89a 3000 	ldrb.w	r3, [sl]
 800b028:	2b2a      	cmp	r3, #42	; 0x2a
 800b02a:	d015      	beq.n	800b058 <_vfiprintf_r+0x13c>
 800b02c:	9a07      	ldr	r2, [sp, #28]
 800b02e:	4654      	mov	r4, sl
 800b030:	2000      	movs	r0, #0
 800b032:	f04f 0c0a 	mov.w	ip, #10
 800b036:	4621      	mov	r1, r4
 800b038:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b03c:	3b30      	subs	r3, #48	; 0x30
 800b03e:	2b09      	cmp	r3, #9
 800b040:	d94e      	bls.n	800b0e0 <_vfiprintf_r+0x1c4>
 800b042:	b1b0      	cbz	r0, 800b072 <_vfiprintf_r+0x156>
 800b044:	9207      	str	r2, [sp, #28]
 800b046:	e014      	b.n	800b072 <_vfiprintf_r+0x156>
 800b048:	eba0 0308 	sub.w	r3, r0, r8
 800b04c:	fa09 f303 	lsl.w	r3, r9, r3
 800b050:	4313      	orrs	r3, r2
 800b052:	9304      	str	r3, [sp, #16]
 800b054:	46a2      	mov	sl, r4
 800b056:	e7d2      	b.n	800affe <_vfiprintf_r+0xe2>
 800b058:	9b03      	ldr	r3, [sp, #12]
 800b05a:	1d19      	adds	r1, r3, #4
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	9103      	str	r1, [sp, #12]
 800b060:	2b00      	cmp	r3, #0
 800b062:	bfbb      	ittet	lt
 800b064:	425b      	neglt	r3, r3
 800b066:	f042 0202 	orrlt.w	r2, r2, #2
 800b06a:	9307      	strge	r3, [sp, #28]
 800b06c:	9307      	strlt	r3, [sp, #28]
 800b06e:	bfb8      	it	lt
 800b070:	9204      	strlt	r2, [sp, #16]
 800b072:	7823      	ldrb	r3, [r4, #0]
 800b074:	2b2e      	cmp	r3, #46	; 0x2e
 800b076:	d10c      	bne.n	800b092 <_vfiprintf_r+0x176>
 800b078:	7863      	ldrb	r3, [r4, #1]
 800b07a:	2b2a      	cmp	r3, #42	; 0x2a
 800b07c:	d135      	bne.n	800b0ea <_vfiprintf_r+0x1ce>
 800b07e:	9b03      	ldr	r3, [sp, #12]
 800b080:	1d1a      	adds	r2, r3, #4
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	9203      	str	r2, [sp, #12]
 800b086:	2b00      	cmp	r3, #0
 800b088:	bfb8      	it	lt
 800b08a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b08e:	3402      	adds	r4, #2
 800b090:	9305      	str	r3, [sp, #20]
 800b092:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b178 <_vfiprintf_r+0x25c>
 800b096:	7821      	ldrb	r1, [r4, #0]
 800b098:	2203      	movs	r2, #3
 800b09a:	4650      	mov	r0, sl
 800b09c:	f7f5 f8b8 	bl	8000210 <memchr>
 800b0a0:	b140      	cbz	r0, 800b0b4 <_vfiprintf_r+0x198>
 800b0a2:	2340      	movs	r3, #64	; 0x40
 800b0a4:	eba0 000a 	sub.w	r0, r0, sl
 800b0a8:	fa03 f000 	lsl.w	r0, r3, r0
 800b0ac:	9b04      	ldr	r3, [sp, #16]
 800b0ae:	4303      	orrs	r3, r0
 800b0b0:	3401      	adds	r4, #1
 800b0b2:	9304      	str	r3, [sp, #16]
 800b0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b8:	482c      	ldr	r0, [pc, #176]	; (800b16c <_vfiprintf_r+0x250>)
 800b0ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0be:	2206      	movs	r2, #6
 800b0c0:	f7f5 f8a6 	bl	8000210 <memchr>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	d03f      	beq.n	800b148 <_vfiprintf_r+0x22c>
 800b0c8:	4b29      	ldr	r3, [pc, #164]	; (800b170 <_vfiprintf_r+0x254>)
 800b0ca:	bb1b      	cbnz	r3, 800b114 <_vfiprintf_r+0x1f8>
 800b0cc:	9b03      	ldr	r3, [sp, #12]
 800b0ce:	3307      	adds	r3, #7
 800b0d0:	f023 0307 	bic.w	r3, r3, #7
 800b0d4:	3308      	adds	r3, #8
 800b0d6:	9303      	str	r3, [sp, #12]
 800b0d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0da:	443b      	add	r3, r7
 800b0dc:	9309      	str	r3, [sp, #36]	; 0x24
 800b0de:	e767      	b.n	800afb0 <_vfiprintf_r+0x94>
 800b0e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0e4:	460c      	mov	r4, r1
 800b0e6:	2001      	movs	r0, #1
 800b0e8:	e7a5      	b.n	800b036 <_vfiprintf_r+0x11a>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	3401      	adds	r4, #1
 800b0ee:	9305      	str	r3, [sp, #20]
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	f04f 0c0a 	mov.w	ip, #10
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0fc:	3a30      	subs	r2, #48	; 0x30
 800b0fe:	2a09      	cmp	r2, #9
 800b100:	d903      	bls.n	800b10a <_vfiprintf_r+0x1ee>
 800b102:	2b00      	cmp	r3, #0
 800b104:	d0c5      	beq.n	800b092 <_vfiprintf_r+0x176>
 800b106:	9105      	str	r1, [sp, #20]
 800b108:	e7c3      	b.n	800b092 <_vfiprintf_r+0x176>
 800b10a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b10e:	4604      	mov	r4, r0
 800b110:	2301      	movs	r3, #1
 800b112:	e7f0      	b.n	800b0f6 <_vfiprintf_r+0x1da>
 800b114:	ab03      	add	r3, sp, #12
 800b116:	9300      	str	r3, [sp, #0]
 800b118:	462a      	mov	r2, r5
 800b11a:	4b16      	ldr	r3, [pc, #88]	; (800b174 <_vfiprintf_r+0x258>)
 800b11c:	a904      	add	r1, sp, #16
 800b11e:	4630      	mov	r0, r6
 800b120:	f7fd fc50 	bl	80089c4 <_printf_float>
 800b124:	4607      	mov	r7, r0
 800b126:	1c78      	adds	r0, r7, #1
 800b128:	d1d6      	bne.n	800b0d8 <_vfiprintf_r+0x1bc>
 800b12a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b12c:	07d9      	lsls	r1, r3, #31
 800b12e:	d405      	bmi.n	800b13c <_vfiprintf_r+0x220>
 800b130:	89ab      	ldrh	r3, [r5, #12]
 800b132:	059a      	lsls	r2, r3, #22
 800b134:	d402      	bmi.n	800b13c <_vfiprintf_r+0x220>
 800b136:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b138:	f000 faaf 	bl	800b69a <__retarget_lock_release_recursive>
 800b13c:	89ab      	ldrh	r3, [r5, #12]
 800b13e:	065b      	lsls	r3, r3, #25
 800b140:	f53f af12 	bmi.w	800af68 <_vfiprintf_r+0x4c>
 800b144:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b146:	e711      	b.n	800af6c <_vfiprintf_r+0x50>
 800b148:	ab03      	add	r3, sp, #12
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	462a      	mov	r2, r5
 800b14e:	4b09      	ldr	r3, [pc, #36]	; (800b174 <_vfiprintf_r+0x258>)
 800b150:	a904      	add	r1, sp, #16
 800b152:	4630      	mov	r0, r6
 800b154:	f7fd feda 	bl	8008f0c <_printf_i>
 800b158:	e7e4      	b.n	800b124 <_vfiprintf_r+0x208>
 800b15a:	bf00      	nop
 800b15c:	080c8744 	.word	0x080c8744
 800b160:	080c8764 	.word	0x080c8764
 800b164:	080c8724 	.word	0x080c8724
 800b168:	080c85cc 	.word	0x080c85cc
 800b16c:	080c85d6 	.word	0x080c85d6
 800b170:	080089c5 	.word	0x080089c5
 800b174:	0800aef9 	.word	0x0800aef9
 800b178:	080c85d2 	.word	0x080c85d2

0800b17c <__swbuf_r>:
 800b17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b17e:	460e      	mov	r6, r1
 800b180:	4614      	mov	r4, r2
 800b182:	4605      	mov	r5, r0
 800b184:	b118      	cbz	r0, 800b18e <__swbuf_r+0x12>
 800b186:	6983      	ldr	r3, [r0, #24]
 800b188:	b90b      	cbnz	r3, 800b18e <__swbuf_r+0x12>
 800b18a:	f000 f9e7 	bl	800b55c <__sinit>
 800b18e:	4b21      	ldr	r3, [pc, #132]	; (800b214 <__swbuf_r+0x98>)
 800b190:	429c      	cmp	r4, r3
 800b192:	d12b      	bne.n	800b1ec <__swbuf_r+0x70>
 800b194:	686c      	ldr	r4, [r5, #4]
 800b196:	69a3      	ldr	r3, [r4, #24]
 800b198:	60a3      	str	r3, [r4, #8]
 800b19a:	89a3      	ldrh	r3, [r4, #12]
 800b19c:	071a      	lsls	r2, r3, #28
 800b19e:	d52f      	bpl.n	800b200 <__swbuf_r+0x84>
 800b1a0:	6923      	ldr	r3, [r4, #16]
 800b1a2:	b36b      	cbz	r3, 800b200 <__swbuf_r+0x84>
 800b1a4:	6923      	ldr	r3, [r4, #16]
 800b1a6:	6820      	ldr	r0, [r4, #0]
 800b1a8:	1ac0      	subs	r0, r0, r3
 800b1aa:	6963      	ldr	r3, [r4, #20]
 800b1ac:	b2f6      	uxtb	r6, r6
 800b1ae:	4283      	cmp	r3, r0
 800b1b0:	4637      	mov	r7, r6
 800b1b2:	dc04      	bgt.n	800b1be <__swbuf_r+0x42>
 800b1b4:	4621      	mov	r1, r4
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	f000 f93c 	bl	800b434 <_fflush_r>
 800b1bc:	bb30      	cbnz	r0, 800b20c <__swbuf_r+0x90>
 800b1be:	68a3      	ldr	r3, [r4, #8]
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	60a3      	str	r3, [r4, #8]
 800b1c4:	6823      	ldr	r3, [r4, #0]
 800b1c6:	1c5a      	adds	r2, r3, #1
 800b1c8:	6022      	str	r2, [r4, #0]
 800b1ca:	701e      	strb	r6, [r3, #0]
 800b1cc:	6963      	ldr	r3, [r4, #20]
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	4283      	cmp	r3, r0
 800b1d2:	d004      	beq.n	800b1de <__swbuf_r+0x62>
 800b1d4:	89a3      	ldrh	r3, [r4, #12]
 800b1d6:	07db      	lsls	r3, r3, #31
 800b1d8:	d506      	bpl.n	800b1e8 <__swbuf_r+0x6c>
 800b1da:	2e0a      	cmp	r6, #10
 800b1dc:	d104      	bne.n	800b1e8 <__swbuf_r+0x6c>
 800b1de:	4621      	mov	r1, r4
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	f000 f927 	bl	800b434 <_fflush_r>
 800b1e6:	b988      	cbnz	r0, 800b20c <__swbuf_r+0x90>
 800b1e8:	4638      	mov	r0, r7
 800b1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1ec:	4b0a      	ldr	r3, [pc, #40]	; (800b218 <__swbuf_r+0x9c>)
 800b1ee:	429c      	cmp	r4, r3
 800b1f0:	d101      	bne.n	800b1f6 <__swbuf_r+0x7a>
 800b1f2:	68ac      	ldr	r4, [r5, #8]
 800b1f4:	e7cf      	b.n	800b196 <__swbuf_r+0x1a>
 800b1f6:	4b09      	ldr	r3, [pc, #36]	; (800b21c <__swbuf_r+0xa0>)
 800b1f8:	429c      	cmp	r4, r3
 800b1fa:	bf08      	it	eq
 800b1fc:	68ec      	ldreq	r4, [r5, #12]
 800b1fe:	e7ca      	b.n	800b196 <__swbuf_r+0x1a>
 800b200:	4621      	mov	r1, r4
 800b202:	4628      	mov	r0, r5
 800b204:	f000 f81a 	bl	800b23c <__swsetup_r>
 800b208:	2800      	cmp	r0, #0
 800b20a:	d0cb      	beq.n	800b1a4 <__swbuf_r+0x28>
 800b20c:	f04f 37ff 	mov.w	r7, #4294967295
 800b210:	e7ea      	b.n	800b1e8 <__swbuf_r+0x6c>
 800b212:	bf00      	nop
 800b214:	080c8744 	.word	0x080c8744
 800b218:	080c8764 	.word	0x080c8764
 800b21c:	080c8724 	.word	0x080c8724

0800b220 <__ascii_wctomb>:
 800b220:	b149      	cbz	r1, 800b236 <__ascii_wctomb+0x16>
 800b222:	2aff      	cmp	r2, #255	; 0xff
 800b224:	bf85      	ittet	hi
 800b226:	238a      	movhi	r3, #138	; 0x8a
 800b228:	6003      	strhi	r3, [r0, #0]
 800b22a:	700a      	strbls	r2, [r1, #0]
 800b22c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b230:	bf98      	it	ls
 800b232:	2001      	movls	r0, #1
 800b234:	4770      	bx	lr
 800b236:	4608      	mov	r0, r1
 800b238:	4770      	bx	lr
	...

0800b23c <__swsetup_r>:
 800b23c:	4b32      	ldr	r3, [pc, #200]	; (800b308 <__swsetup_r+0xcc>)
 800b23e:	b570      	push	{r4, r5, r6, lr}
 800b240:	681d      	ldr	r5, [r3, #0]
 800b242:	4606      	mov	r6, r0
 800b244:	460c      	mov	r4, r1
 800b246:	b125      	cbz	r5, 800b252 <__swsetup_r+0x16>
 800b248:	69ab      	ldr	r3, [r5, #24]
 800b24a:	b913      	cbnz	r3, 800b252 <__swsetup_r+0x16>
 800b24c:	4628      	mov	r0, r5
 800b24e:	f000 f985 	bl	800b55c <__sinit>
 800b252:	4b2e      	ldr	r3, [pc, #184]	; (800b30c <__swsetup_r+0xd0>)
 800b254:	429c      	cmp	r4, r3
 800b256:	d10f      	bne.n	800b278 <__swsetup_r+0x3c>
 800b258:	686c      	ldr	r4, [r5, #4]
 800b25a:	89a3      	ldrh	r3, [r4, #12]
 800b25c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b260:	0719      	lsls	r1, r3, #28
 800b262:	d42c      	bmi.n	800b2be <__swsetup_r+0x82>
 800b264:	06dd      	lsls	r5, r3, #27
 800b266:	d411      	bmi.n	800b28c <__swsetup_r+0x50>
 800b268:	2309      	movs	r3, #9
 800b26a:	6033      	str	r3, [r6, #0]
 800b26c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b270:	81a3      	strh	r3, [r4, #12]
 800b272:	f04f 30ff 	mov.w	r0, #4294967295
 800b276:	e03e      	b.n	800b2f6 <__swsetup_r+0xba>
 800b278:	4b25      	ldr	r3, [pc, #148]	; (800b310 <__swsetup_r+0xd4>)
 800b27a:	429c      	cmp	r4, r3
 800b27c:	d101      	bne.n	800b282 <__swsetup_r+0x46>
 800b27e:	68ac      	ldr	r4, [r5, #8]
 800b280:	e7eb      	b.n	800b25a <__swsetup_r+0x1e>
 800b282:	4b24      	ldr	r3, [pc, #144]	; (800b314 <__swsetup_r+0xd8>)
 800b284:	429c      	cmp	r4, r3
 800b286:	bf08      	it	eq
 800b288:	68ec      	ldreq	r4, [r5, #12]
 800b28a:	e7e6      	b.n	800b25a <__swsetup_r+0x1e>
 800b28c:	0758      	lsls	r0, r3, #29
 800b28e:	d512      	bpl.n	800b2b6 <__swsetup_r+0x7a>
 800b290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b292:	b141      	cbz	r1, 800b2a6 <__swsetup_r+0x6a>
 800b294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b298:	4299      	cmp	r1, r3
 800b29a:	d002      	beq.n	800b2a2 <__swsetup_r+0x66>
 800b29c:	4630      	mov	r0, r6
 800b29e:	f7ff fb31 	bl	800a904 <_free_r>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	6363      	str	r3, [r4, #52]	; 0x34
 800b2a6:	89a3      	ldrh	r3, [r4, #12]
 800b2a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b2ac:	81a3      	strh	r3, [r4, #12]
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	6063      	str	r3, [r4, #4]
 800b2b2:	6923      	ldr	r3, [r4, #16]
 800b2b4:	6023      	str	r3, [r4, #0]
 800b2b6:	89a3      	ldrh	r3, [r4, #12]
 800b2b8:	f043 0308 	orr.w	r3, r3, #8
 800b2bc:	81a3      	strh	r3, [r4, #12]
 800b2be:	6923      	ldr	r3, [r4, #16]
 800b2c0:	b94b      	cbnz	r3, 800b2d6 <__swsetup_r+0x9a>
 800b2c2:	89a3      	ldrh	r3, [r4, #12]
 800b2c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b2c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2cc:	d003      	beq.n	800b2d6 <__swsetup_r+0x9a>
 800b2ce:	4621      	mov	r1, r4
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	f000 fa09 	bl	800b6e8 <__smakebuf_r>
 800b2d6:	89a0      	ldrh	r0, [r4, #12]
 800b2d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2dc:	f010 0301 	ands.w	r3, r0, #1
 800b2e0:	d00a      	beq.n	800b2f8 <__swsetup_r+0xbc>
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	60a3      	str	r3, [r4, #8]
 800b2e6:	6963      	ldr	r3, [r4, #20]
 800b2e8:	425b      	negs	r3, r3
 800b2ea:	61a3      	str	r3, [r4, #24]
 800b2ec:	6923      	ldr	r3, [r4, #16]
 800b2ee:	b943      	cbnz	r3, 800b302 <__swsetup_r+0xc6>
 800b2f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b2f4:	d1ba      	bne.n	800b26c <__swsetup_r+0x30>
 800b2f6:	bd70      	pop	{r4, r5, r6, pc}
 800b2f8:	0781      	lsls	r1, r0, #30
 800b2fa:	bf58      	it	pl
 800b2fc:	6963      	ldrpl	r3, [r4, #20]
 800b2fe:	60a3      	str	r3, [r4, #8]
 800b300:	e7f4      	b.n	800b2ec <__swsetup_r+0xb0>
 800b302:	2000      	movs	r0, #0
 800b304:	e7f7      	b.n	800b2f6 <__swsetup_r+0xba>
 800b306:	bf00      	nop
 800b308:	20000010 	.word	0x20000010
 800b30c:	080c8744 	.word	0x080c8744
 800b310:	080c8764 	.word	0x080c8764
 800b314:	080c8724 	.word	0x080c8724

0800b318 <abort>:
 800b318:	b508      	push	{r3, lr}
 800b31a:	2006      	movs	r0, #6
 800b31c:	f000 fa54 	bl	800b7c8 <raise>
 800b320:	2001      	movs	r0, #1
 800b322:	f7f7 fbd1 	bl	8002ac8 <_exit>
	...

0800b328 <__sflush_r>:
 800b328:	898a      	ldrh	r2, [r1, #12]
 800b32a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b32e:	4605      	mov	r5, r0
 800b330:	0710      	lsls	r0, r2, #28
 800b332:	460c      	mov	r4, r1
 800b334:	d458      	bmi.n	800b3e8 <__sflush_r+0xc0>
 800b336:	684b      	ldr	r3, [r1, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	dc05      	bgt.n	800b348 <__sflush_r+0x20>
 800b33c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b33e:	2b00      	cmp	r3, #0
 800b340:	dc02      	bgt.n	800b348 <__sflush_r+0x20>
 800b342:	2000      	movs	r0, #0
 800b344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b34a:	2e00      	cmp	r6, #0
 800b34c:	d0f9      	beq.n	800b342 <__sflush_r+0x1a>
 800b34e:	2300      	movs	r3, #0
 800b350:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b354:	682f      	ldr	r7, [r5, #0]
 800b356:	602b      	str	r3, [r5, #0]
 800b358:	d032      	beq.n	800b3c0 <__sflush_r+0x98>
 800b35a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b35c:	89a3      	ldrh	r3, [r4, #12]
 800b35e:	075a      	lsls	r2, r3, #29
 800b360:	d505      	bpl.n	800b36e <__sflush_r+0x46>
 800b362:	6863      	ldr	r3, [r4, #4]
 800b364:	1ac0      	subs	r0, r0, r3
 800b366:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b368:	b10b      	cbz	r3, 800b36e <__sflush_r+0x46>
 800b36a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b36c:	1ac0      	subs	r0, r0, r3
 800b36e:	2300      	movs	r3, #0
 800b370:	4602      	mov	r2, r0
 800b372:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b374:	6a21      	ldr	r1, [r4, #32]
 800b376:	4628      	mov	r0, r5
 800b378:	47b0      	blx	r6
 800b37a:	1c43      	adds	r3, r0, #1
 800b37c:	89a3      	ldrh	r3, [r4, #12]
 800b37e:	d106      	bne.n	800b38e <__sflush_r+0x66>
 800b380:	6829      	ldr	r1, [r5, #0]
 800b382:	291d      	cmp	r1, #29
 800b384:	d82c      	bhi.n	800b3e0 <__sflush_r+0xb8>
 800b386:	4a2a      	ldr	r2, [pc, #168]	; (800b430 <__sflush_r+0x108>)
 800b388:	40ca      	lsrs	r2, r1
 800b38a:	07d6      	lsls	r6, r2, #31
 800b38c:	d528      	bpl.n	800b3e0 <__sflush_r+0xb8>
 800b38e:	2200      	movs	r2, #0
 800b390:	6062      	str	r2, [r4, #4]
 800b392:	04d9      	lsls	r1, r3, #19
 800b394:	6922      	ldr	r2, [r4, #16]
 800b396:	6022      	str	r2, [r4, #0]
 800b398:	d504      	bpl.n	800b3a4 <__sflush_r+0x7c>
 800b39a:	1c42      	adds	r2, r0, #1
 800b39c:	d101      	bne.n	800b3a2 <__sflush_r+0x7a>
 800b39e:	682b      	ldr	r3, [r5, #0]
 800b3a0:	b903      	cbnz	r3, 800b3a4 <__sflush_r+0x7c>
 800b3a2:	6560      	str	r0, [r4, #84]	; 0x54
 800b3a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3a6:	602f      	str	r7, [r5, #0]
 800b3a8:	2900      	cmp	r1, #0
 800b3aa:	d0ca      	beq.n	800b342 <__sflush_r+0x1a>
 800b3ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3b0:	4299      	cmp	r1, r3
 800b3b2:	d002      	beq.n	800b3ba <__sflush_r+0x92>
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	f7ff faa5 	bl	800a904 <_free_r>
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	6360      	str	r0, [r4, #52]	; 0x34
 800b3be:	e7c1      	b.n	800b344 <__sflush_r+0x1c>
 800b3c0:	6a21      	ldr	r1, [r4, #32]
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	47b0      	blx	r6
 800b3c8:	1c41      	adds	r1, r0, #1
 800b3ca:	d1c7      	bne.n	800b35c <__sflush_r+0x34>
 800b3cc:	682b      	ldr	r3, [r5, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d0c4      	beq.n	800b35c <__sflush_r+0x34>
 800b3d2:	2b1d      	cmp	r3, #29
 800b3d4:	d001      	beq.n	800b3da <__sflush_r+0xb2>
 800b3d6:	2b16      	cmp	r3, #22
 800b3d8:	d101      	bne.n	800b3de <__sflush_r+0xb6>
 800b3da:	602f      	str	r7, [r5, #0]
 800b3dc:	e7b1      	b.n	800b342 <__sflush_r+0x1a>
 800b3de:	89a3      	ldrh	r3, [r4, #12]
 800b3e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3e4:	81a3      	strh	r3, [r4, #12]
 800b3e6:	e7ad      	b.n	800b344 <__sflush_r+0x1c>
 800b3e8:	690f      	ldr	r7, [r1, #16]
 800b3ea:	2f00      	cmp	r7, #0
 800b3ec:	d0a9      	beq.n	800b342 <__sflush_r+0x1a>
 800b3ee:	0793      	lsls	r3, r2, #30
 800b3f0:	680e      	ldr	r6, [r1, #0]
 800b3f2:	bf08      	it	eq
 800b3f4:	694b      	ldreq	r3, [r1, #20]
 800b3f6:	600f      	str	r7, [r1, #0]
 800b3f8:	bf18      	it	ne
 800b3fa:	2300      	movne	r3, #0
 800b3fc:	eba6 0807 	sub.w	r8, r6, r7
 800b400:	608b      	str	r3, [r1, #8]
 800b402:	f1b8 0f00 	cmp.w	r8, #0
 800b406:	dd9c      	ble.n	800b342 <__sflush_r+0x1a>
 800b408:	6a21      	ldr	r1, [r4, #32]
 800b40a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b40c:	4643      	mov	r3, r8
 800b40e:	463a      	mov	r2, r7
 800b410:	4628      	mov	r0, r5
 800b412:	47b0      	blx	r6
 800b414:	2800      	cmp	r0, #0
 800b416:	dc06      	bgt.n	800b426 <__sflush_r+0xfe>
 800b418:	89a3      	ldrh	r3, [r4, #12]
 800b41a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b41e:	81a3      	strh	r3, [r4, #12]
 800b420:	f04f 30ff 	mov.w	r0, #4294967295
 800b424:	e78e      	b.n	800b344 <__sflush_r+0x1c>
 800b426:	4407      	add	r7, r0
 800b428:	eba8 0800 	sub.w	r8, r8, r0
 800b42c:	e7e9      	b.n	800b402 <__sflush_r+0xda>
 800b42e:	bf00      	nop
 800b430:	20400001 	.word	0x20400001

0800b434 <_fflush_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	690b      	ldr	r3, [r1, #16]
 800b438:	4605      	mov	r5, r0
 800b43a:	460c      	mov	r4, r1
 800b43c:	b913      	cbnz	r3, 800b444 <_fflush_r+0x10>
 800b43e:	2500      	movs	r5, #0
 800b440:	4628      	mov	r0, r5
 800b442:	bd38      	pop	{r3, r4, r5, pc}
 800b444:	b118      	cbz	r0, 800b44e <_fflush_r+0x1a>
 800b446:	6983      	ldr	r3, [r0, #24]
 800b448:	b90b      	cbnz	r3, 800b44e <_fflush_r+0x1a>
 800b44a:	f000 f887 	bl	800b55c <__sinit>
 800b44e:	4b14      	ldr	r3, [pc, #80]	; (800b4a0 <_fflush_r+0x6c>)
 800b450:	429c      	cmp	r4, r3
 800b452:	d11b      	bne.n	800b48c <_fflush_r+0x58>
 800b454:	686c      	ldr	r4, [r5, #4]
 800b456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d0ef      	beq.n	800b43e <_fflush_r+0xa>
 800b45e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b460:	07d0      	lsls	r0, r2, #31
 800b462:	d404      	bmi.n	800b46e <_fflush_r+0x3a>
 800b464:	0599      	lsls	r1, r3, #22
 800b466:	d402      	bmi.n	800b46e <_fflush_r+0x3a>
 800b468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b46a:	f000 f915 	bl	800b698 <__retarget_lock_acquire_recursive>
 800b46e:	4628      	mov	r0, r5
 800b470:	4621      	mov	r1, r4
 800b472:	f7ff ff59 	bl	800b328 <__sflush_r>
 800b476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b478:	07da      	lsls	r2, r3, #31
 800b47a:	4605      	mov	r5, r0
 800b47c:	d4e0      	bmi.n	800b440 <_fflush_r+0xc>
 800b47e:	89a3      	ldrh	r3, [r4, #12]
 800b480:	059b      	lsls	r3, r3, #22
 800b482:	d4dd      	bmi.n	800b440 <_fflush_r+0xc>
 800b484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b486:	f000 f908 	bl	800b69a <__retarget_lock_release_recursive>
 800b48a:	e7d9      	b.n	800b440 <_fflush_r+0xc>
 800b48c:	4b05      	ldr	r3, [pc, #20]	; (800b4a4 <_fflush_r+0x70>)
 800b48e:	429c      	cmp	r4, r3
 800b490:	d101      	bne.n	800b496 <_fflush_r+0x62>
 800b492:	68ac      	ldr	r4, [r5, #8]
 800b494:	e7df      	b.n	800b456 <_fflush_r+0x22>
 800b496:	4b04      	ldr	r3, [pc, #16]	; (800b4a8 <_fflush_r+0x74>)
 800b498:	429c      	cmp	r4, r3
 800b49a:	bf08      	it	eq
 800b49c:	68ec      	ldreq	r4, [r5, #12]
 800b49e:	e7da      	b.n	800b456 <_fflush_r+0x22>
 800b4a0:	080c8744 	.word	0x080c8744
 800b4a4:	080c8764 	.word	0x080c8764
 800b4a8:	080c8724 	.word	0x080c8724

0800b4ac <std>:
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	b510      	push	{r4, lr}
 800b4b0:	4604      	mov	r4, r0
 800b4b2:	e9c0 3300 	strd	r3, r3, [r0]
 800b4b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4ba:	6083      	str	r3, [r0, #8]
 800b4bc:	8181      	strh	r1, [r0, #12]
 800b4be:	6643      	str	r3, [r0, #100]	; 0x64
 800b4c0:	81c2      	strh	r2, [r0, #14]
 800b4c2:	6183      	str	r3, [r0, #24]
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	2208      	movs	r2, #8
 800b4c8:	305c      	adds	r0, #92	; 0x5c
 800b4ca:	f7fd f9d3 	bl	8008874 <memset>
 800b4ce:	4b05      	ldr	r3, [pc, #20]	; (800b4e4 <std+0x38>)
 800b4d0:	6263      	str	r3, [r4, #36]	; 0x24
 800b4d2:	4b05      	ldr	r3, [pc, #20]	; (800b4e8 <std+0x3c>)
 800b4d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4d6:	4b05      	ldr	r3, [pc, #20]	; (800b4ec <std+0x40>)
 800b4d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4da:	4b05      	ldr	r3, [pc, #20]	; (800b4f0 <std+0x44>)
 800b4dc:	6224      	str	r4, [r4, #32]
 800b4de:	6323      	str	r3, [r4, #48]	; 0x30
 800b4e0:	bd10      	pop	{r4, pc}
 800b4e2:	bf00      	nop
 800b4e4:	0800b801 	.word	0x0800b801
 800b4e8:	0800b823 	.word	0x0800b823
 800b4ec:	0800b85b 	.word	0x0800b85b
 800b4f0:	0800b87f 	.word	0x0800b87f

0800b4f4 <_cleanup_r>:
 800b4f4:	4901      	ldr	r1, [pc, #4]	; (800b4fc <_cleanup_r+0x8>)
 800b4f6:	f000 b8af 	b.w	800b658 <_fwalk_reent>
 800b4fa:	bf00      	nop
 800b4fc:	0800b435 	.word	0x0800b435

0800b500 <__sfmoreglue>:
 800b500:	b570      	push	{r4, r5, r6, lr}
 800b502:	2268      	movs	r2, #104	; 0x68
 800b504:	1e4d      	subs	r5, r1, #1
 800b506:	4355      	muls	r5, r2
 800b508:	460e      	mov	r6, r1
 800b50a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b50e:	f7ff fa65 	bl	800a9dc <_malloc_r>
 800b512:	4604      	mov	r4, r0
 800b514:	b140      	cbz	r0, 800b528 <__sfmoreglue+0x28>
 800b516:	2100      	movs	r1, #0
 800b518:	e9c0 1600 	strd	r1, r6, [r0]
 800b51c:	300c      	adds	r0, #12
 800b51e:	60a0      	str	r0, [r4, #8]
 800b520:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b524:	f7fd f9a6 	bl	8008874 <memset>
 800b528:	4620      	mov	r0, r4
 800b52a:	bd70      	pop	{r4, r5, r6, pc}

0800b52c <__sfp_lock_acquire>:
 800b52c:	4801      	ldr	r0, [pc, #4]	; (800b534 <__sfp_lock_acquire+0x8>)
 800b52e:	f000 b8b3 	b.w	800b698 <__retarget_lock_acquire_recursive>
 800b532:	bf00      	nop
 800b534:	200004d1 	.word	0x200004d1

0800b538 <__sfp_lock_release>:
 800b538:	4801      	ldr	r0, [pc, #4]	; (800b540 <__sfp_lock_release+0x8>)
 800b53a:	f000 b8ae 	b.w	800b69a <__retarget_lock_release_recursive>
 800b53e:	bf00      	nop
 800b540:	200004d1 	.word	0x200004d1

0800b544 <__sinit_lock_acquire>:
 800b544:	4801      	ldr	r0, [pc, #4]	; (800b54c <__sinit_lock_acquire+0x8>)
 800b546:	f000 b8a7 	b.w	800b698 <__retarget_lock_acquire_recursive>
 800b54a:	bf00      	nop
 800b54c:	200004d2 	.word	0x200004d2

0800b550 <__sinit_lock_release>:
 800b550:	4801      	ldr	r0, [pc, #4]	; (800b558 <__sinit_lock_release+0x8>)
 800b552:	f000 b8a2 	b.w	800b69a <__retarget_lock_release_recursive>
 800b556:	bf00      	nop
 800b558:	200004d2 	.word	0x200004d2

0800b55c <__sinit>:
 800b55c:	b510      	push	{r4, lr}
 800b55e:	4604      	mov	r4, r0
 800b560:	f7ff fff0 	bl	800b544 <__sinit_lock_acquire>
 800b564:	69a3      	ldr	r3, [r4, #24]
 800b566:	b11b      	cbz	r3, 800b570 <__sinit+0x14>
 800b568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b56c:	f7ff bff0 	b.w	800b550 <__sinit_lock_release>
 800b570:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b574:	6523      	str	r3, [r4, #80]	; 0x50
 800b576:	4b13      	ldr	r3, [pc, #76]	; (800b5c4 <__sinit+0x68>)
 800b578:	4a13      	ldr	r2, [pc, #76]	; (800b5c8 <__sinit+0x6c>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b57e:	42a3      	cmp	r3, r4
 800b580:	bf04      	itt	eq
 800b582:	2301      	moveq	r3, #1
 800b584:	61a3      	streq	r3, [r4, #24]
 800b586:	4620      	mov	r0, r4
 800b588:	f000 f820 	bl	800b5cc <__sfp>
 800b58c:	6060      	str	r0, [r4, #4]
 800b58e:	4620      	mov	r0, r4
 800b590:	f000 f81c 	bl	800b5cc <__sfp>
 800b594:	60a0      	str	r0, [r4, #8]
 800b596:	4620      	mov	r0, r4
 800b598:	f000 f818 	bl	800b5cc <__sfp>
 800b59c:	2200      	movs	r2, #0
 800b59e:	60e0      	str	r0, [r4, #12]
 800b5a0:	2104      	movs	r1, #4
 800b5a2:	6860      	ldr	r0, [r4, #4]
 800b5a4:	f7ff ff82 	bl	800b4ac <std>
 800b5a8:	68a0      	ldr	r0, [r4, #8]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	2109      	movs	r1, #9
 800b5ae:	f7ff ff7d 	bl	800b4ac <std>
 800b5b2:	68e0      	ldr	r0, [r4, #12]
 800b5b4:	2202      	movs	r2, #2
 800b5b6:	2112      	movs	r1, #18
 800b5b8:	f7ff ff78 	bl	800b4ac <std>
 800b5bc:	2301      	movs	r3, #1
 800b5be:	61a3      	str	r3, [r4, #24]
 800b5c0:	e7d2      	b.n	800b568 <__sinit+0xc>
 800b5c2:	bf00      	nop
 800b5c4:	080c83a8 	.word	0x080c83a8
 800b5c8:	0800b4f5 	.word	0x0800b4f5

0800b5cc <__sfp>:
 800b5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ce:	4607      	mov	r7, r0
 800b5d0:	f7ff ffac 	bl	800b52c <__sfp_lock_acquire>
 800b5d4:	4b1e      	ldr	r3, [pc, #120]	; (800b650 <__sfp+0x84>)
 800b5d6:	681e      	ldr	r6, [r3, #0]
 800b5d8:	69b3      	ldr	r3, [r6, #24]
 800b5da:	b913      	cbnz	r3, 800b5e2 <__sfp+0x16>
 800b5dc:	4630      	mov	r0, r6
 800b5de:	f7ff ffbd 	bl	800b55c <__sinit>
 800b5e2:	3648      	adds	r6, #72	; 0x48
 800b5e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	d503      	bpl.n	800b5f4 <__sfp+0x28>
 800b5ec:	6833      	ldr	r3, [r6, #0]
 800b5ee:	b30b      	cbz	r3, 800b634 <__sfp+0x68>
 800b5f0:	6836      	ldr	r6, [r6, #0]
 800b5f2:	e7f7      	b.n	800b5e4 <__sfp+0x18>
 800b5f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b5f8:	b9d5      	cbnz	r5, 800b630 <__sfp+0x64>
 800b5fa:	4b16      	ldr	r3, [pc, #88]	; (800b654 <__sfp+0x88>)
 800b5fc:	60e3      	str	r3, [r4, #12]
 800b5fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b602:	6665      	str	r5, [r4, #100]	; 0x64
 800b604:	f000 f847 	bl	800b696 <__retarget_lock_init_recursive>
 800b608:	f7ff ff96 	bl	800b538 <__sfp_lock_release>
 800b60c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b610:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b614:	6025      	str	r5, [r4, #0]
 800b616:	61a5      	str	r5, [r4, #24]
 800b618:	2208      	movs	r2, #8
 800b61a:	4629      	mov	r1, r5
 800b61c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b620:	f7fd f928 	bl	8008874 <memset>
 800b624:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b628:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b62c:	4620      	mov	r0, r4
 800b62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b630:	3468      	adds	r4, #104	; 0x68
 800b632:	e7d9      	b.n	800b5e8 <__sfp+0x1c>
 800b634:	2104      	movs	r1, #4
 800b636:	4638      	mov	r0, r7
 800b638:	f7ff ff62 	bl	800b500 <__sfmoreglue>
 800b63c:	4604      	mov	r4, r0
 800b63e:	6030      	str	r0, [r6, #0]
 800b640:	2800      	cmp	r0, #0
 800b642:	d1d5      	bne.n	800b5f0 <__sfp+0x24>
 800b644:	f7ff ff78 	bl	800b538 <__sfp_lock_release>
 800b648:	230c      	movs	r3, #12
 800b64a:	603b      	str	r3, [r7, #0]
 800b64c:	e7ee      	b.n	800b62c <__sfp+0x60>
 800b64e:	bf00      	nop
 800b650:	080c83a8 	.word	0x080c83a8
 800b654:	ffff0001 	.word	0xffff0001

0800b658 <_fwalk_reent>:
 800b658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b65c:	4606      	mov	r6, r0
 800b65e:	4688      	mov	r8, r1
 800b660:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b664:	2700      	movs	r7, #0
 800b666:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b66a:	f1b9 0901 	subs.w	r9, r9, #1
 800b66e:	d505      	bpl.n	800b67c <_fwalk_reent+0x24>
 800b670:	6824      	ldr	r4, [r4, #0]
 800b672:	2c00      	cmp	r4, #0
 800b674:	d1f7      	bne.n	800b666 <_fwalk_reent+0xe>
 800b676:	4638      	mov	r0, r7
 800b678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b67c:	89ab      	ldrh	r3, [r5, #12]
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d907      	bls.n	800b692 <_fwalk_reent+0x3a>
 800b682:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b686:	3301      	adds	r3, #1
 800b688:	d003      	beq.n	800b692 <_fwalk_reent+0x3a>
 800b68a:	4629      	mov	r1, r5
 800b68c:	4630      	mov	r0, r6
 800b68e:	47c0      	blx	r8
 800b690:	4307      	orrs	r7, r0
 800b692:	3568      	adds	r5, #104	; 0x68
 800b694:	e7e9      	b.n	800b66a <_fwalk_reent+0x12>

0800b696 <__retarget_lock_init_recursive>:
 800b696:	4770      	bx	lr

0800b698 <__retarget_lock_acquire_recursive>:
 800b698:	4770      	bx	lr

0800b69a <__retarget_lock_release_recursive>:
 800b69a:	4770      	bx	lr

0800b69c <__swhatbuf_r>:
 800b69c:	b570      	push	{r4, r5, r6, lr}
 800b69e:	460e      	mov	r6, r1
 800b6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6a4:	2900      	cmp	r1, #0
 800b6a6:	b096      	sub	sp, #88	; 0x58
 800b6a8:	4614      	mov	r4, r2
 800b6aa:	461d      	mov	r5, r3
 800b6ac:	da08      	bge.n	800b6c0 <__swhatbuf_r+0x24>
 800b6ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	602a      	str	r2, [r5, #0]
 800b6b6:	061a      	lsls	r2, r3, #24
 800b6b8:	d410      	bmi.n	800b6dc <__swhatbuf_r+0x40>
 800b6ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6be:	e00e      	b.n	800b6de <__swhatbuf_r+0x42>
 800b6c0:	466a      	mov	r2, sp
 800b6c2:	f000 f903 	bl	800b8cc <_fstat_r>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	dbf1      	blt.n	800b6ae <__swhatbuf_r+0x12>
 800b6ca:	9a01      	ldr	r2, [sp, #4]
 800b6cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b6d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b6d4:	425a      	negs	r2, r3
 800b6d6:	415a      	adcs	r2, r3
 800b6d8:	602a      	str	r2, [r5, #0]
 800b6da:	e7ee      	b.n	800b6ba <__swhatbuf_r+0x1e>
 800b6dc:	2340      	movs	r3, #64	; 0x40
 800b6de:	2000      	movs	r0, #0
 800b6e0:	6023      	str	r3, [r4, #0]
 800b6e2:	b016      	add	sp, #88	; 0x58
 800b6e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b6e8 <__smakebuf_r>:
 800b6e8:	898b      	ldrh	r3, [r1, #12]
 800b6ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6ec:	079d      	lsls	r5, r3, #30
 800b6ee:	4606      	mov	r6, r0
 800b6f0:	460c      	mov	r4, r1
 800b6f2:	d507      	bpl.n	800b704 <__smakebuf_r+0x1c>
 800b6f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b6f8:	6023      	str	r3, [r4, #0]
 800b6fa:	6123      	str	r3, [r4, #16]
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	6163      	str	r3, [r4, #20]
 800b700:	b002      	add	sp, #8
 800b702:	bd70      	pop	{r4, r5, r6, pc}
 800b704:	ab01      	add	r3, sp, #4
 800b706:	466a      	mov	r2, sp
 800b708:	f7ff ffc8 	bl	800b69c <__swhatbuf_r>
 800b70c:	9900      	ldr	r1, [sp, #0]
 800b70e:	4605      	mov	r5, r0
 800b710:	4630      	mov	r0, r6
 800b712:	f7ff f963 	bl	800a9dc <_malloc_r>
 800b716:	b948      	cbnz	r0, 800b72c <__smakebuf_r+0x44>
 800b718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b71c:	059a      	lsls	r2, r3, #22
 800b71e:	d4ef      	bmi.n	800b700 <__smakebuf_r+0x18>
 800b720:	f023 0303 	bic.w	r3, r3, #3
 800b724:	f043 0302 	orr.w	r3, r3, #2
 800b728:	81a3      	strh	r3, [r4, #12]
 800b72a:	e7e3      	b.n	800b6f4 <__smakebuf_r+0xc>
 800b72c:	4b0d      	ldr	r3, [pc, #52]	; (800b764 <__smakebuf_r+0x7c>)
 800b72e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b730:	89a3      	ldrh	r3, [r4, #12]
 800b732:	6020      	str	r0, [r4, #0]
 800b734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b738:	81a3      	strh	r3, [r4, #12]
 800b73a:	9b00      	ldr	r3, [sp, #0]
 800b73c:	6163      	str	r3, [r4, #20]
 800b73e:	9b01      	ldr	r3, [sp, #4]
 800b740:	6120      	str	r0, [r4, #16]
 800b742:	b15b      	cbz	r3, 800b75c <__smakebuf_r+0x74>
 800b744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b748:	4630      	mov	r0, r6
 800b74a:	f000 f8d1 	bl	800b8f0 <_isatty_r>
 800b74e:	b128      	cbz	r0, 800b75c <__smakebuf_r+0x74>
 800b750:	89a3      	ldrh	r3, [r4, #12]
 800b752:	f023 0303 	bic.w	r3, r3, #3
 800b756:	f043 0301 	orr.w	r3, r3, #1
 800b75a:	81a3      	strh	r3, [r4, #12]
 800b75c:	89a0      	ldrh	r0, [r4, #12]
 800b75e:	4305      	orrs	r5, r0
 800b760:	81a5      	strh	r5, [r4, #12]
 800b762:	e7cd      	b.n	800b700 <__smakebuf_r+0x18>
 800b764:	0800b4f5 	.word	0x0800b4f5

0800b768 <_malloc_usable_size_r>:
 800b768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b76c:	1f18      	subs	r0, r3, #4
 800b76e:	2b00      	cmp	r3, #0
 800b770:	bfbc      	itt	lt
 800b772:	580b      	ldrlt	r3, [r1, r0]
 800b774:	18c0      	addlt	r0, r0, r3
 800b776:	4770      	bx	lr

0800b778 <_raise_r>:
 800b778:	291f      	cmp	r1, #31
 800b77a:	b538      	push	{r3, r4, r5, lr}
 800b77c:	4604      	mov	r4, r0
 800b77e:	460d      	mov	r5, r1
 800b780:	d904      	bls.n	800b78c <_raise_r+0x14>
 800b782:	2316      	movs	r3, #22
 800b784:	6003      	str	r3, [r0, #0]
 800b786:	f04f 30ff 	mov.w	r0, #4294967295
 800b78a:	bd38      	pop	{r3, r4, r5, pc}
 800b78c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b78e:	b112      	cbz	r2, 800b796 <_raise_r+0x1e>
 800b790:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b794:	b94b      	cbnz	r3, 800b7aa <_raise_r+0x32>
 800b796:	4620      	mov	r0, r4
 800b798:	f000 f830 	bl	800b7fc <_getpid_r>
 800b79c:	462a      	mov	r2, r5
 800b79e:	4601      	mov	r1, r0
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7a6:	f000 b817 	b.w	800b7d8 <_kill_r>
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d00a      	beq.n	800b7c4 <_raise_r+0x4c>
 800b7ae:	1c59      	adds	r1, r3, #1
 800b7b0:	d103      	bne.n	800b7ba <_raise_r+0x42>
 800b7b2:	2316      	movs	r3, #22
 800b7b4:	6003      	str	r3, [r0, #0]
 800b7b6:	2001      	movs	r0, #1
 800b7b8:	e7e7      	b.n	800b78a <_raise_r+0x12>
 800b7ba:	2400      	movs	r4, #0
 800b7bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	4798      	blx	r3
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	e7e0      	b.n	800b78a <_raise_r+0x12>

0800b7c8 <raise>:
 800b7c8:	4b02      	ldr	r3, [pc, #8]	; (800b7d4 <raise+0xc>)
 800b7ca:	4601      	mov	r1, r0
 800b7cc:	6818      	ldr	r0, [r3, #0]
 800b7ce:	f7ff bfd3 	b.w	800b778 <_raise_r>
 800b7d2:	bf00      	nop
 800b7d4:	20000010 	.word	0x20000010

0800b7d8 <_kill_r>:
 800b7d8:	b538      	push	{r3, r4, r5, lr}
 800b7da:	4d07      	ldr	r5, [pc, #28]	; (800b7f8 <_kill_r+0x20>)
 800b7dc:	2300      	movs	r3, #0
 800b7de:	4604      	mov	r4, r0
 800b7e0:	4608      	mov	r0, r1
 800b7e2:	4611      	mov	r1, r2
 800b7e4:	602b      	str	r3, [r5, #0]
 800b7e6:	f7f7 f95f 	bl	8002aa8 <_kill>
 800b7ea:	1c43      	adds	r3, r0, #1
 800b7ec:	d102      	bne.n	800b7f4 <_kill_r+0x1c>
 800b7ee:	682b      	ldr	r3, [r5, #0]
 800b7f0:	b103      	cbz	r3, 800b7f4 <_kill_r+0x1c>
 800b7f2:	6023      	str	r3, [r4, #0]
 800b7f4:	bd38      	pop	{r3, r4, r5, pc}
 800b7f6:	bf00      	nop
 800b7f8:	200004cc 	.word	0x200004cc

0800b7fc <_getpid_r>:
 800b7fc:	f7f7 b94c 	b.w	8002a98 <_getpid>

0800b800 <__sread>:
 800b800:	b510      	push	{r4, lr}
 800b802:	460c      	mov	r4, r1
 800b804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b808:	f000 f894 	bl	800b934 <_read_r>
 800b80c:	2800      	cmp	r0, #0
 800b80e:	bfab      	itete	ge
 800b810:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b812:	89a3      	ldrhlt	r3, [r4, #12]
 800b814:	181b      	addge	r3, r3, r0
 800b816:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b81a:	bfac      	ite	ge
 800b81c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b81e:	81a3      	strhlt	r3, [r4, #12]
 800b820:	bd10      	pop	{r4, pc}

0800b822 <__swrite>:
 800b822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b826:	461f      	mov	r7, r3
 800b828:	898b      	ldrh	r3, [r1, #12]
 800b82a:	05db      	lsls	r3, r3, #23
 800b82c:	4605      	mov	r5, r0
 800b82e:	460c      	mov	r4, r1
 800b830:	4616      	mov	r6, r2
 800b832:	d505      	bpl.n	800b840 <__swrite+0x1e>
 800b834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b838:	2302      	movs	r3, #2
 800b83a:	2200      	movs	r2, #0
 800b83c:	f000 f868 	bl	800b910 <_lseek_r>
 800b840:	89a3      	ldrh	r3, [r4, #12]
 800b842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b84a:	81a3      	strh	r3, [r4, #12]
 800b84c:	4632      	mov	r2, r6
 800b84e:	463b      	mov	r3, r7
 800b850:	4628      	mov	r0, r5
 800b852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b856:	f000 b817 	b.w	800b888 <_write_r>

0800b85a <__sseek>:
 800b85a:	b510      	push	{r4, lr}
 800b85c:	460c      	mov	r4, r1
 800b85e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b862:	f000 f855 	bl	800b910 <_lseek_r>
 800b866:	1c43      	adds	r3, r0, #1
 800b868:	89a3      	ldrh	r3, [r4, #12]
 800b86a:	bf15      	itete	ne
 800b86c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b86e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b872:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b876:	81a3      	strheq	r3, [r4, #12]
 800b878:	bf18      	it	ne
 800b87a:	81a3      	strhne	r3, [r4, #12]
 800b87c:	bd10      	pop	{r4, pc}

0800b87e <__sclose>:
 800b87e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b882:	f000 b813 	b.w	800b8ac <_close_r>
	...

0800b888 <_write_r>:
 800b888:	b538      	push	{r3, r4, r5, lr}
 800b88a:	4d07      	ldr	r5, [pc, #28]	; (800b8a8 <_write_r+0x20>)
 800b88c:	4604      	mov	r4, r0
 800b88e:	4608      	mov	r0, r1
 800b890:	4611      	mov	r1, r2
 800b892:	2200      	movs	r2, #0
 800b894:	602a      	str	r2, [r5, #0]
 800b896:	461a      	mov	r2, r3
 800b898:	f7f7 f93d 	bl	8002b16 <_write>
 800b89c:	1c43      	adds	r3, r0, #1
 800b89e:	d102      	bne.n	800b8a6 <_write_r+0x1e>
 800b8a0:	682b      	ldr	r3, [r5, #0]
 800b8a2:	b103      	cbz	r3, 800b8a6 <_write_r+0x1e>
 800b8a4:	6023      	str	r3, [r4, #0]
 800b8a6:	bd38      	pop	{r3, r4, r5, pc}
 800b8a8:	200004cc 	.word	0x200004cc

0800b8ac <_close_r>:
 800b8ac:	b538      	push	{r3, r4, r5, lr}
 800b8ae:	4d06      	ldr	r5, [pc, #24]	; (800b8c8 <_close_r+0x1c>)
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	4604      	mov	r4, r0
 800b8b4:	4608      	mov	r0, r1
 800b8b6:	602b      	str	r3, [r5, #0]
 800b8b8:	f7f7 f949 	bl	8002b4e <_close>
 800b8bc:	1c43      	adds	r3, r0, #1
 800b8be:	d102      	bne.n	800b8c6 <_close_r+0x1a>
 800b8c0:	682b      	ldr	r3, [r5, #0]
 800b8c2:	b103      	cbz	r3, 800b8c6 <_close_r+0x1a>
 800b8c4:	6023      	str	r3, [r4, #0]
 800b8c6:	bd38      	pop	{r3, r4, r5, pc}
 800b8c8:	200004cc 	.word	0x200004cc

0800b8cc <_fstat_r>:
 800b8cc:	b538      	push	{r3, r4, r5, lr}
 800b8ce:	4d07      	ldr	r5, [pc, #28]	; (800b8ec <_fstat_r+0x20>)
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	4608      	mov	r0, r1
 800b8d6:	4611      	mov	r1, r2
 800b8d8:	602b      	str	r3, [r5, #0]
 800b8da:	f7f7 f944 	bl	8002b66 <_fstat>
 800b8de:	1c43      	adds	r3, r0, #1
 800b8e0:	d102      	bne.n	800b8e8 <_fstat_r+0x1c>
 800b8e2:	682b      	ldr	r3, [r5, #0]
 800b8e4:	b103      	cbz	r3, 800b8e8 <_fstat_r+0x1c>
 800b8e6:	6023      	str	r3, [r4, #0]
 800b8e8:	bd38      	pop	{r3, r4, r5, pc}
 800b8ea:	bf00      	nop
 800b8ec:	200004cc 	.word	0x200004cc

0800b8f0 <_isatty_r>:
 800b8f0:	b538      	push	{r3, r4, r5, lr}
 800b8f2:	4d06      	ldr	r5, [pc, #24]	; (800b90c <_isatty_r+0x1c>)
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	4604      	mov	r4, r0
 800b8f8:	4608      	mov	r0, r1
 800b8fa:	602b      	str	r3, [r5, #0]
 800b8fc:	f7f7 f943 	bl	8002b86 <_isatty>
 800b900:	1c43      	adds	r3, r0, #1
 800b902:	d102      	bne.n	800b90a <_isatty_r+0x1a>
 800b904:	682b      	ldr	r3, [r5, #0]
 800b906:	b103      	cbz	r3, 800b90a <_isatty_r+0x1a>
 800b908:	6023      	str	r3, [r4, #0]
 800b90a:	bd38      	pop	{r3, r4, r5, pc}
 800b90c:	200004cc 	.word	0x200004cc

0800b910 <_lseek_r>:
 800b910:	b538      	push	{r3, r4, r5, lr}
 800b912:	4d07      	ldr	r5, [pc, #28]	; (800b930 <_lseek_r+0x20>)
 800b914:	4604      	mov	r4, r0
 800b916:	4608      	mov	r0, r1
 800b918:	4611      	mov	r1, r2
 800b91a:	2200      	movs	r2, #0
 800b91c:	602a      	str	r2, [r5, #0]
 800b91e:	461a      	mov	r2, r3
 800b920:	f7f7 f93c 	bl	8002b9c <_lseek>
 800b924:	1c43      	adds	r3, r0, #1
 800b926:	d102      	bne.n	800b92e <_lseek_r+0x1e>
 800b928:	682b      	ldr	r3, [r5, #0]
 800b92a:	b103      	cbz	r3, 800b92e <_lseek_r+0x1e>
 800b92c:	6023      	str	r3, [r4, #0]
 800b92e:	bd38      	pop	{r3, r4, r5, pc}
 800b930:	200004cc 	.word	0x200004cc

0800b934 <_read_r>:
 800b934:	b538      	push	{r3, r4, r5, lr}
 800b936:	4d07      	ldr	r5, [pc, #28]	; (800b954 <_read_r+0x20>)
 800b938:	4604      	mov	r4, r0
 800b93a:	4608      	mov	r0, r1
 800b93c:	4611      	mov	r1, r2
 800b93e:	2200      	movs	r2, #0
 800b940:	602a      	str	r2, [r5, #0]
 800b942:	461a      	mov	r2, r3
 800b944:	f7f7 f8ca 	bl	8002adc <_read>
 800b948:	1c43      	adds	r3, r0, #1
 800b94a:	d102      	bne.n	800b952 <_read_r+0x1e>
 800b94c:	682b      	ldr	r3, [r5, #0]
 800b94e:	b103      	cbz	r3, 800b952 <_read_r+0x1e>
 800b950:	6023      	str	r3, [r4, #0]
 800b952:	bd38      	pop	{r3, r4, r5, pc}
 800b954:	200004cc 	.word	0x200004cc

0800b958 <_init>:
 800b958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b95a:	bf00      	nop
 800b95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b95e:	bc08      	pop	{r3}
 800b960:	469e      	mov	lr, r3
 800b962:	4770      	bx	lr

0800b964 <_fini>:
 800b964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b966:	bf00      	nop
 800b968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b96a:	bc08      	pop	{r3}
 800b96c:	469e      	mov	lr, r3
 800b96e:	4770      	bx	lr
