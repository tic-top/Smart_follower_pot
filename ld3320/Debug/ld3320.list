
ld3320.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a310  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800a4d0  0800a4d0  0001a4d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9d4  0800a9d4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9d4  0800a9d4  0001a9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9dc  0800a9dc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9dc  0800a9dc  0001a9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9e0  0800a9e0  0001a9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a9e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200001dc  0800abc0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  0800abc0  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001638b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a2  00000000  00000000  00036597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  00038f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  0003a240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc76  00000000  00000000  0003b438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001634d  00000000  00000000  000670ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bc41  00000000  00000000  0007d3fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018903c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060ec  00000000  00000000  0018908c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a4b8 	.word	0x0800a4b8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	0800a4b8 	.word	0x0800a4b8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <SPI_RreadWrite_Data>:
float ms = 0;


/*硬件SPI读写*/
uint8_t SPI_RreadWrite_Data(uint8_t *tx_data, uint8_t len)
{
 8000edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ee0:	b087      	sub	sp, #28
 8000ee2:	af02      	add	r7, sp, #8
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	70fb      	strb	r3, [r7, #3]
 8000eea:	466b      	mov	r3, sp
 8000eec:	461e      	mov	r6, r3
	uint8_t rx_data[len];
 8000eee:	78f9      	ldrb	r1, [r7, #3]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	b2cb      	uxtb	r3, r1
 8000ef8:	2200      	movs	r2, #0
 8000efa:	4698      	mov	r8, r3
 8000efc:	4691      	mov	r9, r2
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f12:	b2cb      	uxtb	r3, r1
 8000f14:	2200      	movs	r2, #0
 8000f16:	461c      	mov	r4, r3
 8000f18:	4615      	mov	r5, r2
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	00eb      	lsls	r3, r5, #3
 8000f24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f28:	00e2      	lsls	r2, r4, #3
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	3307      	adds	r3, #7
 8000f2e:	08db      	lsrs	r3, r3, #3
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	ebad 0d03 	sub.w	sp, sp, r3
 8000f36:	ab02      	add	r3, sp, #8
 8000f38:	3300      	adds	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
	HAL_SPI_TransmitReceive(&LD3320_SPI,tx_data,rx_data,len,0XFFFF);
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f44:	9200      	str	r2, [sp, #0]
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4806      	ldr	r0, [pc, #24]	; (8000f64 <SPI_RreadWrite_Data+0x88>)
 8000f4c:	f003 fd9d 	bl	8004a8a <HAL_SPI_TransmitReceive>
	return rx_data[len-1];
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	68ba      	ldr	r2, [r7, #8]
 8000f56:	5cd3      	ldrb	r3, [r2, r3]
 8000f58:	46b5      	mov	sp, r6
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f64:	20000298 	.word	0x20000298

08000f68 <LD3320_main>:

void LD3320_main(void)
{
 8000f68:	b5b0      	push	{r4, r5, r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af02      	add	r7, sp, #8
	LD_Reset();
 8000f6e:	f000 f8d7 	bl	8001120 <LD_Reset>
	nAsrStatus = LD_ASR_NONE;		//	初始状态：没有在作ASR
 8000f72:	4b39      	ldr	r3, [pc, #228]	; (8001058 <LD3320_main+0xf0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
	CS_LOW;
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f80:	f001 ffec 	bl	8002f5c <HAL_GPIO_WritePin>
	printf("运行程序\r\n");
 8000f84:	4835      	ldr	r0, [pc, #212]	; (800105c <LD3320_main+0xf4>)
 8000f86:	f007 f9f3 	bl	8008370 <puts>
	while(1)
	{
		gap = measure;
 8000f8a:	4b35      	ldr	r3, [pc, #212]	; (8001060 <LD3320_main+0xf8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f96:	4b33      	ldr	r3, [pc, #204]	; (8001064 <LD3320_main+0xfc>)
 8000f98:	edc3 7a00 	vstr	s15, [r3]
	    ms = gap/144;
 8000f9c:	4b31      	ldr	r3, [pc, #196]	; (8001064 <LD3320_main+0xfc>)
 8000f9e:	ed93 7a00 	vldr	s14, [r3]
 8000fa2:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001068 <LD3320_main+0x100>
 8000fa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000faa:	4b30      	ldr	r3, [pc, #192]	; (800106c <LD3320_main+0x104>)
 8000fac:	edc3 7a00 	vstr	s15, [r3]
//	    printf("echo1 pulse = %f us, distance = %f inches\n", gap_front, ms_front);
	    printf("echo2 pulse = %f us, distance = %f inches\n", gap, ms);
 8000fb0:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <LD3320_main+0xfc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fadf 	bl	8000578 <__aeabi_f2d>
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	; (800106c <LD3320_main+0x104>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fad8 	bl	8000578 <__aeabi_f2d>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	e9cd 2300 	strd	r2, r3, [sp]
 8000fd0:	4622      	mov	r2, r4
 8000fd2:	462b      	mov	r3, r5
 8000fd4:	4826      	ldr	r0, [pc, #152]	; (8001070 <LD3320_main+0x108>)
 8000fd6:	f007 f945 	bl	8008264 <iprintf>
	    if (ms < 10){
 8000fda:	4b24      	ldr	r3, [pc, #144]	; (800106c <LD3320_main+0x104>)
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fec:	d502      	bpl.n	8000ff4 <LD3320_main+0x8c>
		    move_stop();
 8000fee:	f001 f8d5 	bl	800219c <move_stop>
 8000ff2:	e7ca      	b.n	8000f8a <LD3320_main+0x22>
	    }
	    else{
			switch(nAsrStatus)
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <LD3320_main+0xf0>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b31      	cmp	r3, #49	; 0x31
 8000ffa:	d029      	beq.n	8001050 <LD3320_main+0xe8>
 8000ffc:	2b31      	cmp	r3, #49	; 0x31
 8000ffe:	dc23      	bgt.n	8001048 <LD3320_main+0xe0>
 8001000:	2b10      	cmp	r3, #16
 8001002:	d012      	beq.n	800102a <LD3320_main+0xc2>
 8001004:	2b10      	cmp	r3, #16
 8001006:	dc1f      	bgt.n	8001048 <LD3320_main+0xe0>
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <LD3320_main+0xaa>
 800100c:	2b01      	cmp	r3, #1
 800100e:	d11b      	bne.n	8001048 <LD3320_main+0xe0>
			{
				case LD_ASR_RUNING:
					break;
 8001010:	e021      	b.n	8001056 <LD3320_main+0xee>

				case LD_ASR_NONE:
				{
					nAsrStatus=LD_ASR_RUNING;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <LD3320_main+0xf0>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
					if (RunASR()==0)	/*	启动一次ASR识别流程：ASR初始化，ASR添加关键词语，启动ASR运算*/
 8001018:	f000 faba 	bl	8001590 <RunASR>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d118      	bne.n	8001054 <LD3320_main+0xec>
					{
						nAsrStatus = LD_ASR_ERROR;
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <LD3320_main+0xf0>)
 8001024:	2231      	movs	r2, #49	; 0x31
 8001026:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001028:	e014      	b.n	8001054 <LD3320_main+0xec>
				}
				case LD_ASR_ERROR:
						 break;
				case LD_ASR_FOUNDOK: /*	一次ASR识别流程结束，去取ASR识别结果*/
				{
					nAsrRes = LD_GetResult();		/*获取结果*/
 800102a:	f000 fae7 	bl	80015fc <LD_GetResult>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <LD3320_main+0x10c>)
 8001034:	701a      	strb	r2, [r3, #0]
					User_Modification(nAsrRes);
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <LD3320_main+0x10c>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f81c 	bl	8001078 <User_Modification>
					nAsrStatus = LD_ASR_NONE;
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <LD3320_main+0xf0>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
					break;
 8001046:	e006      	b.n	8001056 <LD3320_main+0xee>
				}
				case LD_ASR_FOUNDZERO:
				default:
				{
					nAsrStatus = LD_ASR_NONE;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <LD3320_main+0xf0>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
					break;
 800104e:	e002      	b.n	8001056 <LD3320_main+0xee>
						 break;
 8001050:	bf00      	nop
 8001052:	e79a      	b.n	8000f8a <LD3320_main+0x22>
					break;
 8001054:	bf00      	nop
		gap = measure;
 8001056:	e798      	b.n	8000f8a <LD3320_main+0x22>
 8001058:	200001fc 	.word	0x200001fc
 800105c:	0800a4d0 	.word	0x0800a4d0
 8001060:	200001f8 	.word	0x200001f8
 8001064:	20000200 	.word	0x20000200
 8001068:	43100000 	.word	0x43100000
 800106c:	20000204 	.word	0x20000204
 8001070:	0800a4e0 	.word	0x0800a4e0
 8001074:	200001fd 	.word	0x200001fd

08001078 <User_Modification>:
* 入口参数： 无
* 出口参数：无
* 说    明：
**********************************************************/
void User_Modification(uint8_t dat)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
	if(dat)
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d042      	beq.n	800110e <User_Modification+0x96>
	{
		switch(nAsrRes)		   /*对结果执行相关操作,客户修改*/
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <User_Modification+0xa4>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	3b03      	subs	r3, #3
 800108e:	2b15      	cmp	r3, #21
 8001090:	d83f      	bhi.n	8001112 <User_Modification+0x9a>
 8001092:	a201      	add	r2, pc, #4	; (adr r2, 8001098 <User_Modification+0x20>)
 8001094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001098:	080010f1 	.word	0x080010f1
 800109c:	080010f7 	.word	0x080010f7
 80010a0:	080010fd 	.word	0x080010fd
 80010a4:	08001103 	.word	0x08001103
 80010a8:	08001113 	.word	0x08001113
 80010ac:	08001113 	.word	0x08001113
 80010b0:	08001113 	.word	0x08001113
 80010b4:	08001113 	.word	0x08001113
 80010b8:	08001113 	.word	0x08001113
 80010bc:	08001113 	.word	0x08001113
 80010c0:	08001113 	.word	0x08001113
 80010c4:	08001113 	.word	0x08001113
 80010c8:	08001113 	.word	0x08001113
 80010cc:	08001113 	.word	0x08001113
 80010d0:	08001113 	.word	0x08001113
 80010d4:	08001113 	.word	0x08001113
 80010d8:	08001113 	.word	0x08001113
 80010dc:	08001113 	.word	0x08001113
 80010e0:	08001113 	.word	0x08001113
 80010e4:	08001113 	.word	0x08001113
 80010e8:	08001113 	.word	0x08001113
 80010ec:	08001109 	.word	0x08001109
		{
			case LEFT:
				move_left();
 80010f0:	f001 f818 	bl	8002124 <move_left>
							break;
 80010f4:	e00e      	b.n	8001114 <User_Modification+0x9c>
			case RIGHT:
				move_right();
 80010f6:	f001 f833 	bl	8002160 <move_right>
							break;
 80010fa:	e00b      	b.n	8001114 <User_Modification+0x9c>
			case FORWARD:
				move_forward();
 80010fc:	f000 ffd6 	bl	80020ac <move_forward>
							break;
 8001100:	e008      	b.n	8001114 <User_Modification+0x9c>
			case STOP:
				move_stop();
 8001102:	f001 f84b 	bl	800219c <move_stop>
							break;
 8001106:	e005      	b.n	8001114 <User_Modification+0x9c>
			case BACKWARD:
				move_backward();
 8001108:	f000 ffee 	bl	80020e8 <move_backward>
							break;
 800110c:	e002      	b.n	8001114 <User_Modification+0x9c>
//							printf("R"); /*text.....*/
//														break;

			default:break;
		}
	}
 800110e:	bf00      	nop
 8001110:	e000      	b.n	8001114 <User_Modification+0x9c>
			default:break;
 8001112:	bf00      	nop

}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200001fd 	.word	0x200001fd

08001120 <LD_Reset>:
入口参数：	 none
返 回 值： 	 none
其他说明：	 none
**************************************************************************/
void LD_Reset(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	RST_HIGH;
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800112a:	4816      	ldr	r0, [pc, #88]	; (8001184 <LD_Reset+0x64>)
 800112c:	f001 ff16 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001130:	2005      	movs	r0, #5
 8001132:	f001 fc33 	bl	800299c <HAL_Delay>
	RST_LOW;
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800113c:	4811      	ldr	r0, [pc, #68]	; (8001184 <LD_Reset+0x64>)
 800113e:	f001 ff0d 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001142:	2005      	movs	r0, #5
 8001144:	f001 fc2a 	bl	800299c <HAL_Delay>
	RST_HIGH;
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800114e:	480d      	ldr	r0, [pc, #52]	; (8001184 <LD_Reset+0x64>)
 8001150:	f001 ff04 	bl	8002f5c <HAL_GPIO_WritePin>

	HAL_Delay(5);
 8001154:	2005      	movs	r0, #5
 8001156:	f001 fc21 	bl	800299c <HAL_Delay>
	CS_LOW;
 800115a:	2200      	movs	r2, #0
 800115c:	2110      	movs	r1, #16
 800115e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001162:	f001 fefb 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001166:	2005      	movs	r0, #5
 8001168:	f001 fc18 	bl	800299c <HAL_Delay>
	CS_HIGH;
 800116c:	2201      	movs	r2, #1
 800116e:	2110      	movs	r1, #16
 8001170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001174:	f001 fef2 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001178:	2005      	movs	r0, #5
 800117a:	f001 fc0f 	bl	800299c <HAL_Delay>
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	48000400 	.word	0x48000400

08001188 <LD_Init_Common>:
返 回 值： none
其他说明： 该函数为出厂配置，一般不需要修改；
					 有兴趣的客户可对照开发手册根据需要自行修改。
**************************************************************************/
void LD_Init_Common(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	LD_ReadReg(0x06);
 800118c:	2006      	movs	r0, #6
 800118e:	f000 fa67 	bl	8001660 <LD_ReadReg>
	LD_WriteReg(0x17, 0x35);
 8001192:	2135      	movs	r1, #53	; 0x35
 8001194:	2017      	movs	r0, #23
 8001196:	f000 fa39 	bl	800160c <LD_WriteReg>

	HAL_Delay(5);
 800119a:	2005      	movs	r0, #5
 800119c:	f001 fbfe 	bl	800299c <HAL_Delay>
	LD_ReadReg(0x06);
 80011a0:	2006      	movs	r0, #6
 80011a2:	f000 fa5d 	bl	8001660 <LD_ReadReg>

	LD_WriteReg(0x89, 0x03);
 80011a6:	2103      	movs	r1, #3
 80011a8:	2089      	movs	r0, #137	; 0x89
 80011aa:	f000 fa2f 	bl	800160c <LD_WriteReg>
	HAL_Delay(5);
 80011ae:	2005      	movs	r0, #5
 80011b0:	f001 fbf4 	bl	800299c <HAL_Delay>
	LD_WriteReg(0xCF, 0x43);
 80011b4:	2143      	movs	r1, #67	; 0x43
 80011b6:	20cf      	movs	r0, #207	; 0xcf
 80011b8:	f000 fa28 	bl	800160c <LD_WriteReg>
	HAL_Delay(5);
 80011bc:	2005      	movs	r0, #5
 80011be:	f001 fbed 	bl	800299c <HAL_Delay>
	LD_WriteReg(0xCB, 0x02);
 80011c2:	2102      	movs	r1, #2
 80011c4:	20cb      	movs	r0, #203	; 0xcb
 80011c6:	f000 fa21 	bl	800160c <LD_WriteReg>

	/*PLL setting*/
	LD_WriteReg(0x11, LD_PLL_11);
 80011ca:	210b      	movs	r1, #11
 80011cc:	2011      	movs	r0, #17
 80011ce:	f000 fa1d 	bl	800160c <LD_WriteReg>
	if (nLD_Mode == LD_MODE_MP3)
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <LD_Init_Common+0xcc>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b40      	cmp	r3, #64	; 0x40
 80011d8:	d110      	bne.n	80011fc <LD_Init_Common+0x74>
	{
		LD_WriteReg(0x1E,0x00);
 80011da:	2100      	movs	r1, #0
 80011dc:	201e      	movs	r0, #30
 80011de:	f000 fa15 	bl	800160c <LD_WriteReg>
		LD_WriteReg(0x19, LD_PLL_MP3_19);
 80011e2:	210f      	movs	r1, #15
 80011e4:	2019      	movs	r0, #25
 80011e6:	f000 fa11 	bl	800160c <LD_WriteReg>
		LD_WriteReg(0x1B, LD_PLL_MP3_1B);
 80011ea:	2118      	movs	r1, #24
 80011ec:	201b      	movs	r0, #27
 80011ee:	f000 fa0d 	bl	800160c <LD_WriteReg>
		LD_WriteReg(0x1D, LD_PLL_MP3_1D);
 80011f2:	212c      	movs	r1, #44	; 0x2c
 80011f4:	201d      	movs	r0, #29
 80011f6:	f000 fa09 	bl	800160c <LD_WriteReg>
 80011fa:	e00f      	b.n	800121c <LD_Init_Common+0x94>
	}
	else
	{
		LD_WriteReg(0x1E,0x00);
 80011fc:	2100      	movs	r1, #0
 80011fe:	201e      	movs	r0, #30
 8001200:	f000 fa04 	bl	800160c <LD_WriteReg>
		LD_WriteReg(0x19, LD_PLL_ASR_19);
 8001204:	213f      	movs	r1, #63	; 0x3f
 8001206:	2019      	movs	r0, #25
 8001208:	f000 fa00 	bl	800160c <LD_WriteReg>
		LD_WriteReg(0x1B, LD_PLL_ASR_1B);
 800120c:	2148      	movs	r1, #72	; 0x48
 800120e:	201b      	movs	r0, #27
 8001210:	f000 f9fc 	bl	800160c <LD_WriteReg>
	  LD_WriteReg(0x1D, LD_PLL_ASR_1D);
 8001214:	211f      	movs	r1, #31
 8001216:	201d      	movs	r0, #29
 8001218:	f000 f9f8 	bl	800160c <LD_WriteReg>
	}
	HAL_Delay(5);
 800121c:	2005      	movs	r0, #5
 800121e:	f001 fbbd 	bl	800299c <HAL_Delay>

	LD_WriteReg(0xCD, 0x04);
 8001222:	2104      	movs	r1, #4
 8001224:	20cd      	movs	r0, #205	; 0xcd
 8001226:	f000 f9f1 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0x17, 0x4c);
 800122a:	214c      	movs	r1, #76	; 0x4c
 800122c:	2017      	movs	r0, #23
 800122e:	f000 f9ed 	bl	800160c <LD_WriteReg>
	HAL_Delay(5);
 8001232:	2005      	movs	r0, #5
 8001234:	f001 fbb2 	bl	800299c <HAL_Delay>
	LD_WriteReg(0xB9, 0x00);
 8001238:	2100      	movs	r1, #0
 800123a:	20b9      	movs	r0, #185	; 0xb9
 800123c:	f000 f9e6 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0xCF, 0x4F);
 8001240:	214f      	movs	r1, #79	; 0x4f
 8001242:	20cf      	movs	r0, #207	; 0xcf
 8001244:	f000 f9e2 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0x6F, 0xFF);
 8001248:	21ff      	movs	r1, #255	; 0xff
 800124a:	206f      	movs	r0, #111	; 0x6f
 800124c:	f000 f9de 	bl	800160c <LD_WriteReg>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200001fe 	.word	0x200001fe

08001258 <LD_Init_ASR>:
返 回 值： 	 none
其他说明：	 该函数为出厂配置，一般不需要修改；
					 有兴趣的客户可对照开发手册根据需要自行修改。
**************************************************************************/
void LD_Init_ASR(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	nLD_Mode=LD_MODE_ASR_RUN;
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <LD_Init_ASR+0x70>)
 800125e:	2208      	movs	r2, #8
 8001260:	701a      	strb	r2, [r3, #0]
	LD_Init_Common();
 8001262:	f7ff ff91 	bl	8001188 <LD_Init_Common>

	LD_WriteReg(0xBD, 0x00);
 8001266:	2100      	movs	r1, #0
 8001268:	20bd      	movs	r0, #189	; 0xbd
 800126a:	f000 f9cf 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0x17, 0x48);
 800126e:	2148      	movs	r1, #72	; 0x48
 8001270:	2017      	movs	r0, #23
 8001272:	f000 f9cb 	bl	800160c <LD_WriteReg>
	HAL_Delay(5);
 8001276:	2005      	movs	r0, #5
 8001278:	f001 fb90 	bl	800299c <HAL_Delay>

	LD_WriteReg(0x3C, 0x80);
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	203c      	movs	r0, #60	; 0x3c
 8001280:	f000 f9c4 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0x3E, 0x07);
 8001284:	2107      	movs	r1, #7
 8001286:	203e      	movs	r0, #62	; 0x3e
 8001288:	f000 f9c0 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0x38, 0xff);
 800128c:	21ff      	movs	r1, #255	; 0xff
 800128e:	2038      	movs	r0, #56	; 0x38
 8001290:	f000 f9bc 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0x3A, 0x07);
 8001294:	2107      	movs	r1, #7
 8001296:	203a      	movs	r0, #58	; 0x3a
 8001298:	f000 f9b8 	bl	800160c <LD_WriteReg>

	LD_WriteReg(0x40, 0);
 800129c:	2100      	movs	r1, #0
 800129e:	2040      	movs	r0, #64	; 0x40
 80012a0:	f000 f9b4 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0x42, 8);
 80012a4:	2108      	movs	r1, #8
 80012a6:	2042      	movs	r0, #66	; 0x42
 80012a8:	f000 f9b0 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0x44, 0);
 80012ac:	2100      	movs	r1, #0
 80012ae:	2044      	movs	r0, #68	; 0x44
 80012b0:	f000 f9ac 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0x46, 8);
 80012b4:	2108      	movs	r1, #8
 80012b6:	2046      	movs	r0, #70	; 0x46
 80012b8:	f000 f9a8 	bl	800160c <LD_WriteReg>
	HAL_Delay(5);
 80012bc:	2005      	movs	r0, #5
 80012be:	f001 fb6d 	bl	800299c <HAL_Delay>
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200001fe 	.word	0x200001fe

080012cc <ProcessInt>:
其他说明：	当LD模块接收到音频信号时，将进入该函数，
						判断识别是否有结果，如果没有从新配置寄
            存器准备下一次的识别。
**************************************************************************/
void ProcessInt(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
	uint8_t nAsrResCount=0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	71fb      	strb	r3, [r7, #7]

	ucRegVal = LD_ReadReg(0x2B);
 80012d6:	202b      	movs	r0, #43	; 0x2b
 80012d8:	f000 f9c2 	bl	8001660 <LD_ReadReg>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <ProcessInt+0xc8>)
 80012e2:	701a      	strb	r2, [r3, #0]
	LD_WriteReg(0x29,0) ;
 80012e4:	2100      	movs	r1, #0
 80012e6:	2029      	movs	r0, #41	; 0x29
 80012e8:	f000 f990 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0x02,0) ;
 80012ec:	2100      	movs	r1, #0
 80012ee:	2002      	movs	r0, #2
 80012f0:	f000 f98c 	bl	800160c <LD_WriteReg>
	if((ucRegVal & 0x10)&&LD_ReadReg(0xb2)==0x21&&LD_ReadReg(0xbf)==0x35)			/*识别成功*/
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <ProcessInt+0xc8>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	f003 0310 	and.w	r3, r3, #16
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d01e      	beq.n	800133e <ProcessInt+0x72>
 8001300:	20b2      	movs	r0, #178	; 0xb2
 8001302:	f000 f9ad 	bl	8001660 <LD_ReadReg>
 8001306:	4603      	mov	r3, r0
 8001308:	2b21      	cmp	r3, #33	; 0x21
 800130a:	d118      	bne.n	800133e <ProcessInt+0x72>
 800130c:	20bf      	movs	r0, #191	; 0xbf
 800130e:	f000 f9a7 	bl	8001660 <LD_ReadReg>
 8001312:	4603      	mov	r3, r0
 8001314:	2b35      	cmp	r3, #53	; 0x35
 8001316:	d112      	bne.n	800133e <ProcessInt+0x72>
	{
		nAsrResCount = LD_ReadReg(0xba);
 8001318:	20ba      	movs	r0, #186	; 0xba
 800131a:	f000 f9a1 	bl	8001660 <LD_ReadReg>
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
		if(nAsrResCount>0 && nAsrResCount<=4)
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d006      	beq.n	8001336 <ProcessInt+0x6a>
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b04      	cmp	r3, #4
 800132c:	d803      	bhi.n	8001336 <ProcessInt+0x6a>
		{
			nAsrStatus=LD_ASR_FOUNDOK;
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <ProcessInt+0xcc>)
 8001330:	2210      	movs	r2, #16
 8001332:	701a      	strb	r2, [r3, #0]
		if(nAsrResCount>0 && nAsrResCount<=4)
 8001334:	e006      	b.n	8001344 <ProcessInt+0x78>
		}
		else
	  {
			nAsrStatus=LD_ASR_FOUNDZERO;
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <ProcessInt+0xcc>)
 8001338:	2211      	movs	r2, #17
 800133a:	701a      	strb	r2, [r3, #0]
		if(nAsrResCount>0 && nAsrResCount<=4)
 800133c:	e002      	b.n	8001344 <ProcessInt+0x78>
		}
	}															 /*没有识别结果*/
	else
	{
		nAsrStatus=LD_ASR_FOUNDZERO;
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <ProcessInt+0xcc>)
 8001340:	2211      	movs	r2, #17
 8001342:	701a      	strb	r2, [r3, #0]
	}

  LD_WriteReg(0x2b, 0);
 8001344:	2100      	movs	r1, #0
 8001346:	202b      	movs	r0, #43	; 0x2b
 8001348:	f000 f960 	bl	800160c <LD_WriteReg>
  LD_WriteReg(0x1C,0);/*写0:ADC不可用*/
 800134c:	2100      	movs	r1, #0
 800134e:	201c      	movs	r0, #28
 8001350:	f000 f95c 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0x29,0);
 8001354:	2100      	movs	r1, #0
 8001356:	2029      	movs	r0, #41	; 0x29
 8001358:	f000 f958 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0x02,0);
 800135c:	2100      	movs	r1, #0
 800135e:	2002      	movs	r0, #2
 8001360:	f000 f954 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0x2B,0);
 8001364:	2100      	movs	r1, #0
 8001366:	202b      	movs	r0, #43	; 0x2b
 8001368:	f000 f950 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0xBA,0);
 800136c:	2100      	movs	r1, #0
 800136e:	20ba      	movs	r0, #186	; 0xba
 8001370:	f000 f94c 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0xBC,0);
 8001374:	2100      	movs	r1, #0
 8001376:	20bc      	movs	r0, #188	; 0xbc
 8001378:	f000 f948 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0x08,1);	 /*清除FIFO_DATA*/
 800137c:	2101      	movs	r1, #1
 800137e:	2008      	movs	r0, #8
 8001380:	f000 f944 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0x08,0);	/*清除FIFO_DATA后 再次写0*/
 8001384:	2100      	movs	r1, #0
 8001386:	2008      	movs	r0, #8
 8001388:	f000 f940 	bl	800160c <LD_WriteReg>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200001ff 	.word	0x200001ff
 8001398:	200001fc 	.word	0x200001fc

0800139c <LD_Check_ASRBusyFlag_b2>:
入口参数：	none
返 回 值： 	flag：1-> 空闲
其他说明：	none
**************************************************************************/
uint8_t LD_Check_ASRBusyFlag_b2(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
	uint8_t j,i;
	uint8_t flag = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	71bb      	strb	r3, [r7, #6]
	for (j=0; j<5; j++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	71fb      	strb	r3, [r7, #7]
 80013aa:	e010      	b.n	80013ce <LD_Check_ASRBusyFlag_b2+0x32>
	{
		i=LD_ReadReg(0xb2);
 80013ac:	20b2      	movs	r0, #178	; 0xb2
 80013ae:	f000 f957 	bl	8001660 <LD_ReadReg>
 80013b2:	4603      	mov	r3, r0
 80013b4:	717b      	strb	r3, [r7, #5]
		if ( i== 0x21)
 80013b6:	797b      	ldrb	r3, [r7, #5]
 80013b8:	2b21      	cmp	r3, #33	; 0x21
 80013ba:	d102      	bne.n	80013c2 <LD_Check_ASRBusyFlag_b2+0x26>
		{
			flag = 1;
 80013bc:	2301      	movs	r3, #1
 80013be:	71bb      	strb	r3, [r7, #6]
			break;
 80013c0:	e008      	b.n	80013d4 <LD_Check_ASRBusyFlag_b2+0x38>
		}
		HAL_Delay(20);
 80013c2:	2014      	movs	r0, #20
 80013c4:	f001 faea 	bl	800299c <HAL_Delay>
	for (j=0; j<5; j++)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	3301      	adds	r3, #1
 80013cc:	71fb      	strb	r3, [r7, #7]
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d9eb      	bls.n	80013ac <LD_Check_ASRBusyFlag_b2+0x10>
	}
	return flag;
 80013d4:	79bb      	ldrb	r3, [r7, #6]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <LD_AsrStart>:
入口参数：	none
返 回 值： 	none
其他说明：	none
**************************************************************************/
void LD_AsrStart(void)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	af00      	add	r7, sp, #0
	LD_Init_ASR();
 80013e2:	f7ff ff39 	bl	8001258 <LD_Init_ASR>
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}

080013ea <LD_AsrRun>:
入口参数：	none
返 回 值： 	1：启动成功
其他说明：	none
**************************************************************************/
uint8_t LD_AsrRun(void)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	af00      	add	r7, sp, #0
	LD_WriteReg(0x35, MIC_VOL);
 80013ee:	2143      	movs	r1, #67	; 0x43
 80013f0:	2035      	movs	r0, #53	; 0x35
 80013f2:	f000 f90b 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0x1C, 0x09);
 80013f6:	2109      	movs	r1, #9
 80013f8:	201c      	movs	r0, #28
 80013fa:	f000 f907 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0xBD, 0x20);
 80013fe:	2120      	movs	r1, #32
 8001400:	20bd      	movs	r0, #189	; 0xbd
 8001402:	f000 f903 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0x08, 0x01);
 8001406:	2101      	movs	r1, #1
 8001408:	2008      	movs	r0, #8
 800140a:	f000 f8ff 	bl	800160c <LD_WriteReg>
	HAL_Delay(5);
 800140e:	2005      	movs	r0, #5
 8001410:	f001 fac4 	bl	800299c <HAL_Delay>
	LD_WriteReg(0x08, 0x00);
 8001414:	2100      	movs	r1, #0
 8001416:	2008      	movs	r0, #8
 8001418:	f000 f8f8 	bl	800160c <LD_WriteReg>
	HAL_Delay(5);
 800141c:	2005      	movs	r0, #5
 800141e:	f001 fabd 	bl	800299c <HAL_Delay>

	if(LD_Check_ASRBusyFlag_b2() == 0)
 8001422:	f7ff ffbb 	bl	800139c <LD_Check_ASRBusyFlag_b2>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <LD_AsrRun+0x46>
	{
		return 0;
 800142c:	2300      	movs	r3, #0
 800142e:	e01e      	b.n	800146e <LD_AsrRun+0x84>
	}

	LD_WriteReg(0xB2, 0xff);
 8001430:	21ff      	movs	r1, #255	; 0xff
 8001432:	20b2      	movs	r0, #178	; 0xb2
 8001434:	f000 f8ea 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0x37, 0x06);
 8001438:	2106      	movs	r1, #6
 800143a:	2037      	movs	r0, #55	; 0x37
 800143c:	f000 f8e6 	bl	800160c <LD_WriteReg>
	HAL_Delay(5);
 8001440:	2005      	movs	r0, #5
 8001442:	f001 faab 	bl	800299c <HAL_Delay>
  LD_WriteReg(0x37, 0x06);
 8001446:	2106      	movs	r1, #6
 8001448:	2037      	movs	r0, #55	; 0x37
 800144a:	f000 f8df 	bl	800160c <LD_WriteReg>
	HAL_Delay(5);
 800144e:	2005      	movs	r0, #5
 8001450:	f001 faa4 	bl	800299c <HAL_Delay>
	LD_WriteReg(0x1C, 0x0b);
 8001454:	210b      	movs	r1, #11
 8001456:	201c      	movs	r0, #28
 8001458:	f000 f8d8 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0x29, 0x10);
 800145c:	2110      	movs	r1, #16
 800145e:	2029      	movs	r0, #41	; 0x29
 8001460:	f000 f8d4 	bl	800160c <LD_WriteReg>
	LD_WriteReg(0xBD, 0x00);
 8001464:	2100      	movs	r1, #0
 8001466:	20bd      	movs	r0, #189	; 0xbd
 8001468:	f000 f8d0 	bl	800160c <LD_WriteReg>
	return 1;
 800146c:	2301      	movs	r3, #1
}
 800146e:	4618      	mov	r0, r3
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <LD_AsrAddFixed>:
					 和对应变了k的循环置。拼音串和识别码是一一对应的。
					 2、开发者可以学习"语音识别芯片LD3320高阶秘籍.pdf"中
           关于垃圾词语吸收错误的用法，来提供识别效果。
**************************************************************************/
uint8_t LD_AsrAddFixed(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b09c      	sub	sp, #112	; 0x70
 8001478:	af00      	add	r7, sp, #0

	#define DATE_A 5   //数组二维数值
	#define DATE_B 20		//数组一维数值


	uint8_t sRecog[DATE_A][DATE_B] = {
 800147a:	4a43      	ldr	r2, [pc, #268]	; (8001588 <LD_AsrAddFixed+0x114>)
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	4611      	mov	r1, r2
 8001482:	2264      	movs	r2, #100	; 0x64
 8001484:	4618      	mov	r0, r3
 8001486:	f006 fa6d 	bl	8007964 <memcpy>
//
//										"da kai kong tiao",\
//										"guan bi kong tiao",\
//										"hou tui",\
//								};	/*添加关键词，用户修改*/
	uint8_t pCode[DATE_A] = {
 800148a:	4a40      	ldr	r2, [pc, #256]	; (800158c <LD_AsrAddFixed+0x118>)
 800148c:	463b      	mov	r3, r7
 800148e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001492:	6018      	str	r0, [r3, #0]
 8001494:	3304      	adds	r3, #4
 8001496:	7019      	strb	r1, [r3, #0]
//			  CODE_2KL4,\
//			  CODE_3KL1,\
//			  CODE_3KL2,\
//			  CODE_5KL1,
//												};	/*添加识别码，用户修改*/
	flag = 1;
 8001498:	2301      	movs	r3, #1
 800149a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	for (k=0; k<DATE_A; k++)
 800149e:	2300      	movs	r3, #0
 80014a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80014a4:	e066      	b.n	8001574 <LD_AsrAddFixed+0x100>
	{

		if(LD_Check_ASRBusyFlag_b2() == 0)
 80014a6:	f7ff ff79 	bl	800139c <LD_Check_ASRBusyFlag_b2>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d103      	bne.n	80014b8 <LD_AsrAddFixed+0x44>
		{
			flag = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
			break;
 80014b6:	e061      	b.n	800157c <LD_AsrAddFixed+0x108>
		}

		LD_WriteReg(0xc1, pCode[k] );
 80014b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014bc:	3370      	adds	r3, #112	; 0x70
 80014be:	443b      	add	r3, r7
 80014c0:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 80014c4:	4619      	mov	r1, r3
 80014c6:	20c1      	movs	r0, #193	; 0xc1
 80014c8:	f000 f8a0 	bl	800160c <LD_WriteReg>
		LD_WriteReg(0xc3, 0 );
 80014cc:	2100      	movs	r1, #0
 80014ce:	20c3      	movs	r0, #195	; 0xc3
 80014d0:	f000 f89c 	bl	800160c <LD_WriteReg>
		LD_WriteReg(0x08, 0x04);
 80014d4:	2104      	movs	r1, #4
 80014d6:	2008      	movs	r0, #8
 80014d8:	f000 f898 	bl	800160c <LD_WriteReg>
		HAL_Delay(1);
 80014dc:	2001      	movs	r0, #1
 80014de:	f001 fa5d 	bl	800299c <HAL_Delay>
		LD_WriteReg(0x08, 0x00);
 80014e2:	2100      	movs	r1, #0
 80014e4:	2008      	movs	r0, #8
 80014e6:	f000 f891 	bl	800160c <LD_WriteReg>
		HAL_Delay(1);
 80014ea:	2001      	movs	r0, #1
 80014ec:	f001 fa56 	bl	800299c <HAL_Delay>

		for (nAsrAddLength=0; nAsrAddLength<DATE_B; nAsrAddLength++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 80014f6:	e024      	b.n	8001542 <LD_AsrAddFixed+0xce>
		{
			if (sRecog[k][nAsrAddLength] == 0)
 80014f8:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80014fc:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	3370      	adds	r3, #112	; 0x70
 800150a:	443b      	add	r3, r7
 800150c:	440b      	add	r3, r1
 800150e:	3b68      	subs	r3, #104	; 0x68
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d01a      	beq.n	800154c <LD_AsrAddFixed+0xd8>
				break;
			LD_WriteReg(0x5, sRecog[k][nAsrAddLength]);
 8001516:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800151a:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	3370      	adds	r3, #112	; 0x70
 8001528:	443b      	add	r3, r7
 800152a:	440b      	add	r3, r1
 800152c:	3b68      	subs	r3, #104	; 0x68
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	2005      	movs	r0, #5
 8001534:	f000 f86a 	bl	800160c <LD_WriteReg>
		for (nAsrAddLength=0; nAsrAddLength<DATE_B; nAsrAddLength++)
 8001538:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800153c:	3301      	adds	r3, #1
 800153e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8001542:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001546:	2b13      	cmp	r3, #19
 8001548:	d9d6      	bls.n	80014f8 <LD_AsrAddFixed+0x84>
 800154a:	e000      	b.n	800154e <LD_AsrAddFixed+0xda>
				break;
 800154c:	bf00      	nop
		}
		LD_WriteReg(0xb9, nAsrAddLength);
 800154e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001552:	4619      	mov	r1, r3
 8001554:	20b9      	movs	r0, #185	; 0xb9
 8001556:	f000 f859 	bl	800160c <LD_WriteReg>
		LD_WriteReg(0xb2, 0xff);
 800155a:	21ff      	movs	r1, #255	; 0xff
 800155c:	20b2      	movs	r0, #178	; 0xb2
 800155e:	f000 f855 	bl	800160c <LD_WriteReg>
		LD_WriteReg(0x37, 0x04);
 8001562:	2104      	movs	r1, #4
 8001564:	2037      	movs	r0, #55	; 0x37
 8001566:	f000 f851 	bl	800160c <LD_WriteReg>
	for (k=0; k<DATE_A; k++)
 800156a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800156e:	3301      	adds	r3, #1
 8001570:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001574:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001578:	2b04      	cmp	r3, #4
 800157a:	d994      	bls.n	80014a6 <LD_AsrAddFixed+0x32>
	}
    return flag;
 800157c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
}
 8001580:	4618      	mov	r0, r3
 8001582:	3770      	adds	r7, #112	; 0x70
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	0800a50c 	.word	0x0800a50c
 800158c:	0800a570 	.word	0x0800a570

08001590 <RunASR>:
						3、LD_AsrAddFixed() 函数实现了添加关键词语到LD3320芯片中
						4、LD_AsrRun()	函数启动了一次ASR语音识别流程
						任何一次ASR识别流程，都需要按照这个顺序，从初始化开始
**************************************************************************/
uint8_t RunASR(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8001596:	2300      	movs	r3, #0
 8001598:	71fb      	strb	r3, [r7, #7]
	uint8_t asrflag=0;
 800159a:	2300      	movs	r3, #0
 800159c:	71bb      	strb	r3, [r7, #6]
	for (i=0; i<5; i++)			//	防止由于硬件原因导致LD3320芯片工作不正常，所以一共尝试5次启动ASR识别流程
 800159e:	2300      	movs	r3, #0
 80015a0:	71fb      	strb	r3, [r7, #7]
 80015a2:	e023      	b.n	80015ec <RunASR+0x5c>
	{
		LD_AsrStart();
 80015a4:	f7ff ff1b 	bl	80013de <LD_AsrStart>
		HAL_Delay(5);
 80015a8:	2005      	movs	r0, #5
 80015aa:	f001 f9f7 	bl	800299c <HAL_Delay>
		if (LD_AsrAddFixed()==0)
 80015ae:	f7ff ff61 	bl	8001474 <LD_AsrAddFixed>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d105      	bne.n	80015c4 <RunASR+0x34>
		{
			LD_Reset();			//	LD3320芯片内部出现不正常，立即重启LD3320芯片
 80015b8:	f7ff fdb2 	bl	8001120 <LD_Reset>
			HAL_Delay(5);			//	并从初始化开始重新ASR识别流程
 80015bc:	2005      	movs	r0, #5
 80015be:	f001 f9ed 	bl	800299c <HAL_Delay>
			continue;
 80015c2:	e010      	b.n	80015e6 <RunASR+0x56>
		}
		HAL_Delay(5);
 80015c4:	2005      	movs	r0, #5
 80015c6:	f001 f9e9 	bl	800299c <HAL_Delay>
		if (LD_AsrRun() == 0)
 80015ca:	f7ff ff0e 	bl	80013ea <LD_AsrRun>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d105      	bne.n	80015e0 <RunASR+0x50>
		{
			LD_Reset();			//	LD3320芯片内部出现不正常，立即重启LD3320芯片
 80015d4:	f7ff fda4 	bl	8001120 <LD_Reset>
			HAL_Delay(5);			//	并从初始化开始重新ASR识别流程
 80015d8:	2005      	movs	r0, #5
 80015da:	f001 f9df 	bl	800299c <HAL_Delay>
			continue;
 80015de:	e002      	b.n	80015e6 <RunASR+0x56>
		}
		asrflag=1;
 80015e0:	2301      	movs	r3, #1
 80015e2:	71bb      	strb	r3, [r7, #6]
		break;					//	ASR流程启动成功，退出当前for循环。开始等待LD3320送出的中断信号
 80015e4:	e005      	b.n	80015f2 <RunASR+0x62>
	for (i=0; i<5; i++)			//	防止由于硬件原因导致LD3320芯片工作不正常，所以一共尝试5次启动ASR识别流程
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	3301      	adds	r3, #1
 80015ea:	71fb      	strb	r3, [r7, #7]
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d9d8      	bls.n	80015a4 <RunASR+0x14>
	}
	return asrflag;
 80015f2:	79bb      	ldrb	r3, [r7, #6]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <LD_GetResult>:
入口参数：	none
返 回 值： 	LD_ReadReg(0xc5 )；  读取内部寄存器返回识别码。
其他说明：	none
**************************************************************************/
uint8_t LD_GetResult(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	return LD_ReadReg(0xc5 );
 8001600:	20c5      	movs	r0, #197	; 0xc5
 8001602:	f000 f82d 	bl	8001660 <LD_ReadReg>
 8001606:	4603      	mov	r3, r0
}
 8001608:	4618      	mov	r0, r3
 800160a:	bd80      	pop	{r7, pc}

0800160c <LD_WriteReg>:

/*写寄存器*/
void LD_WriteReg(uint8_t address,uint8_t dataout)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	460a      	mov	r2, r1
 8001616:	71fb      	strb	r3, [r7, #7]
 8001618:	4613      	mov	r3, r2
 800161a:	71bb      	strb	r3, [r7, #6]
	}
	HAL_Delay(1);
	SCS = 1;
	#else
	uint8_t tx_data[3];
	CS_LOW;
 800161c:	2200      	movs	r2, #0
 800161e:	2110      	movs	r1, #16
 8001620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001624:	f001 fc9a 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001628:	2001      	movs	r0, #1
 800162a:	f001 f9b7 	bl	800299c <HAL_Delay>
	tx_data[0] = 0x04;
 800162e:	2304      	movs	r3, #4
 8001630:	733b      	strb	r3, [r7, #12]
	tx_data[1] = address;
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	737b      	strb	r3, [r7, #13]
	tx_data[2] = dataout;
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	73bb      	strb	r3, [r7, #14]
	SPI_RreadWrite_Data(tx_data,3);
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	2103      	movs	r1, #3
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fc4b 	bl	8000edc <SPI_RreadWrite_Data>
	HAL_Delay(1);
 8001646:	2001      	movs	r0, #1
 8001648:	f001 f9a8 	bl	800299c <HAL_Delay>
	CS_HIGH;
 800164c:	2201      	movs	r2, #1
 800164e:	2110      	movs	r1, #16
 8001650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001654:	f001 fc82 	bl	8002f5c <HAL_GPIO_WritePin>
	#endif
}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <LD_ReadReg>:
/*读寄存器*/
uint8_t LD_ReadReg(uint8_t address)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
	return datain;
	#else
	uint8_t rx_data;
	uint8_t tx_data[3];

  CS_LOW;
 800166a:	2200      	movs	r2, #0
 800166c:	2110      	movs	r1, #16
 800166e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001672:	f001 fc73 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001676:	2001      	movs	r0, #1
 8001678:	f001 f990 	bl	800299c <HAL_Delay>
	tx_data[0] = 0x05;
 800167c:	2305      	movs	r3, #5
 800167e:	733b      	strb	r3, [r7, #12]
	tx_data[1] = address;
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	737b      	strb	r3, [r7, #13]
	tx_data[2] = 0x00;
 8001684:	2300      	movs	r3, #0
 8001686:	73bb      	strb	r3, [r7, #14]
	rx_data = SPI_RreadWrite_Data(tx_data,3);
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	2103      	movs	r1, #3
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fc24 	bl	8000edc <SPI_RreadWrite_Data>
 8001694:	4603      	mov	r3, r0
 8001696:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1);
 8001698:	2001      	movs	r0, #1
 800169a:	f001 f97f 	bl	800299c <HAL_Delay>
	CS_HIGH;
 800169e:	2201      	movs	r2, #1
 80016a0:	2110      	movs	r1, #16
 80016a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a6:	f001 fc59 	bl	8002f5c <HAL_GPIO_WritePin>
	return rx_data;
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
	#endif
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_GPIO_EXTI_Callback>:
/*中断回调函数*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LD3320_IRQ_Pin)
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016c4:	d10c      	bne.n	80016e0 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		if(HAL_GPIO_ReadPin(LD3320_IRQ_GPIO_Port,LD3320_IRQ_Pin) == GPIO_PIN_RESET)
 80016c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ca:	4807      	ldr	r0, [pc, #28]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x34>)
 80016cc:	f001 fc2e 	bl	8002f2c <HAL_GPIO_ReadPin>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d104      	bne.n	80016e0 <HAL_GPIO_EXTI_Callback+0x2c>
		{
			ProcessInt();
 80016d6:	f7ff fdf9 	bl	80012cc <ProcessInt>
			printf("进入中断12\r\n");
 80016da:	4804      	ldr	r0, [pc, #16]	; (80016ec <HAL_GPIO_EXTI_Callback+0x38>)
 80016dc:	f006 fe48 	bl	8008370 <puts>
		}
	}
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	48000400 	.word	0x48000400
 80016ec:	0800a578 	.word	0x0800a578

080016f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t *tim3_ccr2 = (uint32_t *)(TIM3_ADDR + TIM_CCR2_OFFSET);
 80016f6:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <main+0x80>)
 80016f8:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016fa:	f001 f8da 	bl	80028b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fe:	f000 f845 	bl	800178c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001702:	f000 fa73 	bl	8001bec <MX_GPIO_Init>
  MX_SPI1_Init();
 8001706:	f000 f8d3 	bl	80018b0 <MX_SPI1_Init>
  MX_LPUART1_UART_Init();
 800170a:	f000 f885 	bl	8001818 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 800170e:	f000 f97d 	bl	8001a0c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001712:	f000 f90b 	bl	800192c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001716:	f000 f9f1 	bl	8001afc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800171a:	2104      	movs	r1, #4
 800171c:	4815      	ldr	r0, [pc, #84]	; (8001774 <main+0x84>)
 800171e:	f003 fde3 	bl	80052e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001722:	2104      	movs	r1, #4
 8001724:	4814      	ldr	r0, [pc, #80]	; (8001778 <main+0x88>)
 8001726:	f003 fddf 	bl	80052e8 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); //Starts timer 2
 800172a:	2100      	movs	r1, #0
 800172c:	4813      	ldr	r0, [pc, #76]	; (800177c <main+0x8c>)
 800172e:	f003 ff43 	bl	80055b8 <HAL_TIM_IC_Start_IT>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2104      	movs	r1, #4
 8001736:	4812      	ldr	r0, [pc, #72]	; (8001780 <main+0x90>)
 8001738:	f001 fc10 	bl	8002f5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2108      	movs	r1, #8
 8001740:	480f      	ldr	r0, [pc, #60]	; (8001780 <main+0x90>)
 8001742:	f001 fc0b 	bl	8002f5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2120      	movs	r1, #32
 800174a:	480e      	ldr	r0, [pc, #56]	; (8001784 <main+0x94>)
 800174c:	f001 fc06 	bl	8002f5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2104      	movs	r1, #4
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <main+0x98>)
 8001756:	f001 fc01 	bl	8002f5c <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  *tim3_ccr2 = 1000;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001760:	601a      	str	r2, [r3, #0]
	  LD3320_main();
 8001762:	f7ff fc01 	bl	8000f68 <LD3320_main>
	  HAL_Delay(50);
 8001766:	2032      	movs	r0, #50	; 0x32
 8001768:	f001 f918 	bl	800299c <HAL_Delay>
  {
 800176c:	e7f5      	b.n	800175a <main+0x6a>
 800176e:	bf00      	nop
 8001770:	40000438 	.word	0x40000438
 8001774:	20000348 	.word	0x20000348
 8001778:	20000394 	.word	0x20000394
 800177c:	200002fc 	.word	0x200002fc
 8001780:	48001800 	.word	0x48001800
 8001784:	48001000 	.word	0x48001000
 8001788:	48001400 	.word	0x48001400

0800178c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b096      	sub	sp, #88	; 0x58
 8001790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	2244      	movs	r2, #68	; 0x44
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f006 f8f0 	bl	8007980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a0:	463b      	mov	r3, r7
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017b2:	f001 fc23 	bl	8002ffc <HAL_PWREx_ControlVoltageScaling>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80017bc:	f000 fc70 	bl	80020a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80017c0:	2310      	movs	r3, #16
 80017c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017c4:	2301      	movs	r3, #1
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017cc:	2360      	movs	r3, #96	; 0x60
 80017ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4618      	mov	r0, r3
 80017da:	f001 fcc3 	bl	8003164 <HAL_RCC_OscConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80017e4:	f000 fc5c 	bl	80020a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e8:	230f      	movs	r3, #15
 80017ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80017ec:	2300      	movs	r3, #0
 80017ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017fc:	463b      	mov	r3, r7
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f002 f8c9 	bl	8003998 <HAL_RCC_ClockConfig>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800180c:	f000 fc48 	bl	80020a0 <Error_Handler>
  }
}
 8001810:	bf00      	nop
 8001812:	3758      	adds	r7, #88	; 0x58
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800181c:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <MX_LPUART1_UART_Init+0x90>)
 800181e:	4a23      	ldr	r2, [pc, #140]	; (80018ac <MX_LPUART1_UART_Init+0x94>)
 8001820:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <MX_LPUART1_UART_Init+0x90>)
 8001824:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001828:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800182a:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <MX_LPUART1_UART_Init+0x90>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001830:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <MX_LPUART1_UART_Init+0x90>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001836:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <MX_LPUART1_UART_Init+0x90>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800183c:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <MX_LPUART1_UART_Init+0x90>)
 800183e:	220c      	movs	r2, #12
 8001840:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001842:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <MX_LPUART1_UART_Init+0x90>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001848:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <MX_LPUART1_UART_Init+0x90>)
 800184a:	2200      	movs	r2, #0
 800184c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <MX_LPUART1_UART_Init+0x90>)
 8001850:	2200      	movs	r2, #0
 8001852:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <MX_LPUART1_UART_Init+0x90>)
 8001856:	2200      	movs	r2, #0
 8001858:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <MX_LPUART1_UART_Init+0x90>)
 800185c:	2200      	movs	r2, #0
 800185e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001860:	4811      	ldr	r0, [pc, #68]	; (80018a8 <MX_LPUART1_UART_Init+0x90>)
 8001862:	f005 f9b9 	bl	8006bd8 <HAL_UART_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800186c:	f000 fc18 	bl	80020a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001870:	2100      	movs	r1, #0
 8001872:	480d      	ldr	r0, [pc, #52]	; (80018a8 <MX_LPUART1_UART_Init+0x90>)
 8001874:	f005 ff82 	bl	800777c <HAL_UARTEx_SetTxFifoThreshold>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800187e:	f000 fc0f 	bl	80020a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001882:	2100      	movs	r1, #0
 8001884:	4808      	ldr	r0, [pc, #32]	; (80018a8 <MX_LPUART1_UART_Init+0x90>)
 8001886:	f005 ffb7 	bl	80077f8 <HAL_UARTEx_SetRxFifoThreshold>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001890:	f000 fc06 	bl	80020a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <MX_LPUART1_UART_Init+0x90>)
 8001896:	f005 ff38 	bl	800770a <HAL_UARTEx_DisableFifoMode>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80018a0:	f000 fbfe 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000208 	.word	0x20000208
 80018ac:	40008000 	.word	0x40008000

080018b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <MX_SPI1_Init+0x74>)
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <MX_SPI1_Init+0x78>)
 80018b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <MX_SPI1_Init+0x74>)
 80018bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <MX_SPI1_Init+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c8:	4b16      	ldr	r3, [pc, #88]	; (8001924 <MX_SPI1_Init+0x74>)
 80018ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <MX_SPI1_Init+0x74>)
 80018d2:	2202      	movs	r2, #2
 80018d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <MX_SPI1_Init+0x74>)
 80018d8:	2200      	movs	r2, #0
 80018da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_SPI1_Init+0x74>)
 80018de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <MX_SPI1_Init+0x74>)
 80018e6:	2220      	movs	r2, #32
 80018e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_SPI1_Init+0x74>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MX_SPI1_Init+0x74>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <MX_SPI1_Init+0x74>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_SPI1_Init+0x74>)
 80018fe:	2207      	movs	r2, #7
 8001900:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <MX_SPI1_Init+0x74>)
 8001904:	2200      	movs	r2, #0
 8001906:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MX_SPI1_Init+0x74>)
 800190a:	2208      	movs	r2, #8
 800190c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <MX_SPI1_Init+0x74>)
 8001910:	f003 f818 	bl	8004944 <HAL_SPI_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800191a:	f000 fbc1 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000298 	.word	0x20000298
 8001928:	40013000 	.word	0x40013000

0800192c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08c      	sub	sp, #48	; 0x30
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001932:	f107 0320 	add.w	r3, r7, #32
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001958:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <MX_TIM2_Init+0xdc>)
 800195a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800195e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8001960:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <MX_TIM2_Init+0xdc>)
 8001962:	2203      	movs	r2, #3
 8001964:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001966:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <MX_TIM2_Init+0xdc>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800196c:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <MX_TIM2_Init+0xdc>)
 800196e:	f04f 32ff 	mov.w	r2, #4294967295
 8001972:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001974:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <MX_TIM2_Init+0xdc>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197a:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <MX_TIM2_Init+0xdc>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001980:	4821      	ldr	r0, [pc, #132]	; (8001a08 <MX_TIM2_Init+0xdc>)
 8001982:	f003 fbf9 	bl	8005178 <HAL_TIM_Base_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 800198c:	f000 fb88 	bl	80020a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001994:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001996:	f107 0320 	add.w	r3, r7, #32
 800199a:	4619      	mov	r1, r3
 800199c:	481a      	ldr	r0, [pc, #104]	; (8001a08 <MX_TIM2_Init+0xdc>)
 800199e:	f004 fa25 	bl	8005dec <HAL_TIM_ConfigClockSource>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80019a8:	f000 fb7a 	bl	80020a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80019ac:	4816      	ldr	r0, [pc, #88]	; (8001a08 <MX_TIM2_Init+0xdc>)
 80019ae:	f003 fda1 	bl	80054f4 <HAL_TIM_IC_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80019b8:	f000 fb72 	bl	80020a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	480f      	ldr	r0, [pc, #60]	; (8001a08 <MX_TIM2_Init+0xdc>)
 80019cc:	f005 f85e 	bl	8006a8c <HAL_TIMEx_MasterConfigSynchronization>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80019d6:	f000 fb63 	bl	80020a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019de:	2301      	movs	r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	2200      	movs	r2, #0
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_TIM2_Init+0xdc>)
 80019f2:	f004 f84a 	bl	8005a8a <HAL_TIM_IC_ConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80019fc:	f000 fb50 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	3730      	adds	r7, #48	; 0x30
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200002fc 	.word	0x200002fc

08001a0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08e      	sub	sp, #56	; 0x38
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]
 8001a3a:	615a      	str	r2, [r3, #20]
 8001a3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a3e:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <MX_TIM3_Init+0xe8>)
 8001a40:	4a2d      	ldr	r2, [pc, #180]	; (8001af8 <MX_TIM3_Init+0xec>)
 8001a42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39;
 8001a44:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <MX_TIM3_Init+0xe8>)
 8001a46:	2227      	movs	r2, #39	; 0x27
 8001a48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4a:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <MX_TIM3_Init+0xe8>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 8001a50:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <MX_TIM3_Init+0xe8>)
 8001a52:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001a56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a58:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <MX_TIM3_Init+0xe8>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5e:	4b25      	ldr	r3, [pc, #148]	; (8001af4 <MX_TIM3_Init+0xe8>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a64:	4823      	ldr	r0, [pc, #140]	; (8001af4 <MX_TIM3_Init+0xe8>)
 8001a66:	f003 fb87 	bl	8005178 <HAL_TIM_Base_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001a70:	f000 fb16 	bl	80020a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	481c      	ldr	r0, [pc, #112]	; (8001af4 <MX_TIM3_Init+0xe8>)
 8001a82:	f004 f9b3 	bl	8005dec <HAL_TIM_ConfigClockSource>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001a8c:	f000 fb08 	bl	80020a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a90:	4818      	ldr	r0, [pc, #96]	; (8001af4 <MX_TIM3_Init+0xe8>)
 8001a92:	f003 fbc8 	bl	8005226 <HAL_TIM_PWM_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001a9c:	f000 fb00 	bl	80020a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	4619      	mov	r1, r3
 8001aae:	4811      	ldr	r0, [pc, #68]	; (8001af4 <MX_TIM3_Init+0xe8>)
 8001ab0:	f004 ffec 	bl	8006a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001aba:	f000 faf1 	bl	80020a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001abe:	2360      	movs	r3, #96	; 0x60
 8001ac0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 60;
 8001ac2:	233c      	movs	r3, #60	; 0x3c
 8001ac4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ace:	463b      	mov	r3, r7
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4807      	ldr	r0, [pc, #28]	; (8001af4 <MX_TIM3_Init+0xe8>)
 8001ad6:	f004 f875 	bl	8005bc4 <HAL_TIM_PWM_ConfigChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001ae0:	f000 fade 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ae4:	4803      	ldr	r0, [pc, #12]	; (8001af4 <MX_TIM3_Init+0xe8>)
 8001ae6:	f000 fd25 	bl	8002534 <HAL_TIM_MspPostInit>

}
 8001aea:	bf00      	nop
 8001aec:	3738      	adds	r7, #56	; 0x38
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000348 	.word	0x20000348
 8001af8:	40000400 	.word	0x40000400

08001afc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08e      	sub	sp, #56	; 0x38
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
 8001b28:	611a      	str	r2, [r3, #16]
 8001b2a:	615a      	str	r2, [r3, #20]
 8001b2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b2e:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <MX_TIM4_Init+0xe8>)
 8001b30:	4a2d      	ldr	r2, [pc, #180]	; (8001be8 <MX_TIM4_Init+0xec>)
 8001b32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39;
 8001b34:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <MX_TIM4_Init+0xe8>)
 8001b36:	2227      	movs	r2, #39	; 0x27
 8001b38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3a:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <MX_TIM4_Init+0xe8>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3999;
 8001b40:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <MX_TIM4_Init+0xe8>)
 8001b42:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001b46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b48:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <MX_TIM4_Init+0xe8>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4e:	4b25      	ldr	r3, [pc, #148]	; (8001be4 <MX_TIM4_Init+0xe8>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b54:	4823      	ldr	r0, [pc, #140]	; (8001be4 <MX_TIM4_Init+0xe8>)
 8001b56:	f003 fb0f 	bl	8005178 <HAL_TIM_Base_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001b60:	f000 fa9e 	bl	80020a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	481c      	ldr	r0, [pc, #112]	; (8001be4 <MX_TIM4_Init+0xe8>)
 8001b72:	f004 f93b 	bl	8005dec <HAL_TIM_ConfigClockSource>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001b7c:	f000 fa90 	bl	80020a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b80:	4818      	ldr	r0, [pc, #96]	; (8001be4 <MX_TIM4_Init+0xe8>)
 8001b82:	f003 fb50 	bl	8005226 <HAL_TIM_PWM_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001b8c:	f000 fa88 	bl	80020a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4811      	ldr	r0, [pc, #68]	; (8001be4 <MX_TIM4_Init+0xe8>)
 8001ba0:	f004 ff74 	bl	8006a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001baa:	f000 fa79 	bl	80020a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bae:	2360      	movs	r3, #96	; 0x60
 8001bb0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 60;
 8001bb2:	233c      	movs	r3, #60	; 0x3c
 8001bb4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bbe:	463b      	mov	r3, r7
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4807      	ldr	r0, [pc, #28]	; (8001be4 <MX_TIM4_Init+0xe8>)
 8001bc6:	f003 fffd 	bl	8005bc4 <HAL_TIM_PWM_ConfigChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001bd0:	f000 fa66 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001bd4:	4803      	ldr	r0, [pc, #12]	; (8001be4 <MX_TIM4_Init+0xe8>)
 8001bd6:	f000 fcad 	bl	8002534 <HAL_TIM_MspPostInit>

}
 8001bda:	bf00      	nop
 8001bdc:	3738      	adds	r7, #56	; 0x38
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000394 	.word	0x20000394
 8001be8:	40000800 	.word	0x40000800

08001bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08e      	sub	sp, #56	; 0x38
 8001bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c02:	4bb4      	ldr	r3, [pc, #720]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c06:	4ab3      	ldr	r2, [pc, #716]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001c08:	f043 0310 	orr.w	r3, r3, #16
 8001c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0e:	4bb1      	ldr	r3, [pc, #708]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	623b      	str	r3, [r7, #32]
 8001c18:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1a:	4bae      	ldr	r3, [pc, #696]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	4aad      	ldr	r2, [pc, #692]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c26:	4bab      	ldr	r3, [pc, #684]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	61fb      	str	r3, [r7, #28]
 8001c30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c32:	4ba8      	ldr	r3, [pc, #672]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	4aa7      	ldr	r2, [pc, #668]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001c38:	f043 0320 	orr.w	r3, r3, #32
 8001c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c3e:	4ba5      	ldr	r3, [pc, #660]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	61bb      	str	r3, [r7, #24]
 8001c48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c4a:	4ba2      	ldr	r3, [pc, #648]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	4aa1      	ldr	r2, [pc, #644]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c56:	4b9f      	ldr	r3, [pc, #636]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	4b9c      	ldr	r3, [pc, #624]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	4a9b      	ldr	r2, [pc, #620]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6e:	4b99      	ldr	r3, [pc, #612]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	4b96      	ldr	r3, [pc, #600]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	4a95      	ldr	r2, [pc, #596]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c86:	4b93      	ldr	r3, [pc, #588]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c92:	4b90      	ldr	r3, [pc, #576]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	4a8f      	ldr	r2, [pc, #572]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001c98:	f043 0308 	orr.w	r3, r3, #8
 8001c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9e:	4b8d      	ldr	r3, [pc, #564]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001caa:	4b8a      	ldr	r3, [pc, #552]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cae:	4a89      	ldr	r2, [pc, #548]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb6:	4b87      	ldr	r3, [pc, #540]	; (8001ed4 <MX_GPIO_Init+0x2e8>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001cc2:	f001 fa3f 	bl	8003144 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2120      	movs	r1, #32
 8001cca:	4883      	ldr	r0, [pc, #524]	; (8001ed8 <MX_GPIO_Init+0x2ec>)
 8001ccc:	f001 f946 	bl	8002f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2104      	movs	r1, #4
 8001cd4:	4881      	ldr	r0, [pc, #516]	; (8001edc <MX_GPIO_Init+0x2f0>)
 8001cd6:	f001 f941 	bl	8002f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3320_CS_GPIO_Port, LD3320_CS_Pin, GPIO_PIN_SET);
 8001cda:	2201      	movs	r2, #1
 8001cdc:	2110      	movs	r1, #16
 8001cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce2:	f001 f93b 	bl	8002f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3320_WR_Pin|LD3320_RST_Pin, GPIO_PIN_RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8001cec:	487c      	ldr	r0, [pc, #496]	; (8001ee0 <MX_GPIO_Init+0x2f4>)
 8001cee:	f001 f935 	bl	8002f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	210c      	movs	r1, #12
 8001cf6:	487b      	ldr	r0, [pc, #492]	; (8001ee4 <MX_GPIO_Init+0x2f8>)
 8001cf8:	f001 f930 	bl	8002f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cfc:	230c      	movs	r3, #12
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001d0c:	230d      	movs	r3, #13
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d14:	4619      	mov	r1, r3
 8001d16:	4870      	ldr	r0, [pc, #448]	; (8001ed8 <MX_GPIO_Init+0x2ec>)
 8001d18:	f000 ff76 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d1c:	2320      	movs	r3, #32
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d20:	2301      	movs	r3, #1
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d30:	4619      	mov	r1, r3
 8001d32:	4869      	ldr	r0, [pc, #420]	; (8001ed8 <MX_GPIO_Init+0x2ec>)
 8001d34:	f000 ff68 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d3c:	2312      	movs	r3, #18
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d44:	2303      	movs	r3, #3
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d48:	2304      	movs	r3, #4
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d50:	4619      	mov	r1, r3
 8001d52:	4862      	ldr	r0, [pc, #392]	; (8001edc <MX_GPIO_Init+0x2f0>)
 8001d54:	f000 ff58 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d58:	2304      	movs	r3, #4
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d64:	2300      	movs	r3, #0
 8001d66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	485b      	ldr	r0, [pc, #364]	; (8001edc <MX_GPIO_Init+0x2f0>)
 8001d70:	f000 ff4a 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001d84:	230d      	movs	r3, #13
 8001d86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4853      	ldr	r0, [pc, #332]	; (8001edc <MX_GPIO_Init+0x2f0>)
 8001d90:	f000 ff3a 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001da6:	2302      	movs	r3, #2
 8001da8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dae:	4619      	mov	r1, r3
 8001db0:	484a      	ldr	r0, [pc, #296]	; (8001edc <MX_GPIO_Init+0x2f0>)
 8001db2:	f000 ff29 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001db6:	233f      	movs	r3, #63	; 0x3f
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001dba:	230b      	movs	r3, #11
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4847      	ldr	r0, [pc, #284]	; (8001ee8 <MX_GPIO_Init+0x2fc>)
 8001dca:	f000 ff1d 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001dce:	230a      	movs	r3, #10
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001dd2:	230b      	movs	r3, #11
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dde:	4619      	mov	r1, r3
 8001de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de4:	f000 ff10 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001de8:	2304      	movs	r3, #4
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e00:	4619      	mov	r1, r3
 8001e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e06:	f000 feff 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3320_CS_Pin */
  GPIO_InitStruct.Pin = LD3320_CS_Pin;
 8001e0a:	2310      	movs	r3, #16
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e16:	2302      	movs	r3, #2
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3320_CS_GPIO_Port, &GPIO_InitStruct);
 8001e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e24:	f000 fef0 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001e2c:	230b      	movs	r3, #11
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4829      	ldr	r0, [pc, #164]	; (8001ee0 <MX_GPIO_Init+0x2f4>)
 8001e3c:	f000 fee4 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001e40:	2344      	movs	r3, #68	; 0x44
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e44:	2303      	movs	r3, #3
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e50:	4619      	mov	r1, r3
 8001e52:	4823      	ldr	r0, [pc, #140]	; (8001ee0 <MX_GPIO_Init+0x2f4>)
 8001e54:	f000 fed8 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e58:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e72:	4619      	mov	r1, r3
 8001e74:	4818      	ldr	r0, [pc, #96]	; (8001ed8 <MX_GPIO_Init+0x2ec>)
 8001e76:	f000 fec7 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001e7a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e94:	4619      	mov	r1, r3
 8001e96:	4810      	ldr	r0, [pc, #64]	; (8001ed8 <MX_GPIO_Init+0x2ec>)
 8001e98:	f000 feb6 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3320_IRQ_Pin */
  GPIO_InitStruct.Pin = LD3320_IRQ_Pin;
 8001e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ea2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LD3320_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	480b      	ldr	r0, [pc, #44]	; (8001ee0 <MX_GPIO_Init+0x2f4>)
 8001eb4:	f000 fea8 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3320_WR_Pin LD3320_RST_Pin */
  GPIO_InitStruct.Pin = LD3320_WR_Pin|LD3320_RST_Pin;
 8001eb8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ece:	4619      	mov	r1, r3
 8001ed0:	e00c      	b.n	8001eec <MX_GPIO_Init+0x300>
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	48001000 	.word	0x48001000
 8001edc:	48001400 	.word	0x48001400
 8001ee0:	48000400 	.word	0x48000400
 8001ee4:	48001800 	.word	0x48001800
 8001ee8:	48000800 	.word	0x48000800
 8001eec:	485f      	ldr	r0, [pc, #380]	; (800206c <MX_GPIO_Init+0x480>)
 8001eee:	f000 fe8b 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ef2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f00:	2303      	movs	r3, #3
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f04:	2307      	movs	r3, #7
 8001f06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4858      	ldr	r0, [pc, #352]	; (8002070 <MX_GPIO_Init+0x484>)
 8001f10:	f000 fe7a 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f14:	230c      	movs	r3, #12
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4852      	ldr	r0, [pc, #328]	; (8002074 <MX_GPIO_Init+0x488>)
 8001f2c:	f000 fe6c 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f30:	2340      	movs	r3, #64	; 0x40
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001f40:	230d      	movs	r3, #13
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f48:	4619      	mov	r1, r3
 8001f4a:	484b      	ldr	r0, [pc, #300]	; (8002078 <MX_GPIO_Init+0x48c>)
 8001f4c:	f000 fe5c 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001f50:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f62:	230c      	movs	r3, #12
 8001f64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4842      	ldr	r0, [pc, #264]	; (8002078 <MX_GPIO_Init+0x48c>)
 8001f6e:	f000 fe4b 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001f72:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f80:	2303      	movs	r3, #3
 8001f82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f84:	230a      	movs	r3, #10
 8001f86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f92:	f000 fe39 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fae:	f000 fe2b 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001fc2:	2309      	movs	r3, #9
 8001fc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4828      	ldr	r0, [pc, #160]	; (8002070 <MX_GPIO_Init+0x484>)
 8001fce:	f000 fe1b 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fd2:	2304      	movs	r3, #4
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001fe2:	230c      	movs	r3, #12
 8001fe4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fea:	4619      	mov	r1, r3
 8001fec:	4820      	ldr	r0, [pc, #128]	; (8002070 <MX_GPIO_Init+0x484>)
 8001fee:	f000 fe0b 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001ff2:	2378      	movs	r3, #120	; 0x78
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffe:	2303      	movs	r3, #3
 8002000:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002002:	2307      	movs	r3, #7
 8002004:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200a:	4619      	mov	r1, r3
 800200c:	4818      	ldr	r0, [pc, #96]	; (8002070 <MX_GPIO_Init+0x484>)
 800200e:	f000 fdfb 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002012:	2338      	movs	r3, #56	; 0x38
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201e:	2303      	movs	r3, #3
 8002020:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002022:	2306      	movs	r3, #6
 8002024:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800202a:	4619      	mov	r1, r3
 800202c:	480f      	ldr	r0, [pc, #60]	; (800206c <MX_GPIO_Init+0x480>)
 800202e:	f000 fdeb 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002032:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002038:	2312      	movs	r3, #18
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002040:	2303      	movs	r3, #3
 8002042:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002044:	2304      	movs	r3, #4
 8002046:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204c:	4619      	mov	r1, r3
 800204e:	4807      	ldr	r0, [pc, #28]	; (800206c <MX_GPIO_Init+0x480>)
 8002050:	f000 fdda 	bl	8002c08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8002054:	2200      	movs	r2, #0
 8002056:	2103      	movs	r1, #3
 8002058:	2028      	movs	r0, #40	; 0x28
 800205a:	f000 fd9e 	bl	8002b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800205e:	2028      	movs	r0, #40	; 0x28
 8002060:	f000 fdb7 	bl	8002bd2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002064:	bf00      	nop
 8002066:	3738      	adds	r7, #56	; 0x38
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	48000400 	.word	0x48000400
 8002070:	48000c00 	.word	0x48000c00
 8002074:	48001800 	.word	0x48001800
 8002078:	48000800 	.word	0x48000800

0800207c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002084:	1d39      	adds	r1, r7, #4
 8002086:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800208a:	2201      	movs	r2, #1
 800208c:	4803      	ldr	r0, [pc, #12]	; (800209c <__io_putchar+0x20>)
 800208e:	f004 fdf3 	bl	8006c78 <HAL_UART_Transmit>
  return ch;
 8002092:	687b      	ldr	r3, [r7, #4]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000208 	.word	0x20000208

080020a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a4:	b672      	cpsid	i
}
 80020a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <Error_Handler+0x8>
	...

080020ac <move_forward>:
 */
#include "motor.h"
#include "main.h"


void move_forward(){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 80020b0:	2201      	movs	r2, #1
 80020b2:	2104      	movs	r1, #4
 80020b4:	4809      	ldr	r0, [pc, #36]	; (80020dc <move_forward+0x30>)
 80020b6:	f000 ff51 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2108      	movs	r1, #8
 80020be:	4807      	ldr	r0, [pc, #28]	; (80020dc <move_forward+0x30>)
 80020c0:	f000 ff4c 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 0);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2120      	movs	r1, #32
 80020c8:	4805      	ldr	r0, [pc, #20]	; (80020e0 <move_forward+0x34>)
 80020ca:	f000 ff47 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 1);
 80020ce:	2201      	movs	r2, #1
 80020d0:	2104      	movs	r1, #4
 80020d2:	4804      	ldr	r0, [pc, #16]	; (80020e4 <move_forward+0x38>)
 80020d4:	f000 ff42 	bl	8002f5c <HAL_GPIO_WritePin>
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	48001800 	.word	0x48001800
 80020e0:	48001000 	.word	0x48001000
 80020e4:	48001400 	.word	0x48001400

080020e8 <move_backward>:


void move_backward(){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 0);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2104      	movs	r1, #4
 80020f0:	4809      	ldr	r0, [pc, #36]	; (8002118 <move_backward+0x30>)
 80020f2:	f000 ff33 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 80020f6:	2201      	movs	r2, #1
 80020f8:	2108      	movs	r1, #8
 80020fa:	4807      	ldr	r0, [pc, #28]	; (8002118 <move_backward+0x30>)
 80020fc:	f000 ff2e 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 1);
 8002100:	2201      	movs	r2, #1
 8002102:	2120      	movs	r1, #32
 8002104:	4805      	ldr	r0, [pc, #20]	; (800211c <move_backward+0x34>)
 8002106:	f000 ff29 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2104      	movs	r1, #4
 800210e:	4804      	ldr	r0, [pc, #16]	; (8002120 <move_backward+0x38>)
 8002110:	f000 ff24 	bl	8002f5c <HAL_GPIO_WritePin>
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}
 8002118:	48001800 	.word	0x48001800
 800211c:	48001000 	.word	0x48001000
 8002120:	48001400 	.word	0x48001400

08002124 <move_left>:


void move_left(){
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8002128:	2201      	movs	r2, #1
 800212a:	2104      	movs	r1, #4
 800212c:	4809      	ldr	r0, [pc, #36]	; (8002154 <move_left+0x30>)
 800212e:	f000 ff15 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2108      	movs	r1, #8
 8002136:	4807      	ldr	r0, [pc, #28]	; (8002154 <move_left+0x30>)
 8002138:	f000 ff10 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 1);
 800213c:	2201      	movs	r2, #1
 800213e:	2120      	movs	r1, #32
 8002140:	4805      	ldr	r0, [pc, #20]	; (8002158 <move_left+0x34>)
 8002142:	f000 ff0b 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 0);
 8002146:	2200      	movs	r2, #0
 8002148:	2104      	movs	r1, #4
 800214a:	4804      	ldr	r0, [pc, #16]	; (800215c <move_left+0x38>)
 800214c:	f000 ff06 	bl	8002f5c <HAL_GPIO_WritePin>
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}
 8002154:	48001800 	.word	0x48001800
 8002158:	48001000 	.word	0x48001000
 800215c:	48001400 	.word	0x48001400

08002160 <move_right>:


void move_right(){
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 0);
 8002164:	2200      	movs	r2, #0
 8002166:	2104      	movs	r1, #4
 8002168:	4809      	ldr	r0, [pc, #36]	; (8002190 <move_right+0x30>)
 800216a:	f000 fef7 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 800216e:	2201      	movs	r2, #1
 8002170:	2108      	movs	r1, #8
 8002172:	4807      	ldr	r0, [pc, #28]	; (8002190 <move_right+0x30>)
 8002174:	f000 fef2 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 0);
 8002178:	2200      	movs	r2, #0
 800217a:	2120      	movs	r1, #32
 800217c:	4805      	ldr	r0, [pc, #20]	; (8002194 <move_right+0x34>)
 800217e:	f000 feed 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 1);
 8002182:	2201      	movs	r2, #1
 8002184:	2104      	movs	r1, #4
 8002186:	4804      	ldr	r0, [pc, #16]	; (8002198 <move_right+0x38>)
 8002188:	f000 fee8 	bl	8002f5c <HAL_GPIO_WritePin>
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	48001800 	.word	0x48001800
 8002194:	48001000 	.word	0x48001000
 8002198:	48001400 	.word	0x48001400

0800219c <move_stop>:


void move_stop(){
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 0);
 80021a0:	2200      	movs	r2, #0
 80021a2:	2104      	movs	r1, #4
 80021a4:	4809      	ldr	r0, [pc, #36]	; (80021cc <move_stop+0x30>)
 80021a6:	f000 fed9 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2108      	movs	r1, #8
 80021ae:	4807      	ldr	r0, [pc, #28]	; (80021cc <move_stop+0x30>)
 80021b0:	f000 fed4 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 0);
 80021b4:	2200      	movs	r2, #0
 80021b6:	2120      	movs	r1, #32
 80021b8:	4805      	ldr	r0, [pc, #20]	; (80021d0 <move_stop+0x34>)
 80021ba:	f000 fecf 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2104      	movs	r1, #4
 80021c2:	4804      	ldr	r0, [pc, #16]	; (80021d4 <move_stop+0x38>)
 80021c4:	f000 feca 	bl	8002f5c <HAL_GPIO_WritePin>
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	48001800 	.word	0x48001800
 80021d0:	48001000 	.word	0x48001000
 80021d4:	48001400 	.word	0x48001400

080021d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <HAL_MspInit+0x44>)
 80021e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e2:	4a0e      	ldr	r2, [pc, #56]	; (800221c <HAL_MspInit+0x44>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6613      	str	r3, [r2, #96]	; 0x60
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_MspInit+0x44>)
 80021ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_MspInit+0x44>)
 80021f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fa:	4a08      	ldr	r2, [pc, #32]	; (800221c <HAL_MspInit+0x44>)
 80021fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002200:	6593      	str	r3, [r2, #88]	; 0x58
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_MspInit+0x44>)
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000

08002220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b0ae      	sub	sp, #184	; 0xb8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002238:	f107 0310 	add.w	r3, r7, #16
 800223c:	2294      	movs	r2, #148	; 0x94
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f005 fb9d 	bl	8007980 <memset>
  if(huart->Instance==LPUART1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a22      	ldr	r2, [pc, #136]	; (80022d4 <HAL_UART_MspInit+0xb4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d13d      	bne.n	80022cc <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002250:	2320      	movs	r3, #32
 8002252:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002254:	2300      	movs	r3, #0
 8002256:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002258:	f107 0310 	add.w	r3, r7, #16
 800225c:	4618      	mov	r0, r3
 800225e:	f001 fe59 	bl	8003f14 <HAL_RCCEx_PeriphCLKConfig>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002268:	f7ff ff1a 	bl	80020a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800226c:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <HAL_UART_MspInit+0xb8>)
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	4a19      	ldr	r2, [pc, #100]	; (80022d8 <HAL_UART_MspInit+0xb8>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002278:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <HAL_UART_MspInit+0xb8>)
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002284:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <HAL_UART_MspInit+0xb8>)
 8002286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002288:	4a13      	ldr	r2, [pc, #76]	; (80022d8 <HAL_UART_MspInit+0xb8>)
 800228a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800228e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_UART_MspInit+0xb8>)
 8002292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 800229c:	f000 ff52 	bl	8003144 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80022a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80022a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	2302      	movs	r3, #2
 80022aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b4:	2303      	movs	r3, #3
 80022b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80022ba:	2308      	movs	r3, #8
 80022bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022c4:	4619      	mov	r1, r3
 80022c6:	4805      	ldr	r0, [pc, #20]	; (80022dc <HAL_UART_MspInit+0xbc>)
 80022c8:	f000 fc9e 	bl	8002c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80022cc:	bf00      	nop
 80022ce:	37b8      	adds	r7, #184	; 0xb8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40008000 	.word	0x40008000
 80022d8:	40021000 	.word	0x40021000
 80022dc:	48001800 	.word	0x48001800

080022e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a17      	ldr	r2, [pc, #92]	; (800235c <HAL_SPI_MspInit+0x7c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d128      	bne.n	8002354 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <HAL_SPI_MspInit+0x80>)
 8002304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002306:	4a16      	ldr	r2, [pc, #88]	; (8002360 <HAL_SPI_MspInit+0x80>)
 8002308:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800230c:	6613      	str	r3, [r2, #96]	; 0x60
 800230e:	4b14      	ldr	r3, [pc, #80]	; (8002360 <HAL_SPI_MspInit+0x80>)
 8002310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_SPI_MspInit+0x80>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231e:	4a10      	ldr	r2, [pc, #64]	; (8002360 <HAL_SPI_MspInit+0x80>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <HAL_SPI_MspInit+0x80>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LD3320_SCK_Pin|LD3320_MISO_Pin|LD3320_MOSI_Pin;
 8002332:	23e0      	movs	r3, #224	; 0xe0
 8002334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233e:	2303      	movs	r3, #3
 8002340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002342:	2305      	movs	r3, #5
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002346:	f107 0314 	add.w	r3, r7, #20
 800234a:	4619      	mov	r1, r3
 800234c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002350:	f000 fc5a 	bl	8002c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002354:	bf00      	nop
 8002356:	3728      	adds	r7, #40	; 0x28
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40013000 	.word	0x40013000
 8002360:	40021000 	.word	0x40021000

08002364 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b090      	sub	sp, #64	; 0x40
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002384:	d14e      	bne.n	8002424 <HAL_TIM_Base_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002386:	4b65      	ldr	r3, [pc, #404]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	4a64      	ldr	r2, [pc, #400]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6593      	str	r3, [r2, #88]	; 0x58
 8002392:	4b62      	ldr	r3, [pc, #392]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 8002394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	62bb      	str	r3, [r7, #40]	; 0x28
 800239c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239e:	4b5f      	ldr	r3, [pc, #380]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 80023a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a2:	4a5e      	ldr	r2, [pc, #376]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023aa:	4b5c      	ldr	r3, [pc, #368]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 80023ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b6:	4b59      	ldr	r3, [pc, #356]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	4a58      	ldr	r2, [pc, #352]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 80023bc:	f043 0302 	orr.w	r3, r3, #2
 80023c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023c2:	4b56      	ldr	r3, [pc, #344]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	623b      	str	r3, [r7, #32]
 80023cc:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023ce:	2301      	movs	r3, #1
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023de:	2301      	movs	r3, #1
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e6:	4619      	mov	r1, r3
 80023e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ec:	f000 fc0c 	bl	8002c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2300      	movs	r3, #0
 8002400:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002402:	2301      	movs	r3, #1
 8002404:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002406:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800240a:	4619      	mov	r1, r3
 800240c:	4844      	ldr	r0, [pc, #272]	; (8002520 <HAL_TIM_Base_MspInit+0x1bc>)
 800240e:	f000 fbfb 	bl	8002c08 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	201c      	movs	r0, #28
 8002418:	f000 fbbf 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800241c:	201c      	movs	r0, #28
 800241e:	f000 fbd8 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002422:	e077      	b.n	8002514 <HAL_TIM_Base_MspInit+0x1b0>
  else if(htim_base->Instance==TIM3)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a3e      	ldr	r2, [pc, #248]	; (8002524 <HAL_TIM_Base_MspInit+0x1c0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d128      	bne.n	8002480 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800242e:	4b3b      	ldr	r3, [pc, #236]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	4a3a      	ldr	r2, [pc, #232]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 8002434:	f043 0302 	orr.w	r3, r3, #2
 8002438:	6593      	str	r3, [r2, #88]	; 0x58
 800243a:	4b38      	ldr	r3, [pc, #224]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 800243c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	61fb      	str	r3, [r7, #28]
 8002444:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002446:	4b35      	ldr	r3, [pc, #212]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 8002448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244a:	4a34      	ldr	r2, [pc, #208]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 800244c:	f043 0302 	orr.w	r3, r3, #2
 8002450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002452:	4b32      	ldr	r3, [pc, #200]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 8002454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800245e:	2301      	movs	r3, #1
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2300      	movs	r3, #0
 800246c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800246e:	2302      	movs	r3, #2
 8002470:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002472:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002476:	4619      	mov	r1, r3
 8002478:	4829      	ldr	r0, [pc, #164]	; (8002520 <HAL_TIM_Base_MspInit+0x1bc>)
 800247a:	f000 fbc5 	bl	8002c08 <HAL_GPIO_Init>
}
 800247e:	e049      	b.n	8002514 <HAL_TIM_Base_MspInit+0x1b0>
  else if(htim_base->Instance==TIM4)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a28      	ldr	r2, [pc, #160]	; (8002528 <HAL_TIM_Base_MspInit+0x1c4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d144      	bne.n	8002514 <HAL_TIM_Base_MspInit+0x1b0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	4a23      	ldr	r2, [pc, #140]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 8002490:	f043 0304 	orr.w	r3, r3, #4
 8002494:	6593      	str	r3, [r2, #88]	; 0x58
 8002496:	4b21      	ldr	r3, [pc, #132]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 8002498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024a2:	4b1e      	ldr	r3, [pc, #120]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 80024a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a6:	4a1d      	ldr	r2, [pc, #116]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 80024a8:	f043 0308 	orr.w	r3, r3, #8
 80024ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ae:	4b1b      	ldr	r3, [pc, #108]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024ba:	4b18      	ldr	r3, [pc, #96]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 80024bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024be:	4a17      	ldr	r2, [pc, #92]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 80024c0:	f043 0310 	orr.w	r3, r3, #16
 80024c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <HAL_TIM_Base_MspInit+0x1b8>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80024d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e0:	2300      	movs	r3, #0
 80024e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024e4:	2302      	movs	r3, #2
 80024e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ec:	4619      	mov	r1, r3
 80024ee:	480f      	ldr	r0, [pc, #60]	; (800252c <HAL_TIM_Base_MspInit+0x1c8>)
 80024f0:	f000 fb8a 	bl	8002c08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024f4:	2301      	movs	r3, #1
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	2302      	movs	r3, #2
 80024fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	2300      	movs	r3, #0
 8002502:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002504:	2302      	movs	r3, #2
 8002506:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800250c:	4619      	mov	r1, r3
 800250e:	4808      	ldr	r0, [pc, #32]	; (8002530 <HAL_TIM_Base_MspInit+0x1cc>)
 8002510:	f000 fb7a 	bl	8002c08 <HAL_GPIO_Init>
}
 8002514:	bf00      	nop
 8002516:	3740      	adds	r7, #64	; 0x40
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	48000400 	.word	0x48000400
 8002524:	40000400 	.word	0x40000400
 8002528:	40000800 	.word	0x40000800
 800252c:	48000c00 	.word	0x48000c00
 8002530:	48001000 	.word	0x48001000

08002534 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a22      	ldr	r2, [pc, #136]	; (80025dc <HAL_TIM_MspPostInit+0xa8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d11c      	bne.n	8002590 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002556:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <HAL_TIM_MspPostInit+0xac>)
 8002558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255a:	4a21      	ldr	r2, [pc, #132]	; (80025e0 <HAL_TIM_MspPostInit+0xac>)
 800255c:	f043 0310 	orr.w	r3, r3, #16
 8002560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002562:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <HAL_TIM_MspPostInit+0xac>)
 8002564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PE4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800256e:	2310      	movs	r3, #16
 8002570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800257e:	2302      	movs	r3, #2
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	4619      	mov	r1, r3
 8002588:	4816      	ldr	r0, [pc, #88]	; (80025e4 <HAL_TIM_MspPostInit+0xb0>)
 800258a:	f000 fb3d 	bl	8002c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800258e:	e020      	b.n	80025d2 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <HAL_TIM_MspPostInit+0xb4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d11b      	bne.n	80025d2 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <HAL_TIM_MspPostInit+0xac>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259e:	4a10      	ldr	r2, [pc, #64]	; (80025e0 <HAL_TIM_MspPostInit+0xac>)
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <HAL_TIM_MspPostInit+0xac>)
 80025a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025b2:	2380      	movs	r3, #128	; 0x80
 80025b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2300      	movs	r3, #0
 80025c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025c2:	2302      	movs	r3, #2
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	4619      	mov	r1, r3
 80025cc:	4807      	ldr	r0, [pc, #28]	; (80025ec <HAL_TIM_MspPostInit+0xb8>)
 80025ce:	f000 fb1b 	bl	8002c08 <HAL_GPIO_Init>
}
 80025d2:	bf00      	nop
 80025d4:	3728      	adds	r7, #40	; 0x28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40000400 	.word	0x40000400
 80025e0:	40021000 	.word	0x40021000
 80025e4:	48001000 	.word	0x48001000
 80025e8:	40000800 	.word	0x40000800
 80025ec:	48000400 	.word	0x48000400

080025f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <NMI_Handler+0x4>

080025f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025fa:	e7fe      	b.n	80025fa <HardFault_Handler+0x4>

080025fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002600:	e7fe      	b.n	8002600 <MemManage_Handler+0x4>

08002602 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002606:	e7fe      	b.n	8002606 <BusFault_Handler+0x4>

08002608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800260c:	e7fe      	b.n	800260c <UsageFault_Handler+0x4>

0800260e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800263c:	f000 f98e 	bl	800295c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}

08002644 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (TIM2 -> CCER & 0b10){
 8002648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00e      	beq.n	8002674 <TIM2_IRQHandler+0x30>
		measure = TIM2 -> CNT;
 8002656:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	461a      	mov	r2, r3
 800265e:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <TIM2_IRQHandler+0x54>)
 8002660:	601a      	str	r2, [r3, #0]
		TIM2 -> CCER &= ~(0b10);
 8002662:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800266c:	f023 0302 	bic.w	r3, r3, #2
 8002670:	6213      	str	r3, [r2, #32]
 8002672:	e00b      	b.n	800268c <TIM2_IRQHandler+0x48>
	}
	else{
		TIM2 -> CNT = 0;
 8002674:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002678:	2200      	movs	r2, #0
 800267a:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2 -> CCER |= (0b10);
 800267c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002686:	f043 0302 	orr.w	r3, r3, #2
 800268a:	6213      	str	r3, [r2, #32]
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800268c:	4803      	ldr	r0, [pc, #12]	; (800269c <TIM2_IRQHandler+0x58>)
 800268e:	f003 f8dd 	bl	800584c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200001f8 	.word	0x200001f8
 800269c:	200002fc 	.word	0x200002fc

080026a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LD3320_IRQ_Pin);
 80026a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80026a8:	f000 fc70 	bl	8002f8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return 1;
 80026b4:	2301      	movs	r3, #1
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <_kill>:

int _kill(int pid, int sig)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026ca:	f005 f921 	bl	8007910 <__errno>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2216      	movs	r2, #22
 80026d2:	601a      	str	r2, [r3, #0]
  return -1;
 80026d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_exit>:

void _exit (int status)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026e8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ffe7 	bl	80026c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026f2:	e7fe      	b.n	80026f2 <_exit+0x12>

080026f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	e00a      	b.n	800271c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002706:	f3af 8000 	nop.w
 800270a:	4601      	mov	r1, r0
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	60ba      	str	r2, [r7, #8]
 8002712:	b2ca      	uxtb	r2, r1
 8002714:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	3301      	adds	r3, #1
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	429a      	cmp	r2, r3
 8002722:	dbf0      	blt.n	8002706 <_read+0x12>
  }

  return len;
 8002724:	687b      	ldr	r3, [r7, #4]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
 800273e:	e009      	b.n	8002754 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	60ba      	str	r2, [r7, #8]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fc97 	bl	800207c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	3301      	adds	r3, #1
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	429a      	cmp	r2, r3
 800275a:	dbf1      	blt.n	8002740 <_write+0x12>
  }
  return len;
 800275c:	687b      	ldr	r3, [r7, #4]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <_close>:

int _close(int file)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800276e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800278e:	605a      	str	r2, [r3, #4]
  return 0;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <_isatty>:

int _isatty(int file)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027a6:	2301      	movs	r3, #1
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d8:	4a14      	ldr	r2, [pc, #80]	; (800282c <_sbrk+0x5c>)
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <_sbrk+0x60>)
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027e4:	4b13      	ldr	r3, [pc, #76]	; (8002834 <_sbrk+0x64>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d102      	bne.n	80027f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <_sbrk+0x64>)
 80027ee:	4a12      	ldr	r2, [pc, #72]	; (8002838 <_sbrk+0x68>)
 80027f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <_sbrk+0x64>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d207      	bcs.n	8002810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002800:	f005 f886 	bl	8007910 <__errno>
 8002804:	4603      	mov	r3, r0
 8002806:	220c      	movs	r2, #12
 8002808:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800280a:	f04f 33ff 	mov.w	r3, #4294967295
 800280e:	e009      	b.n	8002824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002810:	4b08      	ldr	r3, [pc, #32]	; (8002834 <_sbrk+0x64>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002816:	4b07      	ldr	r3, [pc, #28]	; (8002834 <_sbrk+0x64>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	4a05      	ldr	r2, [pc, #20]	; (8002834 <_sbrk+0x64>)
 8002820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002822:	68fb      	ldr	r3, [r7, #12]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	200a0000 	.word	0x200a0000
 8002830:	00000400 	.word	0x00000400
 8002834:	200003e0 	.word	0x200003e0
 8002838:	200003f8 	.word	0x200003f8

0800283c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <SystemInit+0x20>)
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002846:	4a05      	ldr	r2, [pc, #20]	; (800285c <SystemInit+0x20>)
 8002848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800284c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002898 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002864:	f7ff ffea 	bl	800283c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002868:	480c      	ldr	r0, [pc, #48]	; (800289c <LoopForever+0x6>)
  ldr r1, =_edata
 800286a:	490d      	ldr	r1, [pc, #52]	; (80028a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800286c:	4a0d      	ldr	r2, [pc, #52]	; (80028a4 <LoopForever+0xe>)
  movs r3, #0
 800286e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002870:	e002      	b.n	8002878 <LoopCopyDataInit>

08002872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002876:	3304      	adds	r3, #4

08002878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800287a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800287c:	d3f9      	bcc.n	8002872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800287e:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002880:	4c0a      	ldr	r4, [pc, #40]	; (80028ac <LoopForever+0x16>)
  movs r3, #0
 8002882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002884:	e001      	b.n	800288a <LoopFillZerobss>

08002886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002888:	3204      	adds	r2, #4

0800288a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800288a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800288c:	d3fb      	bcc.n	8002886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800288e:	f005 f845 	bl	800791c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002892:	f7fe ff2d 	bl	80016f0 <main>

08002896 <LoopForever>:

LoopForever:
    b LoopForever
 8002896:	e7fe      	b.n	8002896 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002898:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800289c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028a0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80028a4:	0800a9e4 	.word	0x0800a9e4
  ldr r2, =_sbss
 80028a8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80028ac:	200003f8 	.word	0x200003f8

080028b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028b0:	e7fe      	b.n	80028b0 <ADC1_IRQHandler>

080028b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028bc:	2003      	movs	r0, #3
 80028be:	f000 f961 	bl	8002b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028c2:	2000      	movs	r0, #0
 80028c4:	f000 f80e 	bl	80028e4 <HAL_InitTick>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	71fb      	strb	r3, [r7, #7]
 80028d2:	e001      	b.n	80028d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028d4:	f7ff fc80 	bl	80021d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028d8:	79fb      	ldrb	r3, [r7, #7]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80028f0:	4b17      	ldr	r3, [pc, #92]	; (8002950 <HAL_InitTick+0x6c>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d023      	beq.n	8002940 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80028f8:	4b16      	ldr	r3, [pc, #88]	; (8002954 <HAL_InitTick+0x70>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b14      	ldr	r3, [pc, #80]	; (8002950 <HAL_InitTick+0x6c>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	4619      	mov	r1, r3
 8002902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002906:	fbb3 f3f1 	udiv	r3, r3, r1
 800290a:	fbb2 f3f3 	udiv	r3, r2, r3
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f96d 	bl	8002bee <HAL_SYSTICK_Config>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10f      	bne.n	800293a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b0f      	cmp	r3, #15
 800291e:	d809      	bhi.n	8002934 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002920:	2200      	movs	r2, #0
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	f04f 30ff 	mov.w	r0, #4294967295
 8002928:	f000 f937 	bl	8002b9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800292c:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <HAL_InitTick+0x74>)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	e007      	b.n	8002944 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
 8002938:	e004      	b.n	8002944 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
 800293e:	e001      	b.n	8002944 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000008 	.word	0x20000008
 8002954:	20000000 	.word	0x20000000
 8002958:	20000004 	.word	0x20000004

0800295c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_IncTick+0x20>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_IncTick+0x24>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4413      	add	r3, r2
 800296c:	4a04      	ldr	r2, [pc, #16]	; (8002980 <HAL_IncTick+0x24>)
 800296e:	6013      	str	r3, [r2, #0]
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20000008 	.word	0x20000008
 8002980:	200003e4 	.word	0x200003e4

08002984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return uwTick;
 8002988:	4b03      	ldr	r3, [pc, #12]	; (8002998 <HAL_GetTick+0x14>)
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	200003e4 	.word	0x200003e4

0800299c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029a4:	f7ff ffee 	bl	8002984 <HAL_GetTick>
 80029a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b4:	d005      	beq.n	80029c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80029b6:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <HAL_Delay+0x44>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4413      	add	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029c2:	bf00      	nop
 80029c4:	f7ff ffde 	bl	8002984 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d8f7      	bhi.n	80029c4 <HAL_Delay+0x28>
  {
  }
}
 80029d4:	bf00      	nop
 80029d6:	bf00      	nop
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000008 	.word	0x20000008

080029e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f4:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <__NVIC_SetPriorityGrouping+0x44>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a00:	4013      	ands	r3, r2
 8002a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a16:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <__NVIC_SetPriorityGrouping+0x44>)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	60d3      	str	r3, [r2, #12]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <__NVIC_GetPriorityGrouping+0x18>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	0a1b      	lsrs	r3, r3, #8
 8002a36:	f003 0307 	and.w	r3, r3, #7
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	db0b      	blt.n	8002a72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	f003 021f 	and.w	r2, r3, #31
 8002a60:	4907      	ldr	r1, [pc, #28]	; (8002a80 <__NVIC_EnableIRQ+0x38>)
 8002a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	2001      	movs	r0, #1
 8002a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000e100 	.word	0xe000e100

08002a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	6039      	str	r1, [r7, #0]
 8002a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	db0a      	blt.n	8002aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	490c      	ldr	r1, [pc, #48]	; (8002ad0 <__NVIC_SetPriority+0x4c>)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	0112      	lsls	r2, r2, #4
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aac:	e00a      	b.n	8002ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4908      	ldr	r1, [pc, #32]	; (8002ad4 <__NVIC_SetPriority+0x50>)
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	3b04      	subs	r3, #4
 8002abc:	0112      	lsls	r2, r2, #4
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	761a      	strb	r2, [r3, #24]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000e100 	.word	0xe000e100
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	; 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f1c3 0307 	rsb	r3, r3, #7
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	bf28      	it	cs
 8002af6:	2304      	movcs	r3, #4
 8002af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d902      	bls.n	8002b08 <NVIC_EncodePriority+0x30>
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3b03      	subs	r3, #3
 8002b06:	e000      	b.n	8002b0a <NVIC_EncodePriority+0x32>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43da      	mvns	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b20:	f04f 31ff 	mov.w	r1, #4294967295
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2a:	43d9      	mvns	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	4313      	orrs	r3, r2
         );
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3724      	adds	r7, #36	; 0x24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b50:	d301      	bcc.n	8002b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b52:	2301      	movs	r3, #1
 8002b54:	e00f      	b.n	8002b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b56:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <SysTick_Config+0x40>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b5e:	210f      	movs	r1, #15
 8002b60:	f04f 30ff 	mov.w	r0, #4294967295
 8002b64:	f7ff ff8e 	bl	8002a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <SysTick_Config+0x40>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b6e:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <SysTick_Config+0x40>)
 8002b70:	2207      	movs	r2, #7
 8002b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	e000e010 	.word	0xe000e010

08002b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff ff29 	bl	80029e4 <__NVIC_SetPriorityGrouping>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b086      	sub	sp, #24
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bac:	f7ff ff3e 	bl	8002a2c <__NVIC_GetPriorityGrouping>
 8002bb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	6978      	ldr	r0, [r7, #20]
 8002bb8:	f7ff ff8e 	bl	8002ad8 <NVIC_EncodePriority>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff5d 	bl	8002a84 <__NVIC_SetPriority>
}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	4603      	mov	r3, r0
 8002bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff31 	bl	8002a48 <__NVIC_EnableIRQ>
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff ffa2 	bl	8002b40 <SysTick_Config>
 8002bfc:	4603      	mov	r3, r0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c16:	e166      	b.n	8002ee6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	fa01 f303 	lsl.w	r3, r1, r3
 8002c24:	4013      	ands	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 8158 	beq.w	8002ee0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d005      	beq.n	8002c48 <HAL_GPIO_Init+0x40>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d130      	bne.n	8002caa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	2203      	movs	r2, #3
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c7e:	2201      	movs	r2, #1
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	091b      	lsrs	r3, r3, #4
 8002c94:	f003 0201 	and.w	r2, r3, #1
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d017      	beq.n	8002ce6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d123      	bne.n	8002d3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	08da      	lsrs	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3208      	adds	r2, #8
 8002cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	220f      	movs	r2, #15
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4013      	ands	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	08da      	lsrs	r2, r3, #3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3208      	adds	r2, #8
 8002d34:	6939      	ldr	r1, [r7, #16]
 8002d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	2203      	movs	r2, #3
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 0203 	and.w	r2, r3, #3
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 80b2 	beq.w	8002ee0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7c:	4b61      	ldr	r3, [pc, #388]	; (8002f04 <HAL_GPIO_Init+0x2fc>)
 8002d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d80:	4a60      	ldr	r2, [pc, #384]	; (8002f04 <HAL_GPIO_Init+0x2fc>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6613      	str	r3, [r2, #96]	; 0x60
 8002d88:	4b5e      	ldr	r3, [pc, #376]	; (8002f04 <HAL_GPIO_Init+0x2fc>)
 8002d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d94:	4a5c      	ldr	r2, [pc, #368]	; (8002f08 <HAL_GPIO_Init+0x300>)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	089b      	lsrs	r3, r3, #2
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	220f      	movs	r2, #15
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4013      	ands	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002dbe:	d02b      	beq.n	8002e18 <HAL_GPIO_Init+0x210>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a52      	ldr	r2, [pc, #328]	; (8002f0c <HAL_GPIO_Init+0x304>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d025      	beq.n	8002e14 <HAL_GPIO_Init+0x20c>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a51      	ldr	r2, [pc, #324]	; (8002f10 <HAL_GPIO_Init+0x308>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d01f      	beq.n	8002e10 <HAL_GPIO_Init+0x208>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a50      	ldr	r2, [pc, #320]	; (8002f14 <HAL_GPIO_Init+0x30c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d019      	beq.n	8002e0c <HAL_GPIO_Init+0x204>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a4f      	ldr	r2, [pc, #316]	; (8002f18 <HAL_GPIO_Init+0x310>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d013      	beq.n	8002e08 <HAL_GPIO_Init+0x200>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a4e      	ldr	r2, [pc, #312]	; (8002f1c <HAL_GPIO_Init+0x314>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d00d      	beq.n	8002e04 <HAL_GPIO_Init+0x1fc>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a4d      	ldr	r2, [pc, #308]	; (8002f20 <HAL_GPIO_Init+0x318>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d007      	beq.n	8002e00 <HAL_GPIO_Init+0x1f8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a4c      	ldr	r2, [pc, #304]	; (8002f24 <HAL_GPIO_Init+0x31c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d101      	bne.n	8002dfc <HAL_GPIO_Init+0x1f4>
 8002df8:	2307      	movs	r3, #7
 8002dfa:	e00e      	b.n	8002e1a <HAL_GPIO_Init+0x212>
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	e00c      	b.n	8002e1a <HAL_GPIO_Init+0x212>
 8002e00:	2306      	movs	r3, #6
 8002e02:	e00a      	b.n	8002e1a <HAL_GPIO_Init+0x212>
 8002e04:	2305      	movs	r3, #5
 8002e06:	e008      	b.n	8002e1a <HAL_GPIO_Init+0x212>
 8002e08:	2304      	movs	r3, #4
 8002e0a:	e006      	b.n	8002e1a <HAL_GPIO_Init+0x212>
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e004      	b.n	8002e1a <HAL_GPIO_Init+0x212>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e002      	b.n	8002e1a <HAL_GPIO_Init+0x212>
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <HAL_GPIO_Init+0x212>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	f002 0203 	and.w	r2, r2, #3
 8002e20:	0092      	lsls	r2, r2, #2
 8002e22:	4093      	lsls	r3, r2
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e2a:	4937      	ldr	r1, [pc, #220]	; (8002f08 <HAL_GPIO_Init+0x300>)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	089b      	lsrs	r3, r3, #2
 8002e30:	3302      	adds	r3, #2
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e38:	4b3b      	ldr	r3, [pc, #236]	; (8002f28 <HAL_GPIO_Init+0x320>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e5c:	4a32      	ldr	r2, [pc, #200]	; (8002f28 <HAL_GPIO_Init+0x320>)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e62:	4b31      	ldr	r3, [pc, #196]	; (8002f28 <HAL_GPIO_Init+0x320>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e86:	4a28      	ldr	r2, [pc, #160]	; (8002f28 <HAL_GPIO_Init+0x320>)
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e8c:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <HAL_GPIO_Init+0x320>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <HAL_GPIO_Init+0x320>)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002eb6:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <HAL_GPIO_Init+0x320>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002eda:	4a13      	ldr	r2, [pc, #76]	; (8002f28 <HAL_GPIO_Init+0x320>)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f47f ae91 	bne.w	8002c18 <HAL_GPIO_Init+0x10>
  }
}
 8002ef6:	bf00      	nop
 8002ef8:	bf00      	nop
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40010000 	.word	0x40010000
 8002f0c:	48000400 	.word	0x48000400
 8002f10:	48000800 	.word	0x48000800
 8002f14:	48000c00 	.word	0x48000c00
 8002f18:	48001000 	.word	0x48001000
 8002f1c:	48001400 	.word	0x48001400
 8002f20:	48001800 	.word	0x48001800
 8002f24:	48001c00 	.word	0x48001c00
 8002f28:	40010400 	.word	0x40010400

08002f2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	887b      	ldrh	r3, [r7, #2]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
 8002f48:	e001      	b.n	8002f4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	807b      	strh	r3, [r7, #2]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f6c:	787b      	ldrb	r3, [r7, #1]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f72:	887a      	ldrh	r2, [r7, #2]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f78:	e002      	b.n	8002f80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f7a:	887a      	ldrh	r2, [r7, #2]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f98:	695a      	ldr	r2, [r3, #20]
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d006      	beq.n	8002fb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fa2:	4a05      	ldr	r2, [pc, #20]	; (8002fb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe fb82 	bl	80016b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40010400 	.word	0x40010400

08002fbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fc0:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fcc:	d102      	bne.n	8002fd4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fd2:	e00b      	b.n	8002fec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002fd4:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe2:	d102      	bne.n	8002fea <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fe8:	e000      	b.n	8002fec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002fea:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40007000 	.word	0x40007000

08002ffc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d141      	bne.n	800308e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800300a:	4b4b      	ldr	r3, [pc, #300]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003016:	d131      	bne.n	800307c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003018:	4b47      	ldr	r3, [pc, #284]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800301a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800301e:	4a46      	ldr	r2, [pc, #280]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003024:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003028:	4b43      	ldr	r3, [pc, #268]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003030:	4a41      	ldr	r2, [pc, #260]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003036:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003038:	4b40      	ldr	r3, [pc, #256]	; (800313c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2232      	movs	r2, #50	; 0x32
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	4a3f      	ldr	r2, [pc, #252]	; (8003140 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003044:	fba2 2303 	umull	r2, r3, r2, r3
 8003048:	0c9b      	lsrs	r3, r3, #18
 800304a:	3301      	adds	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800304e:	e002      	b.n	8003056 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3b01      	subs	r3, #1
 8003054:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003056:	4b38      	ldr	r3, [pc, #224]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003062:	d102      	bne.n	800306a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f2      	bne.n	8003050 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800306a:	4b33      	ldr	r3, [pc, #204]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003076:	d158      	bne.n	800312a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e057      	b.n	800312c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800307c:	4b2e      	ldr	r3, [pc, #184]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003082:	4a2d      	ldr	r2, [pc, #180]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003088:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800308c:	e04d      	b.n	800312a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003094:	d141      	bne.n	800311a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003096:	4b28      	ldr	r3, [pc, #160]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800309e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a2:	d131      	bne.n	8003108 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030a4:	4b24      	ldr	r3, [pc, #144]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030aa:	4a23      	ldr	r2, [pc, #140]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030b4:	4b20      	ldr	r3, [pc, #128]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030bc:	4a1e      	ldr	r2, [pc, #120]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80030c4:	4b1d      	ldr	r3, [pc, #116]	; (800313c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2232      	movs	r2, #50	; 0x32
 80030ca:	fb02 f303 	mul.w	r3, r2, r3
 80030ce:	4a1c      	ldr	r2, [pc, #112]	; (8003140 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030d0:	fba2 2303 	umull	r2, r3, r2, r3
 80030d4:	0c9b      	lsrs	r3, r3, #18
 80030d6:	3301      	adds	r3, #1
 80030d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030da:	e002      	b.n	80030e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	3b01      	subs	r3, #1
 80030e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ee:	d102      	bne.n	80030f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f2      	bne.n	80030dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003102:	d112      	bne.n	800312a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e011      	b.n	800312c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800310a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800310e:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003114:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003118:	e007      	b.n	800312a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800311a:	4b07      	ldr	r3, [pc, #28]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003122:	4a05      	ldr	r2, [pc, #20]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003124:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003128:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	40007000 	.word	0x40007000
 800313c:	20000000 	.word	0x20000000
 8003140:	431bde83 	.word	0x431bde83

08003144 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_PWREx_EnableVddIO2+0x1c>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	4a04      	ldr	r2, [pc, #16]	; (8003160 <HAL_PWREx_EnableVddIO2+0x1c>)
 800314e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003152:	6053      	str	r3, [r2, #4]
}
 8003154:	bf00      	nop
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40007000 	.word	0x40007000

08003164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d102      	bne.n	8003178 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	f000 bc08 	b.w	8003988 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003178:	4b96      	ldr	r3, [pc, #600]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 030c 	and.w	r3, r3, #12
 8003180:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003182:	4b94      	ldr	r3, [pc, #592]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0310 	and.w	r3, r3, #16
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80e4 	beq.w	8003362 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d007      	beq.n	80031b0 <HAL_RCC_OscConfig+0x4c>
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b0c      	cmp	r3, #12
 80031a4:	f040 808b 	bne.w	80032be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	f040 8087 	bne.w	80032be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031b0:	4b88      	ldr	r3, [pc, #544]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_RCC_OscConfig+0x64>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e3df      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1a      	ldr	r2, [r3, #32]
 80031cc:	4b81      	ldr	r3, [pc, #516]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d004      	beq.n	80031e2 <HAL_RCC_OscConfig+0x7e>
 80031d8:	4b7e      	ldr	r3, [pc, #504]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e0:	e005      	b.n	80031ee <HAL_RCC_OscConfig+0x8a>
 80031e2:	4b7c      	ldr	r3, [pc, #496]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 80031e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d223      	bcs.n	800323a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fdcc 	bl	8003d94 <RCC_SetFlashLatencyFromMSIRange>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e3c0      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003206:	4b73      	ldr	r3, [pc, #460]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a72      	ldr	r2, [pc, #456]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 800320c:	f043 0308 	orr.w	r3, r3, #8
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b70      	ldr	r3, [pc, #448]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	496d      	ldr	r1, [pc, #436]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 8003220:	4313      	orrs	r3, r2
 8003222:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003224:	4b6b      	ldr	r3, [pc, #428]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	021b      	lsls	r3, r3, #8
 8003232:	4968      	ldr	r1, [pc, #416]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 8003234:	4313      	orrs	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
 8003238:	e025      	b.n	8003286 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800323a:	4b66      	ldr	r3, [pc, #408]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a65      	ldr	r2, [pc, #404]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 8003240:	f043 0308 	orr.w	r3, r3, #8
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b63      	ldr	r3, [pc, #396]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	4960      	ldr	r1, [pc, #384]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 8003254:	4313      	orrs	r3, r2
 8003256:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003258:	4b5e      	ldr	r3, [pc, #376]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	495b      	ldr	r1, [pc, #364]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 8003268:	4313      	orrs	r3, r2
 800326a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fd8c 	bl	8003d94 <RCC_SetFlashLatencyFromMSIRange>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e380      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003286:	f000 fcc1 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 800328a:	4602      	mov	r2, r0
 800328c:	4b51      	ldr	r3, [pc, #324]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	091b      	lsrs	r3, r3, #4
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	4950      	ldr	r1, [pc, #320]	; (80033d8 <HAL_RCC_OscConfig+0x274>)
 8003298:	5ccb      	ldrb	r3, [r1, r3]
 800329a:	f003 031f 	and.w	r3, r3, #31
 800329e:	fa22 f303 	lsr.w	r3, r2, r3
 80032a2:	4a4e      	ldr	r2, [pc, #312]	; (80033dc <HAL_RCC_OscConfig+0x278>)
 80032a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032a6:	4b4e      	ldr	r3, [pc, #312]	; (80033e0 <HAL_RCC_OscConfig+0x27c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff fb1a 	bl	80028e4 <HAL_InitTick>
 80032b0:	4603      	mov	r3, r0
 80032b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d052      	beq.n	8003360 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	e364      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d032      	beq.n	800332c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032c6:	4b43      	ldr	r3, [pc, #268]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a42      	ldr	r2, [pc, #264]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032d2:	f7ff fb57 	bl	8002984 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032da:	f7ff fb53 	bl	8002984 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e34d      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032ec:	4b39      	ldr	r3, [pc, #228]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032f8:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a35      	ldr	r2, [pc, #212]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 80032fe:	f043 0308 	orr.w	r3, r3, #8
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	4b33      	ldr	r3, [pc, #204]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	4930      	ldr	r1, [pc, #192]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003316:	4b2f      	ldr	r3, [pc, #188]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	021b      	lsls	r3, r3, #8
 8003324:	492b      	ldr	r1, [pc, #172]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]
 800332a:	e01a      	b.n	8003362 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800332c:	4b29      	ldr	r3, [pc, #164]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a28      	ldr	r2, [pc, #160]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 8003332:	f023 0301 	bic.w	r3, r3, #1
 8003336:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003338:	f7ff fb24 	bl	8002984 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003340:	f7ff fb20 	bl	8002984 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e31a      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003352:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x1dc>
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003360:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d073      	beq.n	8003456 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d005      	beq.n	8003380 <HAL_RCC_OscConfig+0x21c>
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b0c      	cmp	r3, #12
 8003378:	d10e      	bne.n	8003398 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b03      	cmp	r3, #3
 800337e:	d10b      	bne.n	8003398 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003380:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d063      	beq.n	8003454 <HAL_RCC_OscConfig+0x2f0>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d15f      	bne.n	8003454 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e2f7      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a0:	d106      	bne.n	80033b0 <HAL_RCC_OscConfig+0x24c>
 80033a2:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a0b      	ldr	r2, [pc, #44]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e025      	b.n	80033fc <HAL_RCC_OscConfig+0x298>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033b8:	d114      	bne.n	80033e4 <HAL_RCC_OscConfig+0x280>
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a05      	ldr	r2, [pc, #20]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 80033c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a02      	ldr	r2, [pc, #8]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	e013      	b.n	80033fc <HAL_RCC_OscConfig+0x298>
 80033d4:	40021000 	.word	0x40021000
 80033d8:	0800a588 	.word	0x0800a588
 80033dc:	20000000 	.word	0x20000000
 80033e0:	20000004 	.word	0x20000004
 80033e4:	4ba0      	ldr	r3, [pc, #640]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a9f      	ldr	r2, [pc, #636]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 80033ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	4b9d      	ldr	r3, [pc, #628]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a9c      	ldr	r2, [pc, #624]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 80033f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d013      	beq.n	800342c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7ff fabe 	bl	8002984 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800340c:	f7ff faba 	bl	8002984 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	; 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e2b4      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800341e:	4b92      	ldr	r3, [pc, #584]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x2a8>
 800342a:	e014      	b.n	8003456 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7ff faaa 	bl	8002984 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003434:	f7ff faa6 	bl	8002984 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e2a0      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003446:	4b88      	ldr	r3, [pc, #544]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x2d0>
 8003452:	e000      	b.n	8003456 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d060      	beq.n	8003524 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2b04      	cmp	r3, #4
 8003466:	d005      	beq.n	8003474 <HAL_RCC_OscConfig+0x310>
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	2b0c      	cmp	r3, #12
 800346c:	d119      	bne.n	80034a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d116      	bne.n	80034a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003474:	4b7c      	ldr	r3, [pc, #496]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_OscConfig+0x328>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e27d      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348c:	4b76      	ldr	r3, [pc, #472]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	061b      	lsls	r3, r3, #24
 800349a:	4973      	ldr	r1, [pc, #460]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034a0:	e040      	b.n	8003524 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d023      	beq.n	80034f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034aa:	4b6f      	ldr	r3, [pc, #444]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a6e      	ldr	r2, [pc, #440]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 80034b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b6:	f7ff fa65 	bl	8002984 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034be:	f7ff fa61 	bl	8002984 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e25b      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d0:	4b65      	ldr	r3, [pc, #404]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034dc:	4b62      	ldr	r3, [pc, #392]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	061b      	lsls	r3, r3, #24
 80034ea:	495f      	ldr	r1, [pc, #380]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]
 80034f0:	e018      	b.n	8003524 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f2:	4b5d      	ldr	r3, [pc, #372]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a5c      	ldr	r2, [pc, #368]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 80034f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fe:	f7ff fa41 	bl	8002984 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003506:	f7ff fa3d 	bl	8002984 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e237      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003518:	4b53      	ldr	r3, [pc, #332]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1f0      	bne.n	8003506 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d03c      	beq.n	80035aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d01c      	beq.n	8003572 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003538:	4b4b      	ldr	r3, [pc, #300]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 800353a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800353e:	4a4a      	ldr	r2, [pc, #296]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003548:	f7ff fa1c 	bl	8002984 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003550:	f7ff fa18 	bl	8002984 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e212      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003562:	4b41      	ldr	r3, [pc, #260]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 8003564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0ef      	beq.n	8003550 <HAL_RCC_OscConfig+0x3ec>
 8003570:	e01b      	b.n	80035aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003572:	4b3d      	ldr	r3, [pc, #244]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 8003574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003578:	4a3b      	ldr	r2, [pc, #236]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 800357a:	f023 0301 	bic.w	r3, r3, #1
 800357e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003582:	f7ff f9ff 	bl	8002984 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800358a:	f7ff f9fb 	bl	8002984 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e1f5      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800359c:	4b32      	ldr	r3, [pc, #200]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 800359e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1ef      	bne.n	800358a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 80a6 	beq.w	8003704 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b8:	2300      	movs	r3, #0
 80035ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035bc:	4b2a      	ldr	r3, [pc, #168]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 80035be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10d      	bne.n	80035e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c8:	4b27      	ldr	r3, [pc, #156]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 80035ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035cc:	4a26      	ldr	r2, [pc, #152]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 80035ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d2:	6593      	str	r3, [r2, #88]	; 0x58
 80035d4:	4b24      	ldr	r3, [pc, #144]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e0:	2301      	movs	r3, #1
 80035e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e4:	4b21      	ldr	r3, [pc, #132]	; (800366c <HAL_RCC_OscConfig+0x508>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d118      	bne.n	8003622 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035f0:	4b1e      	ldr	r3, [pc, #120]	; (800366c <HAL_RCC_OscConfig+0x508>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a1d      	ldr	r2, [pc, #116]	; (800366c <HAL_RCC_OscConfig+0x508>)
 80035f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035fc:	f7ff f9c2 	bl	8002984 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003604:	f7ff f9be 	bl	8002984 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e1b8      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003616:	4b15      	ldr	r3, [pc, #84]	; (800366c <HAL_RCC_OscConfig+0x508>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d108      	bne.n	800363c <HAL_RCC_OscConfig+0x4d8>
 800362a:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 800362c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003630:	4a0d      	ldr	r2, [pc, #52]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800363a:	e029      	b.n	8003690 <HAL_RCC_OscConfig+0x52c>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b05      	cmp	r3, #5
 8003642:	d115      	bne.n	8003670 <HAL_RCC_OscConfig+0x50c>
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364a:	4a07      	ldr	r2, [pc, #28]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 800364c:	f043 0304 	orr.w	r3, r3, #4
 8003650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003654:	4b04      	ldr	r3, [pc, #16]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365a:	4a03      	ldr	r2, [pc, #12]	; (8003668 <HAL_RCC_OscConfig+0x504>)
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003664:	e014      	b.n	8003690 <HAL_RCC_OscConfig+0x52c>
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	40007000 	.word	0x40007000
 8003670:	4b9d      	ldr	r3, [pc, #628]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003676:	4a9c      	ldr	r2, [pc, #624]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003680:	4b99      	ldr	r3, [pc, #612]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003686:	4a98      	ldr	r2, [pc, #608]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 8003688:	f023 0304 	bic.w	r3, r3, #4
 800368c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d016      	beq.n	80036c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003698:	f7ff f974 	bl	8002984 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800369e:	e00a      	b.n	80036b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a0:	f7ff f970 	bl	8002984 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e168      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b6:	4b8c      	ldr	r3, [pc, #560]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0ed      	beq.n	80036a0 <HAL_RCC_OscConfig+0x53c>
 80036c4:	e015      	b.n	80036f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c6:	f7ff f95d 	bl	8002984 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036cc:	e00a      	b.n	80036e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ce:	f7ff f959 	bl	8002984 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036dc:	4293      	cmp	r3, r2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e151      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036e4:	4b80      	ldr	r3, [pc, #512]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1ed      	bne.n	80036ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036f2:	7ffb      	ldrb	r3, [r7, #31]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d105      	bne.n	8003704 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f8:	4b7b      	ldr	r3, [pc, #492]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 80036fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fc:	4a7a      	ldr	r2, [pc, #488]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 80036fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003702:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b00      	cmp	r3, #0
 800370e:	d03c      	beq.n	800378a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	2b00      	cmp	r3, #0
 8003716:	d01c      	beq.n	8003752 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003718:	4b73      	ldr	r3, [pc, #460]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 800371a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800371e:	4a72      	ldr	r2, [pc, #456]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003728:	f7ff f92c 	bl	8002984 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003730:	f7ff f928 	bl	8002984 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e122      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003742:	4b69      	ldr	r3, [pc, #420]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 8003744:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0ef      	beq.n	8003730 <HAL_RCC_OscConfig+0x5cc>
 8003750:	e01b      	b.n	800378a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003752:	4b65      	ldr	r3, [pc, #404]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 8003754:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003758:	4a63      	ldr	r2, [pc, #396]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003762:	f7ff f90f 	bl	8002984 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800376a:	f7ff f90b 	bl	8002984 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e105      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800377c:	4b5a      	ldr	r3, [pc, #360]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 800377e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1ef      	bne.n	800376a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 80f9 	beq.w	8003986 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003798:	2b02      	cmp	r3, #2
 800379a:	f040 80cf 	bne.w	800393c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800379e:	4b52      	ldr	r3, [pc, #328]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f003 0203 	and.w	r2, r3, #3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d12c      	bne.n	800380c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	3b01      	subs	r3, #1
 80037be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d123      	bne.n	800380c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d11b      	bne.n	800380c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d113      	bne.n	800380c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ee:	085b      	lsrs	r3, r3, #1
 80037f0:	3b01      	subs	r3, #1
 80037f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d109      	bne.n	800380c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	085b      	lsrs	r3, r3, #1
 8003804:	3b01      	subs	r3, #1
 8003806:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003808:	429a      	cmp	r2, r3
 800380a:	d071      	beq.n	80038f0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	2b0c      	cmp	r3, #12
 8003810:	d068      	beq.n	80038e4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003812:	4b35      	ldr	r3, [pc, #212]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d105      	bne.n	800382a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800381e:	4b32      	ldr	r3, [pc, #200]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e0ac      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800382e:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a2d      	ldr	r2, [pc, #180]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 8003834:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003838:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800383a:	f7ff f8a3 	bl	8002984 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003842:	f7ff f89f 	bl	8002984 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e099      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003854:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f0      	bne.n	8003842 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003860:	4b21      	ldr	r3, [pc, #132]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	4b21      	ldr	r3, [pc, #132]	; (80038ec <HAL_RCC_OscConfig+0x788>)
 8003866:	4013      	ands	r3, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003870:	3a01      	subs	r2, #1
 8003872:	0112      	lsls	r2, r2, #4
 8003874:	4311      	orrs	r1, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800387a:	0212      	lsls	r2, r2, #8
 800387c:	4311      	orrs	r1, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003882:	0852      	lsrs	r2, r2, #1
 8003884:	3a01      	subs	r2, #1
 8003886:	0552      	lsls	r2, r2, #21
 8003888:	4311      	orrs	r1, r2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800388e:	0852      	lsrs	r2, r2, #1
 8003890:	3a01      	subs	r2, #1
 8003892:	0652      	lsls	r2, r2, #25
 8003894:	4311      	orrs	r1, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800389a:	06d2      	lsls	r2, r2, #27
 800389c:	430a      	orrs	r2, r1
 800389e:	4912      	ldr	r1, [pc, #72]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038a4:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a0f      	ldr	r2, [pc, #60]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 80038aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038b0:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 80038b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038bc:	f7ff f862 	bl	8002984 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c4:	f7ff f85e 	bl	8002984 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e058      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d6:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <HAL_RCC_OscConfig+0x784>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f0      	beq.n	80038c4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038e2:	e050      	b.n	8003986 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e04f      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
 80038e8:	40021000 	.word	0x40021000
 80038ec:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038f0:	4b27      	ldr	r3, [pc, #156]	; (8003990 <HAL_RCC_OscConfig+0x82c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d144      	bne.n	8003986 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038fc:	4b24      	ldr	r3, [pc, #144]	; (8003990 <HAL_RCC_OscConfig+0x82c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a23      	ldr	r2, [pc, #140]	; (8003990 <HAL_RCC_OscConfig+0x82c>)
 8003902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003906:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003908:	4b21      	ldr	r3, [pc, #132]	; (8003990 <HAL_RCC_OscConfig+0x82c>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4a20      	ldr	r2, [pc, #128]	; (8003990 <HAL_RCC_OscConfig+0x82c>)
 800390e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003912:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003914:	f7ff f836 	bl	8002984 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391c:	f7ff f832 	bl	8002984 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e02c      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392e:	4b18      	ldr	r3, [pc, #96]	; (8003990 <HAL_RCC_OscConfig+0x82c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x7b8>
 800393a:	e024      	b.n	8003986 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b0c      	cmp	r3, #12
 8003940:	d01f      	beq.n	8003982 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003942:	4b13      	ldr	r3, [pc, #76]	; (8003990 <HAL_RCC_OscConfig+0x82c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a12      	ldr	r2, [pc, #72]	; (8003990 <HAL_RCC_OscConfig+0x82c>)
 8003948:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800394c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394e:	f7ff f819 	bl	8002984 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003956:	f7ff f815 	bl	8002984 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e00f      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HAL_RCC_OscConfig+0x82c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f0      	bne.n	8003956 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <HAL_RCC_OscConfig+0x82c>)
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	4905      	ldr	r1, [pc, #20]	; (8003990 <HAL_RCC_OscConfig+0x82c>)
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_RCC_OscConfig+0x830>)
 800397c:	4013      	ands	r3, r2
 800397e:	60cb      	str	r3, [r1, #12]
 8003980:	e001      	b.n	8003986 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3720      	adds	r7, #32
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40021000 	.word	0x40021000
 8003994:	feeefffc 	.word	0xfeeefffc

08003998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e11d      	b.n	8003bec <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039b0:	4b90      	ldr	r3, [pc, #576]	; (8003bf4 <HAL_RCC_ClockConfig+0x25c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d910      	bls.n	80039e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039be:	4b8d      	ldr	r3, [pc, #564]	; (8003bf4 <HAL_RCC_ClockConfig+0x25c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f023 020f 	bic.w	r2, r3, #15
 80039c6:	498b      	ldr	r1, [pc, #556]	; (8003bf4 <HAL_RCC_ClockConfig+0x25c>)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ce:	4b89      	ldr	r3, [pc, #548]	; (8003bf4 <HAL_RCC_ClockConfig+0x25c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e105      	b.n	8003bec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d010      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	4b81      	ldr	r3, [pc, #516]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d908      	bls.n	8003a0e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039fc:	4b7e      	ldr	r3, [pc, #504]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	497b      	ldr	r1, [pc, #492]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d079      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d11e      	bne.n	8003a60 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a22:	4b75      	ldr	r3, [pc, #468]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e0dc      	b.n	8003bec <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003a32:	f000 fa09 	bl	8003e48 <RCC_GetSysClockFreqFromPLLSource>
 8003a36:	4603      	mov	r3, r0
 8003a38:	4a70      	ldr	r2, [pc, #448]	; (8003bfc <HAL_RCC_ClockConfig+0x264>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d946      	bls.n	8003acc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a3e:	4b6e      	ldr	r3, [pc, #440]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d140      	bne.n	8003acc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a4a:	4b6b      	ldr	r3, [pc, #428]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a52:	4a69      	ldr	r2, [pc, #420]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a5a:	2380      	movs	r3, #128	; 0x80
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	e035      	b.n	8003acc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d107      	bne.n	8003a78 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a68:	4b63      	ldr	r3, [pc, #396]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d115      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0b9      	b.n	8003bec <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d107      	bne.n	8003a90 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a80:	4b5d      	ldr	r3, [pc, #372]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d109      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0ad      	b.n	8003bec <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a90:	4b59      	ldr	r3, [pc, #356]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0a5      	b.n	8003bec <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003aa0:	f000 f8b4 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	4a55      	ldr	r2, [pc, #340]	; (8003bfc <HAL_RCC_ClockConfig+0x264>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d90f      	bls.n	8003acc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003aac:	4b52      	ldr	r3, [pc, #328]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d109      	bne.n	8003acc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ab8:	4b4f      	ldr	r3, [pc, #316]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ac0:	4a4d      	ldr	r2, [pc, #308]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003acc:	4b4a      	ldr	r3, [pc, #296]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f023 0203 	bic.w	r2, r3, #3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	4947      	ldr	r1, [pc, #284]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ade:	f7fe ff51 	bl	8002984 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae4:	e00a      	b.n	8003afc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae6:	f7fe ff4d 	bl	8002984 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e077      	b.n	8003bec <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afc:	4b3e      	ldr	r3, [pc, #248]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 020c 	and.w	r2, r3, #12
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d1eb      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b80      	cmp	r3, #128	; 0x80
 8003b12:	d105      	bne.n	8003b20 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b14:	4b38      	ldr	r3, [pc, #224]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4a37      	ldr	r2, [pc, #220]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b1e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d010      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	4b31      	ldr	r3, [pc, #196]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d208      	bcs.n	8003b4e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b3c:	4b2e      	ldr	r3, [pc, #184]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	492b      	ldr	r1, [pc, #172]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b4e:	4b29      	ldr	r3, [pc, #164]	; (8003bf4 <HAL_RCC_ClockConfig+0x25c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d210      	bcs.n	8003b7e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5c:	4b25      	ldr	r3, [pc, #148]	; (8003bf4 <HAL_RCC_ClockConfig+0x25c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f023 020f 	bic.w	r2, r3, #15
 8003b64:	4923      	ldr	r1, [pc, #140]	; (8003bf4 <HAL_RCC_ClockConfig+0x25c>)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6c:	4b21      	ldr	r3, [pc, #132]	; (8003bf4 <HAL_RCC_ClockConfig+0x25c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d001      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e036      	b.n	8003bec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d008      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b8a:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	4918      	ldr	r1, [pc, #96]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d009      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ba8:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4910      	ldr	r1, [pc, #64]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bbc:	f000 f826 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	4b0d      	ldr	r3, [pc, #52]	; (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	091b      	lsrs	r3, r3, #4
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	490c      	ldr	r1, [pc, #48]	; (8003c00 <HAL_RCC_ClockConfig+0x268>)
 8003bce:	5ccb      	ldrb	r3, [r1, r3]
 8003bd0:	f003 031f 	and.w	r3, r3, #31
 8003bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd8:	4a0a      	ldr	r2, [pc, #40]	; (8003c04 <HAL_RCC_ClockConfig+0x26c>)
 8003bda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <HAL_RCC_ClockConfig+0x270>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fe fe7f 	bl	80028e4 <HAL_InitTick>
 8003be6:	4603      	mov	r3, r0
 8003be8:	73fb      	strb	r3, [r7, #15]

  return status;
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40022000 	.word	0x40022000
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	04c4b400 	.word	0x04c4b400
 8003c00:	0800a588 	.word	0x0800a588
 8003c04:	20000000 	.word	0x20000000
 8003c08:	20000004 	.word	0x20000004

08003c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b089      	sub	sp, #36	; 0x24
 8003c10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	2300      	movs	r3, #0
 8003c18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c1a:	4b3e      	ldr	r3, [pc, #248]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c24:	4b3b      	ldr	r3, [pc, #236]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_GetSysClockFreq+0x34>
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	2b0c      	cmp	r3, #12
 8003c38:	d121      	bne.n	8003c7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d11e      	bne.n	8003c7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c40:	4b34      	ldr	r3, [pc, #208]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d107      	bne.n	8003c5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c4c:	4b31      	ldr	r3, [pc, #196]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c52:	0a1b      	lsrs	r3, r3, #8
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	61fb      	str	r3, [r7, #28]
 8003c5a:	e005      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c5c:	4b2d      	ldr	r3, [pc, #180]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c68:	4a2b      	ldr	r2, [pc, #172]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10d      	bne.n	8003c94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d102      	bne.n	8003c8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c84:	4b25      	ldr	r3, [pc, #148]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x110>)
 8003c86:	61bb      	str	r3, [r7, #24]
 8003c88:	e004      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c90:	4b23      	ldr	r3, [pc, #140]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	2b0c      	cmp	r3, #12
 8003c98:	d134      	bne.n	8003d04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c9a:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d003      	beq.n	8003cb2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	d003      	beq.n	8003cb8 <HAL_RCC_GetSysClockFreq+0xac>
 8003cb0:	e005      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003cb2:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x110>)
 8003cb4:	617b      	str	r3, [r7, #20]
      break;
 8003cb6:	e005      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003cb8:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cba:	617b      	str	r3, [r7, #20]
      break;
 8003cbc:	e002      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	617b      	str	r3, [r7, #20]
      break;
 8003cc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cc4:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	091b      	lsrs	r3, r3, #4
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	3301      	adds	r3, #1
 8003cd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cd2:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	0a1b      	lsrs	r3, r3, #8
 8003cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	fb03 f202 	mul.w	r2, r3, r2
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cea:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	0e5b      	lsrs	r3, r3, #25
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d04:	69bb      	ldr	r3, [r7, #24]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3724      	adds	r7, #36	; 0x24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000
 8003d18:	0800a5a0 	.word	0x0800a5a0
 8003d1c:	00f42400 	.word	0x00f42400
 8003d20:	007a1200 	.word	0x007a1200

08003d24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d28:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20000000 	.word	0x20000000

08003d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d40:	f7ff fff0 	bl	8003d24 <HAL_RCC_GetHCLKFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	0a1b      	lsrs	r3, r3, #8
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	4904      	ldr	r1, [pc, #16]	; (8003d64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40021000 	.word	0x40021000
 8003d64:	0800a598 	.word	0x0800a598

08003d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d6c:	f7ff ffda 	bl	8003d24 <HAL_RCC_GetHCLKFreq>
 8003d70:	4602      	mov	r2, r0
 8003d72:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	0adb      	lsrs	r3, r3, #11
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	4904      	ldr	r1, [pc, #16]	; (8003d90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d7e:	5ccb      	ldrb	r3, [r1, r3]
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	0800a598 	.word	0x0800a598

08003d94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003da0:	4b27      	ldr	r3, [pc, #156]	; (8003e40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003dac:	f7ff f906 	bl	8002fbc <HAL_PWREx_GetVoltageRange>
 8003db0:	6178      	str	r0, [r7, #20]
 8003db2:	e014      	b.n	8003dde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003db4:	4b22      	ldr	r3, [pc, #136]	; (8003e40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db8:	4a21      	ldr	r2, [pc, #132]	; (8003e40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8003dc0:	4b1f      	ldr	r3, [pc, #124]	; (8003e40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003dcc:	f7ff f8f6 	bl	8002fbc <HAL_PWREx_GetVoltageRange>
 8003dd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003dd2:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd6:	4a1a      	ldr	r2, [pc, #104]	; (8003e40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de4:	d10b      	bne.n	8003dfe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b80      	cmp	r3, #128	; 0x80
 8003dea:	d913      	bls.n	8003e14 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2ba0      	cmp	r3, #160	; 0xa0
 8003df0:	d902      	bls.n	8003df8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003df2:	2302      	movs	r3, #2
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	e00d      	b.n	8003e14 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003df8:	2301      	movs	r3, #1
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	e00a      	b.n	8003e14 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b7f      	cmp	r3, #127	; 0x7f
 8003e02:	d902      	bls.n	8003e0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003e04:	2302      	movs	r3, #2
 8003e06:	613b      	str	r3, [r7, #16]
 8003e08:	e004      	b.n	8003e14 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b70      	cmp	r3, #112	; 0x70
 8003e0e:	d101      	bne.n	8003e14 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e10:	2301      	movs	r3, #1
 8003e12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f023 020f 	bic.w	r2, r3, #15
 8003e1c:	4909      	ldr	r1, [pc, #36]	; (8003e44 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e24:	4b07      	ldr	r3, [pc, #28]	; (8003e44 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d001      	beq.n	8003e36 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40021000 	.word	0x40021000
 8003e44:	40022000 	.word	0x40022000

08003e48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e4e:	4b2d      	ldr	r3, [pc, #180]	; (8003f04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b03      	cmp	r3, #3
 8003e5c:	d00b      	beq.n	8003e76 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d825      	bhi.n	8003eb0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d008      	beq.n	8003e7c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d11f      	bne.n	8003eb0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003e70:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e72:	613b      	str	r3, [r7, #16]
    break;
 8003e74:	e01f      	b.n	8003eb6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003e76:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003e78:	613b      	str	r3, [r7, #16]
    break;
 8003e7a:	e01c      	b.n	8003eb6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e7c:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d107      	bne.n	8003e98 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e88:	4b1e      	ldr	r3, [pc, #120]	; (8003f04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8e:	0a1b      	lsrs	r3, r3, #8
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	e005      	b.n	8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e98:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003ea4:	4a1a      	ldr	r2, [pc, #104]	; (8003f10 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eac:	613b      	str	r3, [r7, #16]
    break;
 8003eae:	e002      	b.n	8003eb6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	613b      	str	r3, [r7, #16]
    break;
 8003eb4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003eb6:	4b13      	ldr	r3, [pc, #76]	; (8003f04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	091b      	lsrs	r3, r3, #4
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ec4:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	0a1b      	lsrs	r3, r3, #8
 8003eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	fb03 f202 	mul.w	r2, r3, r2
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eda:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003edc:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	0e5b      	lsrs	r3, r3, #25
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003ef6:	683b      	ldr	r3, [r7, #0]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	40021000 	.word	0x40021000
 8003f08:	00f42400 	.word	0x00f42400
 8003f0c:	007a1200 	.word	0x007a1200
 8003f10:	0800a5a0 	.word	0x0800a5a0

08003f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f20:	2300      	movs	r3, #0
 8003f22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d040      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f34:	2b80      	cmp	r3, #128	; 0x80
 8003f36:	d02a      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f38:	2b80      	cmp	r3, #128	; 0x80
 8003f3a:	d825      	bhi.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f3c:	2b60      	cmp	r3, #96	; 0x60
 8003f3e:	d026      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f40:	2b60      	cmp	r3, #96	; 0x60
 8003f42:	d821      	bhi.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f44:	2b40      	cmp	r3, #64	; 0x40
 8003f46:	d006      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003f48:	2b40      	cmp	r3, #64	; 0x40
 8003f4a:	d81d      	bhi.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d009      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d010      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003f54:	e018      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f56:	4b89      	ldr	r3, [pc, #548]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	4a88      	ldr	r2, [pc, #544]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f60:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f62:	e015      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3304      	adds	r3, #4
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fb02 	bl	8004574 <RCCEx_PLLSAI1_Config>
 8003f70:	4603      	mov	r3, r0
 8003f72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f74:	e00c      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3320      	adds	r3, #32
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 fbed 	bl	800475c <RCCEx_PLLSAI2_Config>
 8003f82:	4603      	mov	r3, r0
 8003f84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f86:	e003      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	74fb      	strb	r3, [r7, #19]
      break;
 8003f8c:	e000      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f90:	7cfb      	ldrb	r3, [r7, #19]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10b      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f96:	4b79      	ldr	r3, [pc, #484]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f9c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa4:	4975      	ldr	r1, [pc, #468]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003fac:	e001      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fae:	7cfb      	ldrb	r3, [r7, #19]
 8003fb0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d047      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc6:	d030      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fcc:	d82a      	bhi.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fd2:	d02a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003fd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fd8:	d824      	bhi.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fde:	d008      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fe4:	d81e      	bhi.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fee:	d010      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003ff0:	e018      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ff2:	4b62      	ldr	r3, [pc, #392]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	4a61      	ldr	r2, [pc, #388]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ffe:	e015      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	2100      	movs	r1, #0
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fab4 	bl	8004574 <RCCEx_PLLSAI1_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004010:	e00c      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3320      	adds	r3, #32
 8004016:	2100      	movs	r1, #0
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fb9f 	bl	800475c <RCCEx_PLLSAI2_Config>
 800401e:	4603      	mov	r3, r0
 8004020:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004022:	e003      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	74fb      	strb	r3, [r7, #19]
      break;
 8004028:	e000      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800402a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800402c:	7cfb      	ldrb	r3, [r7, #19]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10b      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004032:	4b52      	ldr	r3, [pc, #328]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004034:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	494e      	ldr	r1, [pc, #312]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004048:	e001      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404a:	7cfb      	ldrb	r3, [r7, #19]
 800404c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 809f 	beq.w	800419a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800405c:	2300      	movs	r3, #0
 800405e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004060:	4b46      	ldr	r3, [pc, #280]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004070:	2300      	movs	r3, #0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00d      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004076:	4b41      	ldr	r3, [pc, #260]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407a:	4a40      	ldr	r2, [pc, #256]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800407c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004080:	6593      	str	r3, [r2, #88]	; 0x58
 8004082:	4b3e      	ldr	r3, [pc, #248]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408a:	60bb      	str	r3, [r7, #8]
 800408c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800408e:	2301      	movs	r3, #1
 8004090:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004092:	4b3b      	ldr	r3, [pc, #236]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a3a      	ldr	r2, [pc, #232]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800409e:	f7fe fc71 	bl	8002984 <HAL_GetTick>
 80040a2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040a4:	e009      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a6:	f7fe fc6d 	bl	8002984 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d902      	bls.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	74fb      	strb	r3, [r7, #19]
        break;
 80040b8:	e005      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040ba:	4b31      	ldr	r3, [pc, #196]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0ef      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80040c6:	7cfb      	ldrb	r3, [r7, #19]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d15b      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040cc:	4b2b      	ldr	r3, [pc, #172]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d01f      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d019      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040ea:	4b24      	ldr	r3, [pc, #144]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040f6:	4b21      	ldr	r3, [pc, #132]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fc:	4a1f      	ldr	r2, [pc, #124]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004106:	4b1d      	ldr	r3, [pc, #116]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410c:	4a1b      	ldr	r2, [pc, #108]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800410e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004116:	4a19      	ldr	r2, [pc, #100]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d016      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fe fc2c 	bl	8002984 <HAL_GetTick>
 800412c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800412e:	e00b      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004130:	f7fe fc28 	bl	8002984 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f241 3288 	movw	r2, #5000	; 0x1388
 800413e:	4293      	cmp	r3, r2
 8004140:	d902      	bls.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	74fb      	strb	r3, [r7, #19]
            break;
 8004146:	e006      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004148:	4b0c      	ldr	r3, [pc, #48]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0ec      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004156:	7cfb      	ldrb	r3, [r7, #19]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10c      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800415c:	4b07      	ldr	r3, [pc, #28]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004162:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416c:	4903      	ldr	r1, [pc, #12]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004174:	e008      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004176:	7cfb      	ldrb	r3, [r7, #19]
 8004178:	74bb      	strb	r3, [r7, #18]
 800417a:	e005      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800417c:	40021000 	.word	0x40021000
 8004180:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004184:	7cfb      	ldrb	r3, [r7, #19]
 8004186:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004188:	7c7b      	ldrb	r3, [r7, #17]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d105      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800418e:	4ba0      	ldr	r3, [pc, #640]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004192:	4a9f      	ldr	r2, [pc, #636]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004198:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041a6:	4b9a      	ldr	r3, [pc, #616]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ac:	f023 0203 	bic.w	r2, r3, #3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b4:	4996      	ldr	r1, [pc, #600]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041c8:	4b91      	ldr	r3, [pc, #580]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ce:	f023 020c 	bic.w	r2, r3, #12
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	498e      	ldr	r1, [pc, #568]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041ea:	4b89      	ldr	r3, [pc, #548]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f8:	4985      	ldr	r1, [pc, #532]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800420c:	4b80      	ldr	r3, [pc, #512]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421a:	497d      	ldr	r1, [pc, #500]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800422e:	4b78      	ldr	r3, [pc, #480]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004234:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423c:	4974      	ldr	r1, [pc, #464]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004250:	4b6f      	ldr	r3, [pc, #444]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425e:	496c      	ldr	r1, [pc, #432]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004272:	4b67      	ldr	r3, [pc, #412]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004278:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004280:	4963      	ldr	r1, [pc, #396]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004294:	4b5e      	ldr	r3, [pc, #376]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042a2:	495b      	ldr	r1, [pc, #364]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042b6:	4b56      	ldr	r3, [pc, #344]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c4:	4952      	ldr	r1, [pc, #328]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042d8:	4b4d      	ldr	r3, [pc, #308]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e6:	494a      	ldr	r1, [pc, #296]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042fa:	4b45      	ldr	r3, [pc, #276]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004300:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004308:	4941      	ldr	r1, [pc, #260]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800431c:	4b3c      	ldr	r3, [pc, #240]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800431e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004322:	f023 0203 	bic.w	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800432a:	4939      	ldr	r1, [pc, #228]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d028      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800433e:	4b34      	ldr	r3, [pc, #208]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800434c:	4930      	ldr	r1, [pc, #192]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004358:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800435c:	d106      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800435e:	4b2c      	ldr	r3, [pc, #176]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	4a2b      	ldr	r2, [pc, #172]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004368:	60d3      	str	r3, [r2, #12]
 800436a:	e011      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004370:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004374:	d10c      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3304      	adds	r3, #4
 800437a:	2101      	movs	r1, #1
 800437c:	4618      	mov	r0, r3
 800437e:	f000 f8f9 	bl	8004574 <RCCEx_PLLSAI1_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004386:	7cfb      	ldrb	r3, [r7, #19]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d04d      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043a4:	d108      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80043a6:	4b1a      	ldr	r3, [pc, #104]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043ac:	4a18      	ldr	r2, [pc, #96]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043b2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80043b6:	e012      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80043b8:	4b15      	ldr	r3, [pc, #84]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043be:	4a14      	ldr	r2, [pc, #80]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043c4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80043c8:	4b11      	ldr	r3, [pc, #68]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043d6:	490e      	ldr	r1, [pc, #56]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043e6:	d106      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043e8:	4b09      	ldr	r3, [pc, #36]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	4a08      	ldr	r2, [pc, #32]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043f2:	60d3      	str	r3, [r2, #12]
 80043f4:	e020      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043fe:	d109      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004400:	4b03      	ldr	r3, [pc, #12]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4a02      	ldr	r2, [pc, #8]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800440a:	60d3      	str	r3, [r2, #12]
 800440c:	e014      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800440e:	bf00      	nop
 8004410:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004418:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800441c:	d10c      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3304      	adds	r3, #4
 8004422:	2101      	movs	r1, #1
 8004424:	4618      	mov	r0, r3
 8004426:	f000 f8a5 	bl	8004574 <RCCEx_PLLSAI1_Config>
 800442a:	4603      	mov	r3, r0
 800442c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800442e:	7cfb      	ldrb	r3, [r7, #19]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004434:	7cfb      	ldrb	r3, [r7, #19]
 8004436:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d028      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004444:	4b4a      	ldr	r3, [pc, #296]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004452:	4947      	ldr	r1, [pc, #284]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800445e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004462:	d106      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004464:	4b42      	ldr	r3, [pc, #264]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	4a41      	ldr	r2, [pc, #260]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800446a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800446e:	60d3      	str	r3, [r2, #12]
 8004470:	e011      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004476:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800447a:	d10c      	bne.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3304      	adds	r3, #4
 8004480:	2101      	movs	r1, #1
 8004482:	4618      	mov	r0, r3
 8004484:	f000 f876 	bl	8004574 <RCCEx_PLLSAI1_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800448c:	7cfb      	ldrb	r3, [r7, #19]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004492:	7cfb      	ldrb	r3, [r7, #19]
 8004494:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d01e      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044a2:	4b33      	ldr	r3, [pc, #204]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044b2:	492f      	ldr	r1, [pc, #188]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044c4:	d10c      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3304      	adds	r3, #4
 80044ca:	2102      	movs	r1, #2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 f851 	bl	8004574 <RCCEx_PLLSAI1_Config>
 80044d2:	4603      	mov	r3, r0
 80044d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044d6:	7cfb      	ldrb	r3, [r7, #19]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00b      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044ec:	4b20      	ldr	r3, [pc, #128]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044f2:	f023 0204 	bic.w	r2, r3, #4
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044fc:	491c      	ldr	r1, [pc, #112]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00b      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004510:	4b17      	ldr	r3, [pc, #92]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004512:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004516:	f023 0218 	bic.w	r2, r3, #24
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004520:	4913      	ldr	r1, [pc, #76]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d017      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004534:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004536:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800453a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004544:	490a      	ldr	r1, [pc, #40]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004556:	d105      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004558:	4b05      	ldr	r3, [pc, #20]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	4a04      	ldr	r2, [pc, #16]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800455e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004562:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004564:	7cbb      	ldrb	r3, [r7, #18]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40021000 	.word	0x40021000

08004574 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004582:	4b72      	ldr	r3, [pc, #456]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00e      	beq.n	80045ac <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800458e:	4b6f      	ldr	r3, [pc, #444]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f003 0203 	and.w	r2, r3, #3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d103      	bne.n	80045a6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
       ||
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d142      	bne.n	800462c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
 80045aa:	e03f      	b.n	800462c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d018      	beq.n	80045e6 <RCCEx_PLLSAI1_Config+0x72>
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d825      	bhi.n	8004604 <RCCEx_PLLSAI1_Config+0x90>
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d002      	beq.n	80045c2 <RCCEx_PLLSAI1_Config+0x4e>
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d009      	beq.n	80045d4 <RCCEx_PLLSAI1_Config+0x60>
 80045c0:	e020      	b.n	8004604 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045c2:	4b62      	ldr	r3, [pc, #392]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d11d      	bne.n	800460a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d2:	e01a      	b.n	800460a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045d4:	4b5d      	ldr	r3, [pc, #372]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d116      	bne.n	800460e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e4:	e013      	b.n	800460e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045e6:	4b59      	ldr	r3, [pc, #356]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10f      	bne.n	8004612 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045f2:	4b56      	ldr	r3, [pc, #344]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d109      	bne.n	8004612 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004602:	e006      	b.n	8004612 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
      break;
 8004608:	e004      	b.n	8004614 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800460a:	bf00      	nop
 800460c:	e002      	b.n	8004614 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800460e:	bf00      	nop
 8004610:	e000      	b.n	8004614 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004612:	bf00      	nop
    }

    if(status == HAL_OK)
 8004614:	7bfb      	ldrb	r3, [r7, #15]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d108      	bne.n	800462c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800461a:	4b4c      	ldr	r3, [pc, #304]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f023 0203 	bic.w	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4949      	ldr	r1, [pc, #292]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004628:	4313      	orrs	r3, r2
 800462a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800462c:	7bfb      	ldrb	r3, [r7, #15]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f040 8086 	bne.w	8004740 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004634:	4b45      	ldr	r3, [pc, #276]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a44      	ldr	r2, [pc, #272]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 800463a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800463e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004640:	f7fe f9a0 	bl	8002984 <HAL_GetTick>
 8004644:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004646:	e009      	b.n	800465c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004648:	f7fe f99c 	bl	8002984 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d902      	bls.n	800465c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	73fb      	strb	r3, [r7, #15]
        break;
 800465a:	e005      	b.n	8004668 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800465c:	4b3b      	ldr	r3, [pc, #236]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1ef      	bne.n	8004648 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d168      	bne.n	8004740 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d113      	bne.n	800469c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004674:	4b35      	ldr	r3, [pc, #212]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	4b35      	ldr	r3, [pc, #212]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 800467a:	4013      	ands	r3, r2
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6892      	ldr	r2, [r2, #8]
 8004680:	0211      	lsls	r1, r2, #8
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	68d2      	ldr	r2, [r2, #12]
 8004686:	06d2      	lsls	r2, r2, #27
 8004688:	4311      	orrs	r1, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6852      	ldr	r2, [r2, #4]
 800468e:	3a01      	subs	r2, #1
 8004690:	0112      	lsls	r2, r2, #4
 8004692:	430a      	orrs	r2, r1
 8004694:	492d      	ldr	r1, [pc, #180]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004696:	4313      	orrs	r3, r2
 8004698:	610b      	str	r3, [r1, #16]
 800469a:	e02d      	b.n	80046f8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d115      	bne.n	80046ce <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046a2:	4b2a      	ldr	r3, [pc, #168]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	4b2b      	ldr	r3, [pc, #172]	; (8004754 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6892      	ldr	r2, [r2, #8]
 80046ae:	0211      	lsls	r1, r2, #8
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6912      	ldr	r2, [r2, #16]
 80046b4:	0852      	lsrs	r2, r2, #1
 80046b6:	3a01      	subs	r2, #1
 80046b8:	0552      	lsls	r2, r2, #21
 80046ba:	4311      	orrs	r1, r2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6852      	ldr	r2, [r2, #4]
 80046c0:	3a01      	subs	r2, #1
 80046c2:	0112      	lsls	r2, r2, #4
 80046c4:	430a      	orrs	r2, r1
 80046c6:	4921      	ldr	r1, [pc, #132]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	610b      	str	r3, [r1, #16]
 80046cc:	e014      	b.n	80046f8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046ce:	4b1f      	ldr	r3, [pc, #124]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	4b21      	ldr	r3, [pc, #132]	; (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6892      	ldr	r2, [r2, #8]
 80046da:	0211      	lsls	r1, r2, #8
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6952      	ldr	r2, [r2, #20]
 80046e0:	0852      	lsrs	r2, r2, #1
 80046e2:	3a01      	subs	r2, #1
 80046e4:	0652      	lsls	r2, r2, #25
 80046e6:	4311      	orrs	r1, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6852      	ldr	r2, [r2, #4]
 80046ec:	3a01      	subs	r2, #1
 80046ee:	0112      	lsls	r2, r2, #4
 80046f0:	430a      	orrs	r2, r1
 80046f2:	4916      	ldr	r1, [pc, #88]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046f8:	4b14      	ldr	r3, [pc, #80]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a13      	ldr	r2, [pc, #76]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 80046fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004702:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004704:	f7fe f93e 	bl	8002984 <HAL_GetTick>
 8004708:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800470a:	e009      	b.n	8004720 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800470c:	f7fe f93a 	bl	8002984 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d902      	bls.n	8004720 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	73fb      	strb	r3, [r7, #15]
          break;
 800471e:	e005      	b.n	800472c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0ef      	beq.n	800470c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004732:	4b06      	ldr	r3, [pc, #24]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004734:	691a      	ldr	r2, [r3, #16]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	4904      	ldr	r1, [pc, #16]	; (800474c <RCCEx_PLLSAI1_Config+0x1d8>)
 800473c:	4313      	orrs	r3, r2
 800473e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004740:	7bfb      	ldrb	r3, [r7, #15]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40021000 	.word	0x40021000
 8004750:	07ff800f 	.word	0x07ff800f
 8004754:	ff9f800f 	.word	0xff9f800f
 8004758:	f9ff800f 	.word	0xf9ff800f

0800475c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800476a:	4b72      	ldr	r3, [pc, #456]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00e      	beq.n	8004794 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004776:	4b6f      	ldr	r3, [pc, #444]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f003 0203 	and.w	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d103      	bne.n	800478e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
       ||
 800478a:	2b00      	cmp	r3, #0
 800478c:	d142      	bne.n	8004814 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	73fb      	strb	r3, [r7, #15]
 8004792:	e03f      	b.n	8004814 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b03      	cmp	r3, #3
 800479a:	d018      	beq.n	80047ce <RCCEx_PLLSAI2_Config+0x72>
 800479c:	2b03      	cmp	r3, #3
 800479e:	d825      	bhi.n	80047ec <RCCEx_PLLSAI2_Config+0x90>
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d002      	beq.n	80047aa <RCCEx_PLLSAI2_Config+0x4e>
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d009      	beq.n	80047bc <RCCEx_PLLSAI2_Config+0x60>
 80047a8:	e020      	b.n	80047ec <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047aa:	4b62      	ldr	r3, [pc, #392]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d11d      	bne.n	80047f2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ba:	e01a      	b.n	80047f2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047bc:	4b5d      	ldr	r3, [pc, #372]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d116      	bne.n	80047f6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047cc:	e013      	b.n	80047f6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047ce:	4b59      	ldr	r3, [pc, #356]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10f      	bne.n	80047fa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047da:	4b56      	ldr	r3, [pc, #344]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d109      	bne.n	80047fa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047ea:	e006      	b.n	80047fa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]
      break;
 80047f0:	e004      	b.n	80047fc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80047f2:	bf00      	nop
 80047f4:	e002      	b.n	80047fc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80047f6:	bf00      	nop
 80047f8:	e000      	b.n	80047fc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80047fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d108      	bne.n	8004814 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004802:	4b4c      	ldr	r3, [pc, #304]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f023 0203 	bic.w	r2, r3, #3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4949      	ldr	r1, [pc, #292]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004810:	4313      	orrs	r3, r2
 8004812:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004814:	7bfb      	ldrb	r3, [r7, #15]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f040 8086 	bne.w	8004928 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800481c:	4b45      	ldr	r3, [pc, #276]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a44      	ldr	r2, [pc, #272]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004828:	f7fe f8ac 	bl	8002984 <HAL_GetTick>
 800482c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800482e:	e009      	b.n	8004844 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004830:	f7fe f8a8 	bl	8002984 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d902      	bls.n	8004844 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	73fb      	strb	r3, [r7, #15]
        break;
 8004842:	e005      	b.n	8004850 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004844:	4b3b      	ldr	r3, [pc, #236]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1ef      	bne.n	8004830 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d168      	bne.n	8004928 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d113      	bne.n	8004884 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800485c:	4b35      	ldr	r3, [pc, #212]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 800485e:	695a      	ldr	r2, [r3, #20]
 8004860:	4b35      	ldr	r3, [pc, #212]	; (8004938 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004862:	4013      	ands	r3, r2
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6892      	ldr	r2, [r2, #8]
 8004868:	0211      	lsls	r1, r2, #8
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	68d2      	ldr	r2, [r2, #12]
 800486e:	06d2      	lsls	r2, r2, #27
 8004870:	4311      	orrs	r1, r2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6852      	ldr	r2, [r2, #4]
 8004876:	3a01      	subs	r2, #1
 8004878:	0112      	lsls	r2, r2, #4
 800487a:	430a      	orrs	r2, r1
 800487c:	492d      	ldr	r1, [pc, #180]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 800487e:	4313      	orrs	r3, r2
 8004880:	614b      	str	r3, [r1, #20]
 8004882:	e02d      	b.n	80048e0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d115      	bne.n	80048b6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800488a:	4b2a      	ldr	r3, [pc, #168]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 800488c:	695a      	ldr	r2, [r3, #20]
 800488e:	4b2b      	ldr	r3, [pc, #172]	; (800493c <RCCEx_PLLSAI2_Config+0x1e0>)
 8004890:	4013      	ands	r3, r2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6892      	ldr	r2, [r2, #8]
 8004896:	0211      	lsls	r1, r2, #8
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6912      	ldr	r2, [r2, #16]
 800489c:	0852      	lsrs	r2, r2, #1
 800489e:	3a01      	subs	r2, #1
 80048a0:	0552      	lsls	r2, r2, #21
 80048a2:	4311      	orrs	r1, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6852      	ldr	r2, [r2, #4]
 80048a8:	3a01      	subs	r2, #1
 80048aa:	0112      	lsls	r2, r2, #4
 80048ac:	430a      	orrs	r2, r1
 80048ae:	4921      	ldr	r1, [pc, #132]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	614b      	str	r3, [r1, #20]
 80048b4:	e014      	b.n	80048e0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048b6:	4b1f      	ldr	r3, [pc, #124]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048b8:	695a      	ldr	r2, [r3, #20]
 80048ba:	4b21      	ldr	r3, [pc, #132]	; (8004940 <RCCEx_PLLSAI2_Config+0x1e4>)
 80048bc:	4013      	ands	r3, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6892      	ldr	r2, [r2, #8]
 80048c2:	0211      	lsls	r1, r2, #8
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6952      	ldr	r2, [r2, #20]
 80048c8:	0852      	lsrs	r2, r2, #1
 80048ca:	3a01      	subs	r2, #1
 80048cc:	0652      	lsls	r2, r2, #25
 80048ce:	4311      	orrs	r1, r2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6852      	ldr	r2, [r2, #4]
 80048d4:	3a01      	subs	r2, #1
 80048d6:	0112      	lsls	r2, r2, #4
 80048d8:	430a      	orrs	r2, r1
 80048da:	4916      	ldr	r1, [pc, #88]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80048e0:	4b14      	ldr	r3, [pc, #80]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a13      	ldr	r2, [pc, #76]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ec:	f7fe f84a 	bl	8002984 <HAL_GetTick>
 80048f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048f2:	e009      	b.n	8004908 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048f4:	f7fe f846 	bl	8002984 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d902      	bls.n	8004908 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	73fb      	strb	r3, [r7, #15]
          break;
 8004906:	e005      	b.n	8004914 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0ef      	beq.n	80048f4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800491a:	4b06      	ldr	r3, [pc, #24]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	4904      	ldr	r1, [pc, #16]	; (8004934 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004924:	4313      	orrs	r3, r2
 8004926:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004928:	7bfb      	ldrb	r3, [r7, #15]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40021000 	.word	0x40021000
 8004938:	07ff800f 	.word	0x07ff800f
 800493c:	ff9f800f 	.word	0xff9f800f
 8004940:	f9ff800f 	.word	0xf9ff800f

08004944 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e095      	b.n	8004a82 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	2b00      	cmp	r3, #0
 800495c:	d108      	bne.n	8004970 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004966:	d009      	beq.n	800497c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	61da      	str	r2, [r3, #28]
 800496e:	e005      	b.n	800497c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fd fca2 	bl	80022e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049bc:	d902      	bls.n	80049c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	e002      	b.n	80049ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80049d2:	d007      	beq.n	80049e4 <HAL_SPI_Init+0xa0>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049dc:	d002      	beq.n	80049e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a26:	ea42 0103 	orr.w	r1, r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	0c1b      	lsrs	r3, r3, #16
 8004a40:	f003 0204 	and.w	r2, r3, #4
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	f003 0310 	and.w	r3, r3, #16
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a60:	ea42 0103 	orr.w	r1, r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b08a      	sub	sp, #40	; 0x28
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
 8004a96:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_SPI_TransmitReceive+0x26>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e1fb      	b.n	8004ea8 <HAL_SPI_TransmitReceive+0x41e>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ab8:	f7fd ff64 	bl	8002984 <HAL_GetTick>
 8004abc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ac4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004acc:	887b      	ldrh	r3, [r7, #2]
 8004ace:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004ad0:	887b      	ldrh	r3, [r7, #2]
 8004ad2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ad4:	7efb      	ldrb	r3, [r7, #27]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d00e      	beq.n	8004af8 <HAL_SPI_TransmitReceive+0x6e>
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ae0:	d106      	bne.n	8004af0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d102      	bne.n	8004af0 <HAL_SPI_TransmitReceive+0x66>
 8004aea:	7efb      	ldrb	r3, [r7, #27]
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d003      	beq.n	8004af8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004af0:	2302      	movs	r3, #2
 8004af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004af6:	e1cd      	b.n	8004e94 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <HAL_SPI_TransmitReceive+0x80>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d002      	beq.n	8004b0a <HAL_SPI_TransmitReceive+0x80>
 8004b04:	887b      	ldrh	r3, [r7, #2]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d103      	bne.n	8004b12 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004b10:	e1c0      	b.n	8004e94 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d003      	beq.n	8004b26 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2205      	movs	r2, #5
 8004b22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	887a      	ldrh	r2, [r7, #2]
 8004b36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	887a      	ldrh	r2, [r7, #2]
 8004b3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	887a      	ldrh	r2, [r7, #2]
 8004b4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	887a      	ldrh	r2, [r7, #2]
 8004b52:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b68:	d802      	bhi.n	8004b70 <HAL_SPI_TransmitReceive+0xe6>
 8004b6a:	8a3b      	ldrh	r3, [r7, #16]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d908      	bls.n	8004b82 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b7e:	605a      	str	r2, [r3, #4]
 8004b80:	e007      	b.n	8004b92 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b90:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9c:	2b40      	cmp	r3, #64	; 0x40
 8004b9e:	d007      	beq.n	8004bb0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bb8:	d97c      	bls.n	8004cb4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <HAL_SPI_TransmitReceive+0x13e>
 8004bc2:	8a7b      	ldrh	r3, [r7, #18]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d169      	bne.n	8004c9c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	881a      	ldrh	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	1c9a      	adds	r2, r3, #2
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bec:	e056      	b.n	8004c9c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d11b      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x1aa>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d016      	beq.n	8004c34 <HAL_SPI_TransmitReceive+0x1aa>
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d113      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c10:	881a      	ldrh	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	1c9a      	adds	r2, r3, #2
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d11c      	bne.n	8004c7c <HAL_SPI_TransmitReceive+0x1f2>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d016      	beq.n	8004c7c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	b292      	uxth	r2, r2
 8004c5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	1c9a      	adds	r2, r3, #2
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c7c:	f7fd fe82 	bl	8002984 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d807      	bhi.n	8004c9c <HAL_SPI_TransmitReceive+0x212>
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d003      	beq.n	8004c9c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004c9a:	e0fb      	b.n	8004e94 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1a3      	bne.n	8004bee <HAL_SPI_TransmitReceive+0x164>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d19d      	bne.n	8004bee <HAL_SPI_TransmitReceive+0x164>
 8004cb2:	e0df      	b.n	8004e74 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <HAL_SPI_TransmitReceive+0x23a>
 8004cbc:	8a7b      	ldrh	r3, [r7, #18]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	f040 80cb 	bne.w	8004e5a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d912      	bls.n	8004cf4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	881a      	ldrh	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	1c9a      	adds	r2, r3, #2
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3b02      	subs	r3, #2
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cf2:	e0b2      	b.n	8004e5a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	7812      	ldrb	r2, [r2, #0]
 8004d00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d1a:	e09e      	b.n	8004e5a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d134      	bne.n	8004d94 <HAL_SPI_TransmitReceive+0x30a>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d02f      	beq.n	8004d94 <HAL_SPI_TransmitReceive+0x30a>
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d12c      	bne.n	8004d94 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d912      	bls.n	8004d6a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	881a      	ldrh	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	1c9a      	adds	r2, r3, #2
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	3b02      	subs	r3, #2
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d68:	e012      	b.n	8004d90 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	330c      	adds	r3, #12
 8004d74:	7812      	ldrb	r2, [r2, #0]
 8004d76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d148      	bne.n	8004e34 <HAL_SPI_TransmitReceive+0x3aa>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d042      	beq.n	8004e34 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d923      	bls.n	8004e02 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	b292      	uxth	r2, r2
 8004dc6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	1c9a      	adds	r2, r3, #2
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b02      	subs	r3, #2
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d81f      	bhi.n	8004e30 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dfe:	605a      	str	r2, [r3, #4]
 8004e00:	e016      	b.n	8004e30 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f103 020c 	add.w	r2, r3, #12
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	7812      	ldrb	r2, [r2, #0]
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e30:	2301      	movs	r3, #1
 8004e32:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e34:	f7fd fda6 	bl	8002984 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d803      	bhi.n	8004e4c <HAL_SPI_TransmitReceive+0x3c2>
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4a:	d102      	bne.n	8004e52 <HAL_SPI_TransmitReceive+0x3c8>
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d103      	bne.n	8004e5a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004e58:	e01c      	b.n	8004e94 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f47f af5b 	bne.w	8004d1c <HAL_SPI_TransmitReceive+0x292>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f47f af54 	bne.w	8004d1c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e74:	69fa      	ldr	r2, [r7, #28]
 8004e76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 f937 	bl	80050ec <SPI_EndRxTxTransaction>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d006      	beq.n	8004e92 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	661a      	str	r2, [r3, #96]	; 0x60
 8004e90:	e000      	b.n	8004e94 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004e92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3728      	adds	r7, #40	; 0x28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ec0:	f7fd fd60 	bl	8002984 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec8:	1a9b      	subs	r3, r3, r2
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	4413      	add	r3, r2
 8004ece:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ed0:	f7fd fd58 	bl	8002984 <HAL_GetTick>
 8004ed4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ed6:	4b39      	ldr	r3, [pc, #228]	; (8004fbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	015b      	lsls	r3, r3, #5
 8004edc:	0d1b      	lsrs	r3, r3, #20
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	fb02 f303 	mul.w	r3, r2, r3
 8004ee4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ee6:	e054      	b.n	8004f92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	d050      	beq.n	8004f92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ef0:	f7fd fd48 	bl	8002984 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d902      	bls.n	8004f06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d13d      	bne.n	8004f82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f1e:	d111      	bne.n	8004f44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f28:	d004      	beq.n	8004f34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f32:	d107      	bne.n	8004f44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4c:	d10f      	bne.n	8004f6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e017      	b.n	8004fb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	bf0c      	ite	eq
 8004fa2:	2301      	moveq	r3, #1
 8004fa4:	2300      	movne	r3, #0
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	461a      	mov	r2, r3
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d19b      	bne.n	8004ee8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20000000 	.word	0x20000000

08004fc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08a      	sub	sp, #40	; 0x28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004fd2:	f7fd fcd7 	bl	8002984 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	1a9b      	subs	r3, r3, r2
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	4413      	add	r3, r2
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004fe2:	f7fd fccf 	bl	8002984 <HAL_GetTick>
 8004fe6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	330c      	adds	r3, #12
 8004fee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ff0:	4b3d      	ldr	r3, [pc, #244]	; (80050e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	00da      	lsls	r2, r3, #3
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	0d1b      	lsrs	r3, r3, #20
 8005000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005002:	fb02 f303 	mul.w	r3, r2, r3
 8005006:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005008:	e060      	b.n	80050cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005010:	d107      	bne.n	8005022 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d104      	bne.n	8005022 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005020:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005028:	d050      	beq.n	80050cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800502a:	f7fd fcab 	bl	8002984 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005036:	429a      	cmp	r2, r3
 8005038:	d902      	bls.n	8005040 <SPI_WaitFifoStateUntilTimeout+0x80>
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	2b00      	cmp	r3, #0
 800503e:	d13d      	bne.n	80050bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800504e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005058:	d111      	bne.n	800507e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005062:	d004      	beq.n	800506e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506c:	d107      	bne.n	800507e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800507c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005086:	d10f      	bne.n	80050a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e010      	b.n	80050de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	4013      	ands	r3, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d196      	bne.n	800500a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3728      	adds	r7, #40	; 0x28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000000 	.word	0x20000000

080050ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2200      	movs	r2, #0
 8005100:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff ff5b 	bl	8004fc0 <SPI_WaitFifoStateUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005114:	f043 0220 	orr.w	r2, r3, #32
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e027      	b.n	8005170 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2200      	movs	r2, #0
 8005128:	2180      	movs	r1, #128	; 0x80
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7ff fec0 	bl	8004eb0 <SPI_WaitFlagStateUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d007      	beq.n	8005146 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e014      	b.n	8005170 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2200      	movs	r2, #0
 800514e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f7ff ff34 	bl	8004fc0 <SPI_WaitFifoStateUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005162:	f043 0220 	orr.w	r2, r3, #32
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e000      	b.n	8005170 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e049      	b.n	800521e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7fd f8e0 	bl	8002364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3304      	adds	r3, #4
 80051b4:	4619      	mov	r1, r3
 80051b6:	4610      	mov	r0, r2
 80051b8:	f000 ff14 	bl	8005fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b082      	sub	sp, #8
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e049      	b.n	80052cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d106      	bne.n	8005252 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f841 	bl	80052d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2202      	movs	r2, #2
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3304      	adds	r3, #4
 8005262:	4619      	mov	r1, r3
 8005264:	4610      	mov	r0, r2
 8005266:	f000 febd 	bl	8005fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d109      	bne.n	800530c <HAL_TIM_PWM_Start+0x24>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b01      	cmp	r3, #1
 8005302:	bf14      	ite	ne
 8005304:	2301      	movne	r3, #1
 8005306:	2300      	moveq	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	e03c      	b.n	8005386 <HAL_TIM_PWM_Start+0x9e>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2b04      	cmp	r3, #4
 8005310:	d109      	bne.n	8005326 <HAL_TIM_PWM_Start+0x3e>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b01      	cmp	r3, #1
 800531c:	bf14      	ite	ne
 800531e:	2301      	movne	r3, #1
 8005320:	2300      	moveq	r3, #0
 8005322:	b2db      	uxtb	r3, r3
 8005324:	e02f      	b.n	8005386 <HAL_TIM_PWM_Start+0x9e>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b08      	cmp	r3, #8
 800532a:	d109      	bne.n	8005340 <HAL_TIM_PWM_Start+0x58>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b01      	cmp	r3, #1
 8005336:	bf14      	ite	ne
 8005338:	2301      	movne	r3, #1
 800533a:	2300      	moveq	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	e022      	b.n	8005386 <HAL_TIM_PWM_Start+0x9e>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b0c      	cmp	r3, #12
 8005344:	d109      	bne.n	800535a <HAL_TIM_PWM_Start+0x72>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b01      	cmp	r3, #1
 8005350:	bf14      	ite	ne
 8005352:	2301      	movne	r3, #1
 8005354:	2300      	moveq	r3, #0
 8005356:	b2db      	uxtb	r3, r3
 8005358:	e015      	b.n	8005386 <HAL_TIM_PWM_Start+0x9e>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b10      	cmp	r3, #16
 800535e:	d109      	bne.n	8005374 <HAL_TIM_PWM_Start+0x8c>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b01      	cmp	r3, #1
 800536a:	bf14      	ite	ne
 800536c:	2301      	movne	r3, #1
 800536e:	2300      	moveq	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	e008      	b.n	8005386 <HAL_TIM_PWM_Start+0x9e>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b01      	cmp	r3, #1
 800537e:	bf14      	ite	ne
 8005380:	2301      	movne	r3, #1
 8005382:	2300      	moveq	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e09c      	b.n	80054c8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d104      	bne.n	800539e <HAL_TIM_PWM_Start+0xb6>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800539c:	e023      	b.n	80053e6 <HAL_TIM_PWM_Start+0xfe>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d104      	bne.n	80053ae <HAL_TIM_PWM_Start+0xc6>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053ac:	e01b      	b.n	80053e6 <HAL_TIM_PWM_Start+0xfe>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d104      	bne.n	80053be <HAL_TIM_PWM_Start+0xd6>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053bc:	e013      	b.n	80053e6 <HAL_TIM_PWM_Start+0xfe>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b0c      	cmp	r3, #12
 80053c2:	d104      	bne.n	80053ce <HAL_TIM_PWM_Start+0xe6>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053cc:	e00b      	b.n	80053e6 <HAL_TIM_PWM_Start+0xfe>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	d104      	bne.n	80053de <HAL_TIM_PWM_Start+0xf6>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053dc:	e003      	b.n	80053e6 <HAL_TIM_PWM_Start+0xfe>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2202      	movs	r2, #2
 80053e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2201      	movs	r2, #1
 80053ec:	6839      	ldr	r1, [r7, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f001 fb26 	bl	8006a40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a35      	ldr	r2, [pc, #212]	; (80054d0 <HAL_TIM_PWM_Start+0x1e8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d013      	beq.n	8005426 <HAL_TIM_PWM_Start+0x13e>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a34      	ldr	r2, [pc, #208]	; (80054d4 <HAL_TIM_PWM_Start+0x1ec>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00e      	beq.n	8005426 <HAL_TIM_PWM_Start+0x13e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a32      	ldr	r2, [pc, #200]	; (80054d8 <HAL_TIM_PWM_Start+0x1f0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d009      	beq.n	8005426 <HAL_TIM_PWM_Start+0x13e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a31      	ldr	r2, [pc, #196]	; (80054dc <HAL_TIM_PWM_Start+0x1f4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d004      	beq.n	8005426 <HAL_TIM_PWM_Start+0x13e>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a2f      	ldr	r2, [pc, #188]	; (80054e0 <HAL_TIM_PWM_Start+0x1f8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d101      	bne.n	800542a <HAL_TIM_PWM_Start+0x142>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <HAL_TIM_PWM_Start+0x144>
 800542a:	2300      	movs	r3, #0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d007      	beq.n	8005440 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800543e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a22      	ldr	r2, [pc, #136]	; (80054d0 <HAL_TIM_PWM_Start+0x1e8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d01d      	beq.n	8005486 <HAL_TIM_PWM_Start+0x19e>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005452:	d018      	beq.n	8005486 <HAL_TIM_PWM_Start+0x19e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a22      	ldr	r2, [pc, #136]	; (80054e4 <HAL_TIM_PWM_Start+0x1fc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d013      	beq.n	8005486 <HAL_TIM_PWM_Start+0x19e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a21      	ldr	r2, [pc, #132]	; (80054e8 <HAL_TIM_PWM_Start+0x200>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00e      	beq.n	8005486 <HAL_TIM_PWM_Start+0x19e>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a1f      	ldr	r2, [pc, #124]	; (80054ec <HAL_TIM_PWM_Start+0x204>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d009      	beq.n	8005486 <HAL_TIM_PWM_Start+0x19e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a17      	ldr	r2, [pc, #92]	; (80054d4 <HAL_TIM_PWM_Start+0x1ec>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d004      	beq.n	8005486 <HAL_TIM_PWM_Start+0x19e>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a15      	ldr	r2, [pc, #84]	; (80054d8 <HAL_TIM_PWM_Start+0x1f0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d115      	bne.n	80054b2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	4b18      	ldr	r3, [pc, #96]	; (80054f0 <HAL_TIM_PWM_Start+0x208>)
 800548e:	4013      	ands	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b06      	cmp	r3, #6
 8005496:	d015      	beq.n	80054c4 <HAL_TIM_PWM_Start+0x1dc>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800549e:	d011      	beq.n	80054c4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b0:	e008      	b.n	80054c4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f042 0201 	orr.w	r2, r2, #1
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	e000      	b.n	80054c6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40012c00 	.word	0x40012c00
 80054d4:	40013400 	.word	0x40013400
 80054d8:	40014000 	.word	0x40014000
 80054dc:	40014400 	.word	0x40014400
 80054e0:	40014800 	.word	0x40014800
 80054e4:	40000400 	.word	0x40000400
 80054e8:	40000800 	.word	0x40000800
 80054ec:	40000c00 	.word	0x40000c00
 80054f0:	00010007 	.word	0x00010007

080054f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e049      	b.n	800559a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d106      	bne.n	8005520 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f841 	bl	80055a2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3304      	adds	r3, #4
 8005530:	4619      	mov	r1, r3
 8005532:	4610      	mov	r0, r2
 8005534:	f000 fd56 	bl	8005fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d104      	bne.n	80055d6 <HAL_TIM_IC_Start_IT+0x1e>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	e023      	b.n	800561e <HAL_TIM_IC_Start_IT+0x66>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d104      	bne.n	80055e6 <HAL_TIM_IC_Start_IT+0x2e>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	e01b      	b.n	800561e <HAL_TIM_IC_Start_IT+0x66>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d104      	bne.n	80055f6 <HAL_TIM_IC_Start_IT+0x3e>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	e013      	b.n	800561e <HAL_TIM_IC_Start_IT+0x66>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b0c      	cmp	r3, #12
 80055fa:	d104      	bne.n	8005606 <HAL_TIM_IC_Start_IT+0x4e>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005602:	b2db      	uxtb	r3, r3
 8005604:	e00b      	b.n	800561e <HAL_TIM_IC_Start_IT+0x66>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b10      	cmp	r3, #16
 800560a:	d104      	bne.n	8005616 <HAL_TIM_IC_Start_IT+0x5e>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005612:	b2db      	uxtb	r3, r3
 8005614:	e003      	b.n	800561e <HAL_TIM_IC_Start_IT+0x66>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800561c:	b2db      	uxtb	r3, r3
 800561e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d104      	bne.n	8005630 <HAL_TIM_IC_Start_IT+0x78>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800562c:	b2db      	uxtb	r3, r3
 800562e:	e013      	b.n	8005658 <HAL_TIM_IC_Start_IT+0xa0>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	2b04      	cmp	r3, #4
 8005634:	d104      	bne.n	8005640 <HAL_TIM_IC_Start_IT+0x88>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800563c:	b2db      	uxtb	r3, r3
 800563e:	e00b      	b.n	8005658 <HAL_TIM_IC_Start_IT+0xa0>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b08      	cmp	r3, #8
 8005644:	d104      	bne.n	8005650 <HAL_TIM_IC_Start_IT+0x98>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800564c:	b2db      	uxtb	r3, r3
 800564e:	e003      	b.n	8005658 <HAL_TIM_IC_Start_IT+0xa0>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005656:	b2db      	uxtb	r3, r3
 8005658:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800565a:	7bbb      	ldrb	r3, [r7, #14]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d102      	bne.n	8005666 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005660:	7b7b      	ldrb	r3, [r7, #13]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d001      	beq.n	800566a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e0dd      	b.n	8005826 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d104      	bne.n	800567a <HAL_TIM_IC_Start_IT+0xc2>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005678:	e023      	b.n	80056c2 <HAL_TIM_IC_Start_IT+0x10a>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b04      	cmp	r3, #4
 800567e:	d104      	bne.n	800568a <HAL_TIM_IC_Start_IT+0xd2>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005688:	e01b      	b.n	80056c2 <HAL_TIM_IC_Start_IT+0x10a>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b08      	cmp	r3, #8
 800568e:	d104      	bne.n	800569a <HAL_TIM_IC_Start_IT+0xe2>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005698:	e013      	b.n	80056c2 <HAL_TIM_IC_Start_IT+0x10a>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b0c      	cmp	r3, #12
 800569e:	d104      	bne.n	80056aa <HAL_TIM_IC_Start_IT+0xf2>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056a8:	e00b      	b.n	80056c2 <HAL_TIM_IC_Start_IT+0x10a>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b10      	cmp	r3, #16
 80056ae:	d104      	bne.n	80056ba <HAL_TIM_IC_Start_IT+0x102>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056b8:	e003      	b.n	80056c2 <HAL_TIM_IC_Start_IT+0x10a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2202      	movs	r2, #2
 80056be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d104      	bne.n	80056d2 <HAL_TIM_IC_Start_IT+0x11a>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d0:	e013      	b.n	80056fa <HAL_TIM_IC_Start_IT+0x142>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d104      	bne.n	80056e2 <HAL_TIM_IC_Start_IT+0x12a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056e0:	e00b      	b.n	80056fa <HAL_TIM_IC_Start_IT+0x142>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d104      	bne.n	80056f2 <HAL_TIM_IC_Start_IT+0x13a>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056f0:	e003      	b.n	80056fa <HAL_TIM_IC_Start_IT+0x142>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2202      	movs	r2, #2
 80056f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b0c      	cmp	r3, #12
 80056fe:	d841      	bhi.n	8005784 <HAL_TIM_IC_Start_IT+0x1cc>
 8005700:	a201      	add	r2, pc, #4	; (adr r2, 8005708 <HAL_TIM_IC_Start_IT+0x150>)
 8005702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005706:	bf00      	nop
 8005708:	0800573d 	.word	0x0800573d
 800570c:	08005785 	.word	0x08005785
 8005710:	08005785 	.word	0x08005785
 8005714:	08005785 	.word	0x08005785
 8005718:	0800574f 	.word	0x0800574f
 800571c:	08005785 	.word	0x08005785
 8005720:	08005785 	.word	0x08005785
 8005724:	08005785 	.word	0x08005785
 8005728:	08005761 	.word	0x08005761
 800572c:	08005785 	.word	0x08005785
 8005730:	08005785 	.word	0x08005785
 8005734:	08005785 	.word	0x08005785
 8005738:	08005773 	.word	0x08005773
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0202 	orr.w	r2, r2, #2
 800574a:	60da      	str	r2, [r3, #12]
      break;
 800574c:	e01d      	b.n	800578a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 0204 	orr.w	r2, r2, #4
 800575c:	60da      	str	r2, [r3, #12]
      break;
 800575e:	e014      	b.n	800578a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0208 	orr.w	r2, r2, #8
 800576e:	60da      	str	r2, [r3, #12]
      break;
 8005770:	e00b      	b.n	800578a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 0210 	orr.w	r2, r2, #16
 8005780:	60da      	str	r2, [r3, #12]
      break;
 8005782:	e002      	b.n	800578a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	73fb      	strb	r3, [r7, #15]
      break;
 8005788:	bf00      	nop
  }

  if (status == HAL_OK)
 800578a:	7bfb      	ldrb	r3, [r7, #15]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d149      	bne.n	8005824 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2201      	movs	r2, #1
 8005796:	6839      	ldr	r1, [r7, #0]
 8005798:	4618      	mov	r0, r3
 800579a:	f001 f951 	bl	8006a40 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a23      	ldr	r2, [pc, #140]	; (8005830 <HAL_TIM_IC_Start_IT+0x278>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d01d      	beq.n	80057e4 <HAL_TIM_IC_Start_IT+0x22c>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b0:	d018      	beq.n	80057e4 <HAL_TIM_IC_Start_IT+0x22c>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1f      	ldr	r2, [pc, #124]	; (8005834 <HAL_TIM_IC_Start_IT+0x27c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d013      	beq.n	80057e4 <HAL_TIM_IC_Start_IT+0x22c>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1d      	ldr	r2, [pc, #116]	; (8005838 <HAL_TIM_IC_Start_IT+0x280>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00e      	beq.n	80057e4 <HAL_TIM_IC_Start_IT+0x22c>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1c      	ldr	r2, [pc, #112]	; (800583c <HAL_TIM_IC_Start_IT+0x284>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d009      	beq.n	80057e4 <HAL_TIM_IC_Start_IT+0x22c>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a1a      	ldr	r2, [pc, #104]	; (8005840 <HAL_TIM_IC_Start_IT+0x288>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d004      	beq.n	80057e4 <HAL_TIM_IC_Start_IT+0x22c>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a19      	ldr	r2, [pc, #100]	; (8005844 <HAL_TIM_IC_Start_IT+0x28c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d115      	bne.n	8005810 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	4b17      	ldr	r3, [pc, #92]	; (8005848 <HAL_TIM_IC_Start_IT+0x290>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2b06      	cmp	r3, #6
 80057f4:	d015      	beq.n	8005822 <HAL_TIM_IC_Start_IT+0x26a>
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fc:	d011      	beq.n	8005822 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f042 0201 	orr.w	r2, r2, #1
 800580c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800580e:	e008      	b.n	8005822 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0201 	orr.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	e000      	b.n	8005824 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005822:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005824:	7bfb      	ldrb	r3, [r7, #15]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	40012c00 	.word	0x40012c00
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40000c00 	.word	0x40000c00
 8005840:	40013400 	.word	0x40013400
 8005844:	40014000 	.word	0x40014000
 8005848:	00010007 	.word	0x00010007

0800584c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b02      	cmp	r3, #2
 8005860:	d122      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b02      	cmp	r3, #2
 800586e:	d11b      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f06f 0202 	mvn.w	r2, #2
 8005878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fb89 	bl	8005fa6 <HAL_TIM_IC_CaptureCallback>
 8005894:	e005      	b.n	80058a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fb7b 	bl	8005f92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fb8c 	bl	8005fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f003 0304 	and.w	r3, r3, #4
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d122      	bne.n	80058fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d11b      	bne.n	80058fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f06f 0204 	mvn.w	r2, #4
 80058cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2202      	movs	r2, #2
 80058d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fb5f 	bl	8005fa6 <HAL_TIM_IC_CaptureCallback>
 80058e8:	e005      	b.n	80058f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fb51 	bl	8005f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fb62 	bl	8005fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b08      	cmp	r3, #8
 8005908:	d122      	bne.n	8005950 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f003 0308 	and.w	r3, r3, #8
 8005914:	2b08      	cmp	r3, #8
 8005916:	d11b      	bne.n	8005950 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f06f 0208 	mvn.w	r2, #8
 8005920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2204      	movs	r2, #4
 8005926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fb35 	bl	8005fa6 <HAL_TIM_IC_CaptureCallback>
 800593c:	e005      	b.n	800594a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fb27 	bl	8005f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fb38 	bl	8005fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f003 0310 	and.w	r3, r3, #16
 800595a:	2b10      	cmp	r3, #16
 800595c:	d122      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f003 0310 	and.w	r3, r3, #16
 8005968:	2b10      	cmp	r3, #16
 800596a:	d11b      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f06f 0210 	mvn.w	r2, #16
 8005974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2208      	movs	r2, #8
 800597a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fb0b 	bl	8005fa6 <HAL_TIM_IC_CaptureCallback>
 8005990:	e005      	b.n	800599e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fafd 	bl	8005f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fb0e 	bl	8005fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d10e      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d107      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0201 	mvn.w	r2, #1
 80059c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fad7 	bl	8005f7e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059da:	2b80      	cmp	r3, #128	; 0x80
 80059dc:	d10e      	bne.n	80059fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e8:	2b80      	cmp	r3, #128	; 0x80
 80059ea:	d107      	bne.n	80059fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f001 f8da 	bl	8006bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a0a:	d10e      	bne.n	8005a2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a16:	2b80      	cmp	r3, #128	; 0x80
 8005a18:	d107      	bne.n	8005a2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f001 f8cd 	bl	8006bc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b40      	cmp	r3, #64	; 0x40
 8005a36:	d10e      	bne.n	8005a56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b40      	cmp	r3, #64	; 0x40
 8005a44:	d107      	bne.n	8005a56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fabc 	bl	8005fce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	d10e      	bne.n	8005a82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f003 0320 	and.w	r3, r3, #32
 8005a6e:	2b20      	cmp	r3, #32
 8005a70:	d107      	bne.n	8005a82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f06f 0220 	mvn.w	r2, #32
 8005a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f001 f88d 	bl	8006b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a82:	bf00      	nop
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b086      	sub	sp, #24
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e088      	b.n	8005bba <HAL_TIM_IC_ConfigChannel+0x130>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d11b      	bne.n	8005aee <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	6819      	ldr	r1, [r3, #0]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f000 fdfd 	bl	80066c4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	699a      	ldr	r2, [r3, #24]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 020c 	bic.w	r2, r2, #12
 8005ad8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6999      	ldr	r1, [r3, #24]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	619a      	str	r2, [r3, #24]
 8005aec:	e060      	b.n	8005bb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d11c      	bne.n	8005b2e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6818      	ldr	r0, [r3, #0]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	6819      	ldr	r1, [r3, #0]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f000 fe7b 	bl	80067fe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699a      	ldr	r2, [r3, #24]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b16:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6999      	ldr	r1, [r3, #24]
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	021a      	lsls	r2, r3, #8
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	619a      	str	r2, [r3, #24]
 8005b2c:	e040      	b.n	8005bb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	d11b      	bne.n	8005b6c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6818      	ldr	r0, [r3, #0]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	6819      	ldr	r1, [r3, #0]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f000 fec8 	bl	80068d8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	69da      	ldr	r2, [r3, #28]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 020c 	bic.w	r2, r2, #12
 8005b56:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	69d9      	ldr	r1, [r3, #28]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	61da      	str	r2, [r3, #28]
 8005b6a:	e021      	b.n	8005bb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b0c      	cmp	r3, #12
 8005b70:	d11c      	bne.n	8005bac <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	6819      	ldr	r1, [r3, #0]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f000 fee5 	bl	8006950 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b94:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69d9      	ldr	r1, [r3, #28]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	021a      	lsls	r2, r3, #8
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	61da      	str	r2, [r3, #28]
 8005baa:	e001      	b.n	8005bb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3718      	adds	r7, #24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
	...

08005bc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d101      	bne.n	8005be2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e0ff      	b.n	8005de2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b14      	cmp	r3, #20
 8005bee:	f200 80f0 	bhi.w	8005dd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005bf2:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf8:	08005c4d 	.word	0x08005c4d
 8005bfc:	08005dd3 	.word	0x08005dd3
 8005c00:	08005dd3 	.word	0x08005dd3
 8005c04:	08005dd3 	.word	0x08005dd3
 8005c08:	08005c8d 	.word	0x08005c8d
 8005c0c:	08005dd3 	.word	0x08005dd3
 8005c10:	08005dd3 	.word	0x08005dd3
 8005c14:	08005dd3 	.word	0x08005dd3
 8005c18:	08005ccf 	.word	0x08005ccf
 8005c1c:	08005dd3 	.word	0x08005dd3
 8005c20:	08005dd3 	.word	0x08005dd3
 8005c24:	08005dd3 	.word	0x08005dd3
 8005c28:	08005d0f 	.word	0x08005d0f
 8005c2c:	08005dd3 	.word	0x08005dd3
 8005c30:	08005dd3 	.word	0x08005dd3
 8005c34:	08005dd3 	.word	0x08005dd3
 8005c38:	08005d51 	.word	0x08005d51
 8005c3c:	08005dd3 	.word	0x08005dd3
 8005c40:	08005dd3 	.word	0x08005dd3
 8005c44:	08005dd3 	.word	0x08005dd3
 8005c48:	08005d91 	.word	0x08005d91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68b9      	ldr	r1, [r7, #8]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fa60 	bl	8006118 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699a      	ldr	r2, [r3, #24]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0208 	orr.w	r2, r2, #8
 8005c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0204 	bic.w	r2, r2, #4
 8005c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6999      	ldr	r1, [r3, #24]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	691a      	ldr	r2, [r3, #16]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	619a      	str	r2, [r3, #24]
      break;
 8005c8a:	e0a5      	b.n	8005dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 fad0 	bl	8006238 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699a      	ldr	r2, [r3, #24]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699a      	ldr	r2, [r3, #24]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6999      	ldr	r1, [r3, #24]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	021a      	lsls	r2, r3, #8
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	619a      	str	r2, [r3, #24]
      break;
 8005ccc:	e084      	b.n	8005dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68b9      	ldr	r1, [r7, #8]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 fb39 	bl	800634c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69da      	ldr	r2, [r3, #28]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f042 0208 	orr.w	r2, r2, #8
 8005ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69da      	ldr	r2, [r3, #28]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0204 	bic.w	r2, r2, #4
 8005cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69d9      	ldr	r1, [r3, #28]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	61da      	str	r2, [r3, #28]
      break;
 8005d0c:	e064      	b.n	8005dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68b9      	ldr	r1, [r7, #8]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 fba1 	bl	800645c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69da      	ldr	r2, [r3, #28]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69da      	ldr	r2, [r3, #28]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69d9      	ldr	r1, [r3, #28]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	021a      	lsls	r2, r3, #8
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	61da      	str	r2, [r3, #28]
      break;
 8005d4e:	e043      	b.n	8005dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68b9      	ldr	r1, [r7, #8]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fbea 	bl	8006530 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0208 	orr.w	r2, r2, #8
 8005d6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0204 	bic.w	r2, r2, #4
 8005d7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d8e:	e023      	b.n	8005dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 fc2e 	bl	80065f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005daa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	021a      	lsls	r2, r3, #8
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005dd0:	e002      	b.n	8005dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8005dd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop

08005dec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_TIM_ConfigClockSource+0x1c>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e0b6      	b.n	8005f76 <HAL_TIM_ConfigClockSource+0x18a>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e44:	d03e      	beq.n	8005ec4 <HAL_TIM_ConfigClockSource+0xd8>
 8005e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e4a:	f200 8087 	bhi.w	8005f5c <HAL_TIM_ConfigClockSource+0x170>
 8005e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e52:	f000 8086 	beq.w	8005f62 <HAL_TIM_ConfigClockSource+0x176>
 8005e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e5a:	d87f      	bhi.n	8005f5c <HAL_TIM_ConfigClockSource+0x170>
 8005e5c:	2b70      	cmp	r3, #112	; 0x70
 8005e5e:	d01a      	beq.n	8005e96 <HAL_TIM_ConfigClockSource+0xaa>
 8005e60:	2b70      	cmp	r3, #112	; 0x70
 8005e62:	d87b      	bhi.n	8005f5c <HAL_TIM_ConfigClockSource+0x170>
 8005e64:	2b60      	cmp	r3, #96	; 0x60
 8005e66:	d050      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x11e>
 8005e68:	2b60      	cmp	r3, #96	; 0x60
 8005e6a:	d877      	bhi.n	8005f5c <HAL_TIM_ConfigClockSource+0x170>
 8005e6c:	2b50      	cmp	r3, #80	; 0x50
 8005e6e:	d03c      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0xfe>
 8005e70:	2b50      	cmp	r3, #80	; 0x50
 8005e72:	d873      	bhi.n	8005f5c <HAL_TIM_ConfigClockSource+0x170>
 8005e74:	2b40      	cmp	r3, #64	; 0x40
 8005e76:	d058      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x13e>
 8005e78:	2b40      	cmp	r3, #64	; 0x40
 8005e7a:	d86f      	bhi.n	8005f5c <HAL_TIM_ConfigClockSource+0x170>
 8005e7c:	2b30      	cmp	r3, #48	; 0x30
 8005e7e:	d064      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0x15e>
 8005e80:	2b30      	cmp	r3, #48	; 0x30
 8005e82:	d86b      	bhi.n	8005f5c <HAL_TIM_ConfigClockSource+0x170>
 8005e84:	2b20      	cmp	r3, #32
 8005e86:	d060      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0x15e>
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	d867      	bhi.n	8005f5c <HAL_TIM_ConfigClockSource+0x170>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d05c      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0x15e>
 8005e90:	2b10      	cmp	r3, #16
 8005e92:	d05a      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0x15e>
 8005e94:	e062      	b.n	8005f5c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	6899      	ldr	r1, [r3, #8]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f000 fdab 	bl	8006a00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005eb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	609a      	str	r2, [r3, #8]
      break;
 8005ec2:	e04f      	b.n	8005f64 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6818      	ldr	r0, [r3, #0]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	6899      	ldr	r1, [r3, #8]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f000 fd94 	bl	8006a00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ee6:	609a      	str	r2, [r3, #8]
      break;
 8005ee8:	e03c      	b.n	8005f64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6818      	ldr	r0, [r3, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	6859      	ldr	r1, [r3, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f000 fc52 	bl	80067a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2150      	movs	r1, #80	; 0x50
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fd61 	bl	80069ca <TIM_ITRx_SetConfig>
      break;
 8005f08:	e02c      	b.n	8005f64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6818      	ldr	r0, [r3, #0]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	6859      	ldr	r1, [r3, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	461a      	mov	r2, r3
 8005f18:	f000 fcae 	bl	8006878 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2160      	movs	r1, #96	; 0x60
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fd51 	bl	80069ca <TIM_ITRx_SetConfig>
      break;
 8005f28:	e01c      	b.n	8005f64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	6859      	ldr	r1, [r3, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	461a      	mov	r2, r3
 8005f38:	f000 fc32 	bl	80067a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2140      	movs	r1, #64	; 0x40
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 fd41 	bl	80069ca <TIM_ITRx_SetConfig>
      break;
 8005f48:	e00c      	b.n	8005f64 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4619      	mov	r1, r3
 8005f54:	4610      	mov	r0, r2
 8005f56:	f000 fd38 	bl	80069ca <TIM_ITRx_SetConfig>
      break;
 8005f5a:	e003      	b.n	8005f64 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f60:	e000      	b.n	8005f64 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fc2:	bf00      	nop
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b083      	sub	sp, #12
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
	...

08005fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a40      	ldr	r2, [pc, #256]	; (80060f8 <TIM_Base_SetConfig+0x114>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d013      	beq.n	8006024 <TIM_Base_SetConfig+0x40>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006002:	d00f      	beq.n	8006024 <TIM_Base_SetConfig+0x40>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a3d      	ldr	r2, [pc, #244]	; (80060fc <TIM_Base_SetConfig+0x118>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d00b      	beq.n	8006024 <TIM_Base_SetConfig+0x40>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a3c      	ldr	r2, [pc, #240]	; (8006100 <TIM_Base_SetConfig+0x11c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d007      	beq.n	8006024 <TIM_Base_SetConfig+0x40>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a3b      	ldr	r2, [pc, #236]	; (8006104 <TIM_Base_SetConfig+0x120>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d003      	beq.n	8006024 <TIM_Base_SetConfig+0x40>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a3a      	ldr	r2, [pc, #232]	; (8006108 <TIM_Base_SetConfig+0x124>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d108      	bne.n	8006036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a2f      	ldr	r2, [pc, #188]	; (80060f8 <TIM_Base_SetConfig+0x114>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d01f      	beq.n	800607e <TIM_Base_SetConfig+0x9a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006044:	d01b      	beq.n	800607e <TIM_Base_SetConfig+0x9a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a2c      	ldr	r2, [pc, #176]	; (80060fc <TIM_Base_SetConfig+0x118>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d017      	beq.n	800607e <TIM_Base_SetConfig+0x9a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a2b      	ldr	r2, [pc, #172]	; (8006100 <TIM_Base_SetConfig+0x11c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d013      	beq.n	800607e <TIM_Base_SetConfig+0x9a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a2a      	ldr	r2, [pc, #168]	; (8006104 <TIM_Base_SetConfig+0x120>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00f      	beq.n	800607e <TIM_Base_SetConfig+0x9a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a29      	ldr	r2, [pc, #164]	; (8006108 <TIM_Base_SetConfig+0x124>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00b      	beq.n	800607e <TIM_Base_SetConfig+0x9a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a28      	ldr	r2, [pc, #160]	; (800610c <TIM_Base_SetConfig+0x128>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d007      	beq.n	800607e <TIM_Base_SetConfig+0x9a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a27      	ldr	r2, [pc, #156]	; (8006110 <TIM_Base_SetConfig+0x12c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d003      	beq.n	800607e <TIM_Base_SetConfig+0x9a>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a26      	ldr	r2, [pc, #152]	; (8006114 <TIM_Base_SetConfig+0x130>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d108      	bne.n	8006090 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	4313      	orrs	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a10      	ldr	r2, [pc, #64]	; (80060f8 <TIM_Base_SetConfig+0x114>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00f      	beq.n	80060dc <TIM_Base_SetConfig+0xf8>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a12      	ldr	r2, [pc, #72]	; (8006108 <TIM_Base_SetConfig+0x124>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00b      	beq.n	80060dc <TIM_Base_SetConfig+0xf8>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a11      	ldr	r2, [pc, #68]	; (800610c <TIM_Base_SetConfig+0x128>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d007      	beq.n	80060dc <TIM_Base_SetConfig+0xf8>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a10      	ldr	r2, [pc, #64]	; (8006110 <TIM_Base_SetConfig+0x12c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d003      	beq.n	80060dc <TIM_Base_SetConfig+0xf8>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a0f      	ldr	r2, [pc, #60]	; (8006114 <TIM_Base_SetConfig+0x130>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d103      	bne.n	80060e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	691a      	ldr	r2, [r3, #16]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	615a      	str	r2, [r3, #20]
}
 80060ea:	bf00      	nop
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	40012c00 	.word	0x40012c00
 80060fc:	40000400 	.word	0x40000400
 8006100:	40000800 	.word	0x40000800
 8006104:	40000c00 	.word	0x40000c00
 8006108:	40013400 	.word	0x40013400
 800610c:	40014000 	.word	0x40014000
 8006110:	40014400 	.word	0x40014400
 8006114:	40014800 	.word	0x40014800

08006118 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	f023 0201 	bic.w	r2, r3, #1
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 0303 	bic.w	r3, r3, #3
 8006152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f023 0302 	bic.w	r3, r3, #2
 8006164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a2c      	ldr	r2, [pc, #176]	; (8006224 <TIM_OC1_SetConfig+0x10c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d00f      	beq.n	8006198 <TIM_OC1_SetConfig+0x80>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a2b      	ldr	r2, [pc, #172]	; (8006228 <TIM_OC1_SetConfig+0x110>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00b      	beq.n	8006198 <TIM_OC1_SetConfig+0x80>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a2a      	ldr	r2, [pc, #168]	; (800622c <TIM_OC1_SetConfig+0x114>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d007      	beq.n	8006198 <TIM_OC1_SetConfig+0x80>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a29      	ldr	r2, [pc, #164]	; (8006230 <TIM_OC1_SetConfig+0x118>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d003      	beq.n	8006198 <TIM_OC1_SetConfig+0x80>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a28      	ldr	r2, [pc, #160]	; (8006234 <TIM_OC1_SetConfig+0x11c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d10c      	bne.n	80061b2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f023 0308 	bic.w	r3, r3, #8
 800619e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f023 0304 	bic.w	r3, r3, #4
 80061b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a1b      	ldr	r2, [pc, #108]	; (8006224 <TIM_OC1_SetConfig+0x10c>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00f      	beq.n	80061da <TIM_OC1_SetConfig+0xc2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a1a      	ldr	r2, [pc, #104]	; (8006228 <TIM_OC1_SetConfig+0x110>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00b      	beq.n	80061da <TIM_OC1_SetConfig+0xc2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a19      	ldr	r2, [pc, #100]	; (800622c <TIM_OC1_SetConfig+0x114>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d007      	beq.n	80061da <TIM_OC1_SetConfig+0xc2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a18      	ldr	r2, [pc, #96]	; (8006230 <TIM_OC1_SetConfig+0x118>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d003      	beq.n	80061da <TIM_OC1_SetConfig+0xc2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a17      	ldr	r2, [pc, #92]	; (8006234 <TIM_OC1_SetConfig+0x11c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d111      	bne.n	80061fe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	621a      	str	r2, [r3, #32]
}
 8006218:	bf00      	nop
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	40012c00 	.word	0x40012c00
 8006228:	40013400 	.word	0x40013400
 800622c:	40014000 	.word	0x40014000
 8006230:	40014400 	.word	0x40014400
 8006234:	40014800 	.word	0x40014800

08006238 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	f023 0210 	bic.w	r2, r3, #16
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	021b      	lsls	r3, r3, #8
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	4313      	orrs	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f023 0320 	bic.w	r3, r3, #32
 8006286:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a28      	ldr	r2, [pc, #160]	; (8006338 <TIM_OC2_SetConfig+0x100>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d003      	beq.n	80062a4 <TIM_OC2_SetConfig+0x6c>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a27      	ldr	r2, [pc, #156]	; (800633c <TIM_OC2_SetConfig+0x104>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d10d      	bne.n	80062c0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	011b      	lsls	r3, r3, #4
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a1d      	ldr	r2, [pc, #116]	; (8006338 <TIM_OC2_SetConfig+0x100>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d00f      	beq.n	80062e8 <TIM_OC2_SetConfig+0xb0>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a1c      	ldr	r2, [pc, #112]	; (800633c <TIM_OC2_SetConfig+0x104>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d00b      	beq.n	80062e8 <TIM_OC2_SetConfig+0xb0>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a1b      	ldr	r2, [pc, #108]	; (8006340 <TIM_OC2_SetConfig+0x108>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d007      	beq.n	80062e8 <TIM_OC2_SetConfig+0xb0>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a1a      	ldr	r2, [pc, #104]	; (8006344 <TIM_OC2_SetConfig+0x10c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d003      	beq.n	80062e8 <TIM_OC2_SetConfig+0xb0>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a19      	ldr	r2, [pc, #100]	; (8006348 <TIM_OC2_SetConfig+0x110>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d113      	bne.n	8006310 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	4313      	orrs	r3, r2
 8006302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	621a      	str	r2, [r3, #32]
}
 800632a:	bf00      	nop
 800632c:	371c      	adds	r7, #28
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	40012c00 	.word	0x40012c00
 800633c:	40013400 	.word	0x40013400
 8006340:	40014000 	.word	0x40014000
 8006344:	40014400 	.word	0x40014400
 8006348:	40014800 	.word	0x40014800

0800634c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800637a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0303 	bic.w	r3, r3, #3
 8006386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	4313      	orrs	r3, r2
 8006390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	021b      	lsls	r3, r3, #8
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a27      	ldr	r2, [pc, #156]	; (8006448 <TIM_OC3_SetConfig+0xfc>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d003      	beq.n	80063b6 <TIM_OC3_SetConfig+0x6a>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a26      	ldr	r2, [pc, #152]	; (800644c <TIM_OC3_SetConfig+0x100>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d10d      	bne.n	80063d2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	021b      	lsls	r3, r3, #8
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a1c      	ldr	r2, [pc, #112]	; (8006448 <TIM_OC3_SetConfig+0xfc>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00f      	beq.n	80063fa <TIM_OC3_SetConfig+0xae>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a1b      	ldr	r2, [pc, #108]	; (800644c <TIM_OC3_SetConfig+0x100>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00b      	beq.n	80063fa <TIM_OC3_SetConfig+0xae>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a1a      	ldr	r2, [pc, #104]	; (8006450 <TIM_OC3_SetConfig+0x104>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d007      	beq.n	80063fa <TIM_OC3_SetConfig+0xae>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a19      	ldr	r2, [pc, #100]	; (8006454 <TIM_OC3_SetConfig+0x108>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d003      	beq.n	80063fa <TIM_OC3_SetConfig+0xae>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a18      	ldr	r2, [pc, #96]	; (8006458 <TIM_OC3_SetConfig+0x10c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d113      	bne.n	8006422 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	4313      	orrs	r3, r2
 8006414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	4313      	orrs	r3, r2
 8006420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	621a      	str	r2, [r3, #32]
}
 800643c:	bf00      	nop
 800643e:	371c      	adds	r7, #28
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	40012c00 	.word	0x40012c00
 800644c:	40013400 	.word	0x40013400
 8006450:	40014000 	.word	0x40014000
 8006454:	40014400 	.word	0x40014400
 8006458:	40014800 	.word	0x40014800

0800645c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800648a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800648e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	021b      	lsls	r3, r3, #8
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	031b      	lsls	r3, r3, #12
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a18      	ldr	r2, [pc, #96]	; (800651c <TIM_OC4_SetConfig+0xc0>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00f      	beq.n	80064e0 <TIM_OC4_SetConfig+0x84>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a17      	ldr	r2, [pc, #92]	; (8006520 <TIM_OC4_SetConfig+0xc4>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d00b      	beq.n	80064e0 <TIM_OC4_SetConfig+0x84>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a16      	ldr	r2, [pc, #88]	; (8006524 <TIM_OC4_SetConfig+0xc8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d007      	beq.n	80064e0 <TIM_OC4_SetConfig+0x84>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a15      	ldr	r2, [pc, #84]	; (8006528 <TIM_OC4_SetConfig+0xcc>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d003      	beq.n	80064e0 <TIM_OC4_SetConfig+0x84>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a14      	ldr	r2, [pc, #80]	; (800652c <TIM_OC4_SetConfig+0xd0>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d109      	bne.n	80064f4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	019b      	lsls	r3, r3, #6
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	621a      	str	r2, [r3, #32]
}
 800650e:	bf00      	nop
 8006510:	371c      	adds	r7, #28
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	40012c00 	.word	0x40012c00
 8006520:	40013400 	.word	0x40013400
 8006524:	40014000 	.word	0x40014000
 8006528:	40014400 	.word	0x40014400
 800652c:	40014800 	.word	0x40014800

08006530 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006530:	b480      	push	{r7}
 8006532:	b087      	sub	sp, #28
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800655e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006574:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	041b      	lsls	r3, r3, #16
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	4313      	orrs	r3, r2
 8006580:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a17      	ldr	r2, [pc, #92]	; (80065e4 <TIM_OC5_SetConfig+0xb4>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00f      	beq.n	80065aa <TIM_OC5_SetConfig+0x7a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a16      	ldr	r2, [pc, #88]	; (80065e8 <TIM_OC5_SetConfig+0xb8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00b      	beq.n	80065aa <TIM_OC5_SetConfig+0x7a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a15      	ldr	r2, [pc, #84]	; (80065ec <TIM_OC5_SetConfig+0xbc>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d007      	beq.n	80065aa <TIM_OC5_SetConfig+0x7a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a14      	ldr	r2, [pc, #80]	; (80065f0 <TIM_OC5_SetConfig+0xc0>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d003      	beq.n	80065aa <TIM_OC5_SetConfig+0x7a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a13      	ldr	r2, [pc, #76]	; (80065f4 <TIM_OC5_SetConfig+0xc4>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d109      	bne.n	80065be <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	621a      	str	r2, [r3, #32]
}
 80065d8:	bf00      	nop
 80065da:	371c      	adds	r7, #28
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	40012c00 	.word	0x40012c00
 80065e8:	40013400 	.word	0x40013400
 80065ec:	40014000 	.word	0x40014000
 80065f0:	40014400 	.word	0x40014400
 80065f4:	40014800 	.word	0x40014800

080065f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800662a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	021b      	lsls	r3, r3, #8
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	4313      	orrs	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800663e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	051b      	lsls	r3, r3, #20
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	4313      	orrs	r3, r2
 800664a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a18      	ldr	r2, [pc, #96]	; (80066b0 <TIM_OC6_SetConfig+0xb8>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d00f      	beq.n	8006674 <TIM_OC6_SetConfig+0x7c>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a17      	ldr	r2, [pc, #92]	; (80066b4 <TIM_OC6_SetConfig+0xbc>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d00b      	beq.n	8006674 <TIM_OC6_SetConfig+0x7c>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a16      	ldr	r2, [pc, #88]	; (80066b8 <TIM_OC6_SetConfig+0xc0>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d007      	beq.n	8006674 <TIM_OC6_SetConfig+0x7c>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a15      	ldr	r2, [pc, #84]	; (80066bc <TIM_OC6_SetConfig+0xc4>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d003      	beq.n	8006674 <TIM_OC6_SetConfig+0x7c>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a14      	ldr	r2, [pc, #80]	; (80066c0 <TIM_OC6_SetConfig+0xc8>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d109      	bne.n	8006688 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800667a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	029b      	lsls	r3, r3, #10
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	621a      	str	r2, [r3, #32]
}
 80066a2:	bf00      	nop
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	40012c00 	.word	0x40012c00
 80066b4:	40013400 	.word	0x40013400
 80066b8:	40014000 	.word	0x40014000
 80066bc:	40014400 	.word	0x40014400
 80066c0:	40014800 	.word	0x40014800

080066c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	f023 0201 	bic.w	r2, r3, #1
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4a26      	ldr	r2, [pc, #152]	; (8006788 <TIM_TI1_SetConfig+0xc4>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d017      	beq.n	8006722 <TIM_TI1_SetConfig+0x5e>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f8:	d013      	beq.n	8006722 <TIM_TI1_SetConfig+0x5e>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4a23      	ldr	r2, [pc, #140]	; (800678c <TIM_TI1_SetConfig+0xc8>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d00f      	beq.n	8006722 <TIM_TI1_SetConfig+0x5e>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4a22      	ldr	r2, [pc, #136]	; (8006790 <TIM_TI1_SetConfig+0xcc>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00b      	beq.n	8006722 <TIM_TI1_SetConfig+0x5e>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4a21      	ldr	r2, [pc, #132]	; (8006794 <TIM_TI1_SetConfig+0xd0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d007      	beq.n	8006722 <TIM_TI1_SetConfig+0x5e>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4a20      	ldr	r2, [pc, #128]	; (8006798 <TIM_TI1_SetConfig+0xd4>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d003      	beq.n	8006722 <TIM_TI1_SetConfig+0x5e>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	4a1f      	ldr	r2, [pc, #124]	; (800679c <TIM_TI1_SetConfig+0xd8>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d101      	bne.n	8006726 <TIM_TI1_SetConfig+0x62>
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <TIM_TI1_SetConfig+0x64>
 8006726:	2300      	movs	r3, #0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d008      	beq.n	800673e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f023 0303 	bic.w	r3, r3, #3
 8006732:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4313      	orrs	r3, r2
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	e003      	b.n	8006746 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f043 0301 	orr.w	r3, r3, #1
 8006744:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800674c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	011b      	lsls	r3, r3, #4
 8006752:	b2db      	uxtb	r3, r3
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	4313      	orrs	r3, r2
 8006758:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f023 030a 	bic.w	r3, r3, #10
 8006760:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	f003 030a 	and.w	r3, r3, #10
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	4313      	orrs	r3, r2
 800676c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	621a      	str	r2, [r3, #32]
}
 800677a:	bf00      	nop
 800677c:	371c      	adds	r7, #28
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	40012c00 	.word	0x40012c00
 800678c:	40000400 	.word	0x40000400
 8006790:	40000800 	.word	0x40000800
 8006794:	40000c00 	.word	0x40000c00
 8006798:	40013400 	.word	0x40013400
 800679c:	40014000 	.word	0x40014000

080067a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	f023 0201 	bic.w	r2, r3, #1
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f023 030a 	bic.w	r3, r3, #10
 80067dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	621a      	str	r2, [r3, #32]
}
 80067f2:	bf00      	nop
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067fe:	b480      	push	{r7}
 8006800:	b087      	sub	sp, #28
 8006802:	af00      	add	r7, sp, #0
 8006804:	60f8      	str	r0, [r7, #12]
 8006806:	60b9      	str	r1, [r7, #8]
 8006808:	607a      	str	r2, [r7, #4]
 800680a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	f023 0210 	bic.w	r2, r3, #16
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800682a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	021b      	lsls	r3, r3, #8
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800683c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	031b      	lsls	r3, r3, #12
 8006842:	b29b      	uxth	r3, r3
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	4313      	orrs	r3, r2
 8006848:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006850:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	4313      	orrs	r3, r2
 800685e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	621a      	str	r2, [r3, #32]
}
 800686c:	bf00      	nop
 800686e:	371c      	adds	r7, #28
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	f023 0210 	bic.w	r2, r3, #16
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	031b      	lsls	r3, r3, #12
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	011b      	lsls	r3, r3, #4
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	4313      	orrs	r3, r2
 80068be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	621a      	str	r2, [r3, #32]
}
 80068cc:	bf00      	nop
 80068ce:	371c      	adds	r7, #28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f023 0303 	bic.w	r3, r3, #3
 8006904:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4313      	orrs	r3, r2
 800690c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006914:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	011b      	lsls	r3, r3, #4
 800691a:	b2db      	uxtb	r3, r3
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	4313      	orrs	r3, r2
 8006920:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006928:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	021b      	lsls	r3, r3, #8
 800692e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	4313      	orrs	r3, r2
 8006936:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	621a      	str	r2, [r3, #32]
}
 8006944:	bf00      	nop
 8006946:	371c      	adds	r7, #28
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800697c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	021b      	lsls	r3, r3, #8
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	4313      	orrs	r3, r2
 8006986:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800698e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	031b      	lsls	r3, r3, #12
 8006994:	b29b      	uxth	r3, r3
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	4313      	orrs	r3, r2
 800699a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80069a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	031b      	lsls	r3, r3, #12
 80069a8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	621a      	str	r2, [r3, #32]
}
 80069be:	bf00      	nop
 80069c0:	371c      	adds	r7, #28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b085      	sub	sp, #20
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	f043 0307 	orr.w	r3, r3, #7
 80069ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	609a      	str	r2, [r3, #8]
}
 80069f4:	bf00      	nop
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	021a      	lsls	r2, r3, #8
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	431a      	orrs	r2, r3
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	609a      	str	r2, [r3, #8]
}
 8006a34:	bf00      	nop
 8006a36:	371c      	adds	r7, #28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f003 031f 	and.w	r3, r3, #31
 8006a52:	2201      	movs	r2, #1
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6a1a      	ldr	r2, [r3, #32]
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	43db      	mvns	r3, r3
 8006a62:	401a      	ands	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a1a      	ldr	r2, [r3, #32]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f003 031f 	and.w	r3, r3, #31
 8006a72:	6879      	ldr	r1, [r7, #4]
 8006a74:	fa01 f303 	lsl.w	r3, r1, r3
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	621a      	str	r2, [r3, #32]
}
 8006a7e:	bf00      	nop
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
	...

08006a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d101      	bne.n	8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e068      	b.n	8006b76 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a2e      	ldr	r2, [pc, #184]	; (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d004      	beq.n	8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a2d      	ldr	r2, [pc, #180]	; (8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d108      	bne.n	8006aea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ade:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a1e      	ldr	r2, [pc, #120]	; (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d01d      	beq.n	8006b4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b16:	d018      	beq.n	8006b4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a1b      	ldr	r2, [pc, #108]	; (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d013      	beq.n	8006b4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a1a      	ldr	r2, [pc, #104]	; (8006b90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d00e      	beq.n	8006b4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a18      	ldr	r2, [pc, #96]	; (8006b94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d009      	beq.n	8006b4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a13      	ldr	r2, [pc, #76]	; (8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d004      	beq.n	8006b4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a14      	ldr	r2, [pc, #80]	; (8006b98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d10c      	bne.n	8006b64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	40012c00 	.word	0x40012c00
 8006b88:	40013400 	.word	0x40013400
 8006b8c:	40000400 	.word	0x40000400
 8006b90:	40000800 	.word	0x40000800
 8006b94:	40000c00 	.word	0x40000c00
 8006b98:	40014000 	.word	0x40014000

08006b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e042      	b.n	8006c70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d106      	bne.n	8006c02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7fb fb0f 	bl	8002220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2224      	movs	r2, #36	; 0x24
 8006c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0201 	bic.w	r2, r2, #1
 8006c18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f8c4 	bl	8006da8 <UART_SetConfig>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d101      	bne.n	8006c2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e022      	b.n	8006c70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fbb4 	bl	80073a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689a      	ldr	r2, [r3, #8]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 0201 	orr.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fc3b 	bl	80074e4 <UART_CheckIdleState>
 8006c6e:	4603      	mov	r3, r0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b08a      	sub	sp, #40	; 0x28
 8006c7c:	af02      	add	r7, sp, #8
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	603b      	str	r3, [r7, #0]
 8006c84:	4613      	mov	r3, r2
 8006c86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c8e:	2b20      	cmp	r3, #32
 8006c90:	f040 8084 	bne.w	8006d9c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <HAL_UART_Transmit+0x28>
 8006c9a:	88fb      	ldrh	r3, [r7, #6]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e07c      	b.n	8006d9e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d101      	bne.n	8006cb2 <HAL_UART_Transmit+0x3a>
 8006cae:	2302      	movs	r3, #2
 8006cb0:	e075      	b.n	8006d9e <HAL_UART_Transmit+0x126>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2221      	movs	r2, #33	; 0x21
 8006cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cca:	f7fb fe5b 	bl	8002984 <HAL_GetTick>
 8006cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	88fa      	ldrh	r2, [r7, #6]
 8006cd4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	88fa      	ldrh	r2, [r7, #6]
 8006cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ce8:	d108      	bne.n	8006cfc <HAL_UART_Transmit+0x84>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d104      	bne.n	8006cfc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	61bb      	str	r3, [r7, #24]
 8006cfa:	e003      	b.n	8006d04 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d00:	2300      	movs	r3, #0
 8006d02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006d0c:	e02d      	b.n	8006d6a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2200      	movs	r2, #0
 8006d16:	2180      	movs	r1, #128	; 0x80
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 fc2e 	bl	800757a <UART_WaitOnFlagUntilTimeout>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e03a      	b.n	8006d9e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10b      	bne.n	8006d46 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	881a      	ldrh	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d3a:	b292      	uxth	r2, r2
 8006d3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	3302      	adds	r3, #2
 8006d42:	61bb      	str	r3, [r7, #24]
 8006d44:	e008      	b.n	8006d58 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	781a      	ldrb	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	b292      	uxth	r2, r2
 8006d50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	3301      	adds	r3, #1
 8006d56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	3b01      	subs	r3, #1
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1cb      	bne.n	8006d0e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2140      	movs	r1, #64	; 0x40
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 fbfa 	bl	800757a <UART_WaitOnFlagUntilTimeout>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d001      	beq.n	8006d90 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e006      	b.n	8006d9e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2220      	movs	r2, #32
 8006d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	e000      	b.n	8006d9e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006d9c:	2302      	movs	r3, #2
  }
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3720      	adds	r7, #32
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
	...

08006da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dac:	b08c      	sub	sp, #48	; 0x30
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	689a      	ldr	r2, [r3, #8]
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	4baa      	ldr	r3, [pc, #680]	; (8007080 <UART_SetConfig+0x2d8>)
 8006dd8:	4013      	ands	r3, r2
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	6812      	ldr	r2, [r2, #0]
 8006dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006de0:	430b      	orrs	r3, r1
 8006de2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a9f      	ldr	r2, [pc, #636]	; (8007084 <UART_SetConfig+0x2dc>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d004      	beq.n	8006e14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e10:	4313      	orrs	r3, r2
 8006e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006e1e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	6812      	ldr	r2, [r2, #0]
 8006e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e28:	430b      	orrs	r3, r1
 8006e2a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e32:	f023 010f 	bic.w	r1, r3, #15
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a90      	ldr	r2, [pc, #576]	; (8007088 <UART_SetConfig+0x2e0>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d125      	bne.n	8006e98 <UART_SetConfig+0xf0>
 8006e4c:	4b8f      	ldr	r3, [pc, #572]	; (800708c <UART_SetConfig+0x2e4>)
 8006e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e52:	f003 0303 	and.w	r3, r3, #3
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d81a      	bhi.n	8006e90 <UART_SetConfig+0xe8>
 8006e5a:	a201      	add	r2, pc, #4	; (adr r2, 8006e60 <UART_SetConfig+0xb8>)
 8006e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e60:	08006e71 	.word	0x08006e71
 8006e64:	08006e81 	.word	0x08006e81
 8006e68:	08006e79 	.word	0x08006e79
 8006e6c:	08006e89 	.word	0x08006e89
 8006e70:	2301      	movs	r3, #1
 8006e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e76:	e116      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e7e:	e112      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006e80:	2304      	movs	r3, #4
 8006e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e86:	e10e      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006e88:	2308      	movs	r3, #8
 8006e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e8e:	e10a      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006e90:	2310      	movs	r3, #16
 8006e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e96:	e106      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a7c      	ldr	r2, [pc, #496]	; (8007090 <UART_SetConfig+0x2e8>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d138      	bne.n	8006f14 <UART_SetConfig+0x16c>
 8006ea2:	4b7a      	ldr	r3, [pc, #488]	; (800708c <UART_SetConfig+0x2e4>)
 8006ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea8:	f003 030c 	and.w	r3, r3, #12
 8006eac:	2b0c      	cmp	r3, #12
 8006eae:	d82d      	bhi.n	8006f0c <UART_SetConfig+0x164>
 8006eb0:	a201      	add	r2, pc, #4	; (adr r2, 8006eb8 <UART_SetConfig+0x110>)
 8006eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb6:	bf00      	nop
 8006eb8:	08006eed 	.word	0x08006eed
 8006ebc:	08006f0d 	.word	0x08006f0d
 8006ec0:	08006f0d 	.word	0x08006f0d
 8006ec4:	08006f0d 	.word	0x08006f0d
 8006ec8:	08006efd 	.word	0x08006efd
 8006ecc:	08006f0d 	.word	0x08006f0d
 8006ed0:	08006f0d 	.word	0x08006f0d
 8006ed4:	08006f0d 	.word	0x08006f0d
 8006ed8:	08006ef5 	.word	0x08006ef5
 8006edc:	08006f0d 	.word	0x08006f0d
 8006ee0:	08006f0d 	.word	0x08006f0d
 8006ee4:	08006f0d 	.word	0x08006f0d
 8006ee8:	08006f05 	.word	0x08006f05
 8006eec:	2300      	movs	r3, #0
 8006eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ef2:	e0d8      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006efa:	e0d4      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006efc:	2304      	movs	r3, #4
 8006efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f02:	e0d0      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006f04:	2308      	movs	r3, #8
 8006f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f0a:	e0cc      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006f0c:	2310      	movs	r3, #16
 8006f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f12:	e0c8      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a5e      	ldr	r2, [pc, #376]	; (8007094 <UART_SetConfig+0x2ec>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d125      	bne.n	8006f6a <UART_SetConfig+0x1c2>
 8006f1e:	4b5b      	ldr	r3, [pc, #364]	; (800708c <UART_SetConfig+0x2e4>)
 8006f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f28:	2b30      	cmp	r3, #48	; 0x30
 8006f2a:	d016      	beq.n	8006f5a <UART_SetConfig+0x1b2>
 8006f2c:	2b30      	cmp	r3, #48	; 0x30
 8006f2e:	d818      	bhi.n	8006f62 <UART_SetConfig+0x1ba>
 8006f30:	2b20      	cmp	r3, #32
 8006f32:	d00a      	beq.n	8006f4a <UART_SetConfig+0x1a2>
 8006f34:	2b20      	cmp	r3, #32
 8006f36:	d814      	bhi.n	8006f62 <UART_SetConfig+0x1ba>
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <UART_SetConfig+0x19a>
 8006f3c:	2b10      	cmp	r3, #16
 8006f3e:	d008      	beq.n	8006f52 <UART_SetConfig+0x1aa>
 8006f40:	e00f      	b.n	8006f62 <UART_SetConfig+0x1ba>
 8006f42:	2300      	movs	r3, #0
 8006f44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f48:	e0ad      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f50:	e0a9      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006f52:	2304      	movs	r3, #4
 8006f54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f58:	e0a5      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006f5a:	2308      	movs	r3, #8
 8006f5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f60:	e0a1      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006f62:	2310      	movs	r3, #16
 8006f64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f68:	e09d      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a4a      	ldr	r2, [pc, #296]	; (8007098 <UART_SetConfig+0x2f0>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d125      	bne.n	8006fc0 <UART_SetConfig+0x218>
 8006f74:	4b45      	ldr	r3, [pc, #276]	; (800708c <UART_SetConfig+0x2e4>)
 8006f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f7e:	2bc0      	cmp	r3, #192	; 0xc0
 8006f80:	d016      	beq.n	8006fb0 <UART_SetConfig+0x208>
 8006f82:	2bc0      	cmp	r3, #192	; 0xc0
 8006f84:	d818      	bhi.n	8006fb8 <UART_SetConfig+0x210>
 8006f86:	2b80      	cmp	r3, #128	; 0x80
 8006f88:	d00a      	beq.n	8006fa0 <UART_SetConfig+0x1f8>
 8006f8a:	2b80      	cmp	r3, #128	; 0x80
 8006f8c:	d814      	bhi.n	8006fb8 <UART_SetConfig+0x210>
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <UART_SetConfig+0x1f0>
 8006f92:	2b40      	cmp	r3, #64	; 0x40
 8006f94:	d008      	beq.n	8006fa8 <UART_SetConfig+0x200>
 8006f96:	e00f      	b.n	8006fb8 <UART_SetConfig+0x210>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f9e:	e082      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fa6:	e07e      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006fa8:	2304      	movs	r3, #4
 8006faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fae:	e07a      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006fb0:	2308      	movs	r3, #8
 8006fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fb6:	e076      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006fb8:	2310      	movs	r3, #16
 8006fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fbe:	e072      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a35      	ldr	r2, [pc, #212]	; (800709c <UART_SetConfig+0x2f4>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d12a      	bne.n	8007020 <UART_SetConfig+0x278>
 8006fca:	4b30      	ldr	r3, [pc, #192]	; (800708c <UART_SetConfig+0x2e4>)
 8006fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fd8:	d01a      	beq.n	8007010 <UART_SetConfig+0x268>
 8006fda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fde:	d81b      	bhi.n	8007018 <UART_SetConfig+0x270>
 8006fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fe4:	d00c      	beq.n	8007000 <UART_SetConfig+0x258>
 8006fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fea:	d815      	bhi.n	8007018 <UART_SetConfig+0x270>
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <UART_SetConfig+0x250>
 8006ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff4:	d008      	beq.n	8007008 <UART_SetConfig+0x260>
 8006ff6:	e00f      	b.n	8007018 <UART_SetConfig+0x270>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ffe:	e052      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8007000:	2302      	movs	r3, #2
 8007002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007006:	e04e      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8007008:	2304      	movs	r3, #4
 800700a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800700e:	e04a      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8007010:	2308      	movs	r3, #8
 8007012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007016:	e046      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8007018:	2310      	movs	r3, #16
 800701a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800701e:	e042      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a17      	ldr	r2, [pc, #92]	; (8007084 <UART_SetConfig+0x2dc>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d13a      	bne.n	80070a0 <UART_SetConfig+0x2f8>
 800702a:	4b18      	ldr	r3, [pc, #96]	; (800708c <UART_SetConfig+0x2e4>)
 800702c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007030:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007034:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007038:	d01a      	beq.n	8007070 <UART_SetConfig+0x2c8>
 800703a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800703e:	d81b      	bhi.n	8007078 <UART_SetConfig+0x2d0>
 8007040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007044:	d00c      	beq.n	8007060 <UART_SetConfig+0x2b8>
 8007046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800704a:	d815      	bhi.n	8007078 <UART_SetConfig+0x2d0>
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <UART_SetConfig+0x2b0>
 8007050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007054:	d008      	beq.n	8007068 <UART_SetConfig+0x2c0>
 8007056:	e00f      	b.n	8007078 <UART_SetConfig+0x2d0>
 8007058:	2300      	movs	r3, #0
 800705a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800705e:	e022      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8007060:	2302      	movs	r3, #2
 8007062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007066:	e01e      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8007068:	2304      	movs	r3, #4
 800706a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800706e:	e01a      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8007070:	2308      	movs	r3, #8
 8007072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007076:	e016      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8007078:	2310      	movs	r3, #16
 800707a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800707e:	e012      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8007080:	cfff69f3 	.word	0xcfff69f3
 8007084:	40008000 	.word	0x40008000
 8007088:	40013800 	.word	0x40013800
 800708c:	40021000 	.word	0x40021000
 8007090:	40004400 	.word	0x40004400
 8007094:	40004800 	.word	0x40004800
 8007098:	40004c00 	.word	0x40004c00
 800709c:	40005000 	.word	0x40005000
 80070a0:	2310      	movs	r3, #16
 80070a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4aae      	ldr	r2, [pc, #696]	; (8007364 <UART_SetConfig+0x5bc>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	f040 8097 	bne.w	80071e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070b6:	2b08      	cmp	r3, #8
 80070b8:	d823      	bhi.n	8007102 <UART_SetConfig+0x35a>
 80070ba:	a201      	add	r2, pc, #4	; (adr r2, 80070c0 <UART_SetConfig+0x318>)
 80070bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c0:	080070e5 	.word	0x080070e5
 80070c4:	08007103 	.word	0x08007103
 80070c8:	080070ed 	.word	0x080070ed
 80070cc:	08007103 	.word	0x08007103
 80070d0:	080070f3 	.word	0x080070f3
 80070d4:	08007103 	.word	0x08007103
 80070d8:	08007103 	.word	0x08007103
 80070dc:	08007103 	.word	0x08007103
 80070e0:	080070fb 	.word	0x080070fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070e4:	f7fc fe2a 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 80070e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070ea:	e010      	b.n	800710e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070ec:	4b9e      	ldr	r3, [pc, #632]	; (8007368 <UART_SetConfig+0x5c0>)
 80070ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070f0:	e00d      	b.n	800710e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070f2:	f7fc fd8b 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 80070f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070f8:	e009      	b.n	800710e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007100:	e005      	b.n	800710e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007102:	2300      	movs	r3, #0
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800710c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 8130 	beq.w	8007376 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	4a94      	ldr	r2, [pc, #592]	; (800736c <UART_SetConfig+0x5c4>)
 800711c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007120:	461a      	mov	r2, r3
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	fbb3 f3f2 	udiv	r3, r3, r2
 8007128:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	4613      	mov	r3, r2
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	4413      	add	r3, r2
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	429a      	cmp	r2, r3
 8007138:	d305      	bcc.n	8007146 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	429a      	cmp	r2, r3
 8007144:	d903      	bls.n	800714e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800714c:	e113      	b.n	8007376 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	2200      	movs	r2, #0
 8007152:	60bb      	str	r3, [r7, #8]
 8007154:	60fa      	str	r2, [r7, #12]
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	4a84      	ldr	r2, [pc, #528]	; (800736c <UART_SetConfig+0x5c4>)
 800715c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007160:	b29b      	uxth	r3, r3
 8007162:	2200      	movs	r2, #0
 8007164:	603b      	str	r3, [r7, #0]
 8007166:	607a      	str	r2, [r7, #4]
 8007168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800716c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007170:	f7f9 fd32 	bl	8000bd8 <__aeabi_uldivmod>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4610      	mov	r0, r2
 800717a:	4619      	mov	r1, r3
 800717c:	f04f 0200 	mov.w	r2, #0
 8007180:	f04f 0300 	mov.w	r3, #0
 8007184:	020b      	lsls	r3, r1, #8
 8007186:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800718a:	0202      	lsls	r2, r0, #8
 800718c:	6979      	ldr	r1, [r7, #20]
 800718e:	6849      	ldr	r1, [r1, #4]
 8007190:	0849      	lsrs	r1, r1, #1
 8007192:	2000      	movs	r0, #0
 8007194:	460c      	mov	r4, r1
 8007196:	4605      	mov	r5, r0
 8007198:	eb12 0804 	adds.w	r8, r2, r4
 800719c:	eb43 0905 	adc.w	r9, r3, r5
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	469a      	mov	sl, r3
 80071a8:	4693      	mov	fp, r2
 80071aa:	4652      	mov	r2, sl
 80071ac:	465b      	mov	r3, fp
 80071ae:	4640      	mov	r0, r8
 80071b0:	4649      	mov	r1, r9
 80071b2:	f7f9 fd11 	bl	8000bd8 <__aeabi_uldivmod>
 80071b6:	4602      	mov	r2, r0
 80071b8:	460b      	mov	r3, r1
 80071ba:	4613      	mov	r3, r2
 80071bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071c4:	d308      	bcc.n	80071d8 <UART_SetConfig+0x430>
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071cc:	d204      	bcs.n	80071d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6a3a      	ldr	r2, [r7, #32]
 80071d4:	60da      	str	r2, [r3, #12]
 80071d6:	e0ce      	b.n	8007376 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80071de:	e0ca      	b.n	8007376 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	69db      	ldr	r3, [r3, #28]
 80071e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071e8:	d166      	bne.n	80072b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80071ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071ee:	2b08      	cmp	r3, #8
 80071f0:	d827      	bhi.n	8007242 <UART_SetConfig+0x49a>
 80071f2:	a201      	add	r2, pc, #4	; (adr r2, 80071f8 <UART_SetConfig+0x450>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	0800721d 	.word	0x0800721d
 80071fc:	08007225 	.word	0x08007225
 8007200:	0800722d 	.word	0x0800722d
 8007204:	08007243 	.word	0x08007243
 8007208:	08007233 	.word	0x08007233
 800720c:	08007243 	.word	0x08007243
 8007210:	08007243 	.word	0x08007243
 8007214:	08007243 	.word	0x08007243
 8007218:	0800723b 	.word	0x0800723b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800721c:	f7fc fd8e 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 8007220:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007222:	e014      	b.n	800724e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007224:	f7fc fda0 	bl	8003d68 <HAL_RCC_GetPCLK2Freq>
 8007228:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800722a:	e010      	b.n	800724e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800722c:	4b4e      	ldr	r3, [pc, #312]	; (8007368 <UART_SetConfig+0x5c0>)
 800722e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007230:	e00d      	b.n	800724e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007232:	f7fc fceb 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8007236:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007238:	e009      	b.n	800724e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800723a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800723e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007240:	e005      	b.n	800724e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800724c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 8090 	beq.w	8007376 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	4a44      	ldr	r2, [pc, #272]	; (800736c <UART_SetConfig+0x5c4>)
 800725c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007260:	461a      	mov	r2, r3
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	fbb3 f3f2 	udiv	r3, r3, r2
 8007268:	005a      	lsls	r2, r3, #1
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	085b      	lsrs	r3, r3, #1
 8007270:	441a      	add	r2, r3
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	fbb2 f3f3 	udiv	r3, r2, r3
 800727a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	2b0f      	cmp	r3, #15
 8007280:	d916      	bls.n	80072b0 <UART_SetConfig+0x508>
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007288:	d212      	bcs.n	80072b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800728a:	6a3b      	ldr	r3, [r7, #32]
 800728c:	b29b      	uxth	r3, r3
 800728e:	f023 030f 	bic.w	r3, r3, #15
 8007292:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	085b      	lsrs	r3, r3, #1
 8007298:	b29b      	uxth	r3, r3
 800729a:	f003 0307 	and.w	r3, r3, #7
 800729e:	b29a      	uxth	r2, r3
 80072a0:	8bfb      	ldrh	r3, [r7, #30]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	8bfa      	ldrh	r2, [r7, #30]
 80072ac:	60da      	str	r2, [r3, #12]
 80072ae:	e062      	b.n	8007376 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80072b6:	e05e      	b.n	8007376 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d828      	bhi.n	8007312 <UART_SetConfig+0x56a>
 80072c0:	a201      	add	r2, pc, #4	; (adr r2, 80072c8 <UART_SetConfig+0x520>)
 80072c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c6:	bf00      	nop
 80072c8:	080072ed 	.word	0x080072ed
 80072cc:	080072f5 	.word	0x080072f5
 80072d0:	080072fd 	.word	0x080072fd
 80072d4:	08007313 	.word	0x08007313
 80072d8:	08007303 	.word	0x08007303
 80072dc:	08007313 	.word	0x08007313
 80072e0:	08007313 	.word	0x08007313
 80072e4:	08007313 	.word	0x08007313
 80072e8:	0800730b 	.word	0x0800730b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072ec:	f7fc fd26 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 80072f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072f2:	e014      	b.n	800731e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072f4:	f7fc fd38 	bl	8003d68 <HAL_RCC_GetPCLK2Freq>
 80072f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072fa:	e010      	b.n	800731e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072fc:	4b1a      	ldr	r3, [pc, #104]	; (8007368 <UART_SetConfig+0x5c0>)
 80072fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007300:	e00d      	b.n	800731e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007302:	f7fc fc83 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8007306:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007308:	e009      	b.n	800731e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800730a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800730e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007310:	e005      	b.n	800731e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800731c:	bf00      	nop
    }

    if (pclk != 0U)
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	2b00      	cmp	r3, #0
 8007322:	d028      	beq.n	8007376 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	4a10      	ldr	r2, [pc, #64]	; (800736c <UART_SetConfig+0x5c4>)
 800732a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800732e:	461a      	mov	r2, r3
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	fbb3 f2f2 	udiv	r2, r3, r2
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	085b      	lsrs	r3, r3, #1
 800733c:	441a      	add	r2, r3
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	fbb2 f3f3 	udiv	r3, r2, r3
 8007346:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	2b0f      	cmp	r3, #15
 800734c:	d910      	bls.n	8007370 <UART_SetConfig+0x5c8>
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007354:	d20c      	bcs.n	8007370 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	b29a      	uxth	r2, r3
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	60da      	str	r2, [r3, #12]
 8007360:	e009      	b.n	8007376 <UART_SetConfig+0x5ce>
 8007362:	bf00      	nop
 8007364:	40008000 	.word	0x40008000
 8007368:	00f42400 	.word	0x00f42400
 800736c:	0800a5d0 	.word	0x0800a5d0
      }
      else
      {
        ret = HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2201      	movs	r2, #1
 800737a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	2201      	movs	r2, #1
 8007382:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2200      	movs	r2, #0
 800738a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	2200      	movs	r2, #0
 8007390:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007392:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007396:	4618      	mov	r0, r3
 8007398:	3730      	adds	r7, #48	; 0x30
 800739a:	46bd      	mov	sp, r7
 800739c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080073a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00a      	beq.n	80073ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00a      	beq.n	80073ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	430a      	orrs	r2, r1
 80073ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f0:	f003 0304 	and.w	r3, r3, #4
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00a      	beq.n	800740e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007412:	f003 0308 	and.w	r3, r3, #8
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	430a      	orrs	r2, r1
 800742e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007434:	f003 0310 	and.w	r3, r3, #16
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00a      	beq.n	8007452 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007456:	f003 0320 	and.w	r3, r3, #32
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00a      	beq.n	8007474 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	430a      	orrs	r2, r1
 8007472:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747c:	2b00      	cmp	r3, #0
 800747e:	d01a      	beq.n	80074b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800749e:	d10a      	bne.n	80074b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	430a      	orrs	r2, r1
 80074d6:	605a      	str	r2, [r3, #4]
  }
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af02      	add	r7, sp, #8
 80074ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074f4:	f7fb fa46 	bl	8002984 <HAL_GetTick>
 80074f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0308 	and.w	r3, r3, #8
 8007504:	2b08      	cmp	r3, #8
 8007506:	d10e      	bne.n	8007526 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007508:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f82f 	bl	800757a <UART_WaitOnFlagUntilTimeout>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e025      	b.n	8007572 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	2b04      	cmp	r3, #4
 8007532:	d10e      	bne.n	8007552 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f819 	bl	800757a <UART_WaitOnFlagUntilTimeout>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d001      	beq.n	8007552 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e00f      	b.n	8007572 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2220      	movs	r2, #32
 8007556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2220      	movs	r2, #32
 800755e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b09c      	sub	sp, #112	; 0x70
 800757e:	af00      	add	r7, sp, #0
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	603b      	str	r3, [r7, #0]
 8007586:	4613      	mov	r3, r2
 8007588:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800758a:	e0a9      	b.n	80076e0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800758c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800758e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007592:	f000 80a5 	beq.w	80076e0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007596:	f7fb f9f5 	bl	8002984 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d302      	bcc.n	80075ac <UART_WaitOnFlagUntilTimeout+0x32>
 80075a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d140      	bne.n	800762e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075b4:	e853 3f00 	ldrex	r3, [r3]
 80075b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80075ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075c0:	667b      	str	r3, [r7, #100]	; 0x64
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	461a      	mov	r2, r3
 80075c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075d2:	e841 2300 	strex	r3, r2, [r1]
 80075d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80075d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1e6      	bne.n	80075ac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3308      	adds	r3, #8
 80075e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075e8:	e853 3f00 	ldrex	r3, [r3]
 80075ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f0:	f023 0301 	bic.w	r3, r3, #1
 80075f4:	663b      	str	r3, [r7, #96]	; 0x60
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	3308      	adds	r3, #8
 80075fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8007600:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007602:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007604:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007606:	e841 2300 	strex	r3, r2, [r1]
 800760a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800760c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1e5      	bne.n	80075de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2220      	movs	r2, #32
 8007616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2220      	movs	r2, #32
 800761e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e069      	b.n	8007702 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0304 	and.w	r3, r3, #4
 8007638:	2b00      	cmp	r3, #0
 800763a:	d051      	beq.n	80076e0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800764a:	d149      	bne.n	80076e0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007654:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765e:	e853 3f00 	ldrex	r3, [r3]
 8007662:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800766a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	461a      	mov	r2, r3
 8007672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007674:	637b      	str	r3, [r7, #52]	; 0x34
 8007676:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007678:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800767a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800767c:	e841 2300 	strex	r3, r2, [r1]
 8007680:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1e6      	bne.n	8007656 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3308      	adds	r3, #8
 800768e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	e853 3f00 	ldrex	r3, [r3]
 8007696:	613b      	str	r3, [r7, #16]
   return(result);
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	f023 0301 	bic.w	r3, r3, #1
 800769e:	66bb      	str	r3, [r7, #104]	; 0x68
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	3308      	adds	r3, #8
 80076a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80076a8:	623a      	str	r2, [r7, #32]
 80076aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ac:	69f9      	ldr	r1, [r7, #28]
 80076ae:	6a3a      	ldr	r2, [r7, #32]
 80076b0:	e841 2300 	strex	r3, r2, [r1]
 80076b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e5      	bne.n	8007688 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2220      	movs	r2, #32
 80076c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2220      	movs	r2, #32
 80076c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2220      	movs	r2, #32
 80076d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e010      	b.n	8007702 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	69da      	ldr	r2, [r3, #28]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	4013      	ands	r3, r2
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	bf0c      	ite	eq
 80076f0:	2301      	moveq	r3, #1
 80076f2:	2300      	movne	r3, #0
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	461a      	mov	r2, r3
 80076f8:	79fb      	ldrb	r3, [r7, #7]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	f43f af46 	beq.w	800758c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3770      	adds	r7, #112	; 0x70
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800770a:	b480      	push	{r7}
 800770c:	b085      	sub	sp, #20
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007718:	2b01      	cmp	r3, #1
 800771a:	d101      	bne.n	8007720 <HAL_UARTEx_DisableFifoMode+0x16>
 800771c:	2302      	movs	r3, #2
 800771e:	e027      	b.n	8007770 <HAL_UARTEx_DisableFifoMode+0x66>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2224      	movs	r2, #36	; 0x24
 800772c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f022 0201 	bic.w	r2, r2, #1
 8007746:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800774e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2220      	movs	r2, #32
 8007762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800778c:	2b01      	cmp	r3, #1
 800778e:	d101      	bne.n	8007794 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007790:	2302      	movs	r3, #2
 8007792:	e02d      	b.n	80077f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2224      	movs	r2, #36	; 0x24
 80077a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f022 0201 	bic.w	r2, r2, #1
 80077ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	430a      	orrs	r2, r1
 80077ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f84f 	bl	8007874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2220      	movs	r2, #32
 80077e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007808:	2b01      	cmp	r3, #1
 800780a:	d101      	bne.n	8007810 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800780c:	2302      	movs	r3, #2
 800780e:	e02d      	b.n	800786c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2224      	movs	r2, #36	; 0x24
 800781c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0201 	bic.w	r2, r2, #1
 8007836:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f811 	bl	8007874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2220      	movs	r2, #32
 800785e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007880:	2b00      	cmp	r3, #0
 8007882:	d108      	bne.n	8007896 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007894:	e031      	b.n	80078fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007896:	2308      	movs	r3, #8
 8007898:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800789a:	2308      	movs	r3, #8
 800789c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	0e5b      	lsrs	r3, r3, #25
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	f003 0307 	and.w	r3, r3, #7
 80078ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	0f5b      	lsrs	r3, r3, #29
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	f003 0307 	and.w	r3, r3, #7
 80078bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	7b3a      	ldrb	r2, [r7, #12]
 80078c2:	4911      	ldr	r1, [pc, #68]	; (8007908 <UARTEx_SetNbDataToProcess+0x94>)
 80078c4:	5c8a      	ldrb	r2, [r1, r2]
 80078c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078ca:	7b3a      	ldrb	r2, [r7, #12]
 80078cc:	490f      	ldr	r1, [pc, #60]	; (800790c <UARTEx_SetNbDataToProcess+0x98>)
 80078ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
 80078de:	7b7a      	ldrb	r2, [r7, #13]
 80078e0:	4909      	ldr	r1, [pc, #36]	; (8007908 <UARTEx_SetNbDataToProcess+0x94>)
 80078e2:	5c8a      	ldrb	r2, [r1, r2]
 80078e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80078e8:	7b7a      	ldrb	r2, [r7, #13]
 80078ea:	4908      	ldr	r1, [pc, #32]	; (800790c <UARTEx_SetNbDataToProcess+0x98>)
 80078ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80078fa:	bf00      	nop
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	0800a5e8 	.word	0x0800a5e8
 800790c:	0800a5f0 	.word	0x0800a5f0

08007910 <__errno>:
 8007910:	4b01      	ldr	r3, [pc, #4]	; (8007918 <__errno+0x8>)
 8007912:	6818      	ldr	r0, [r3, #0]
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	2000000c 	.word	0x2000000c

0800791c <__libc_init_array>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	4d0d      	ldr	r5, [pc, #52]	; (8007954 <__libc_init_array+0x38>)
 8007920:	4c0d      	ldr	r4, [pc, #52]	; (8007958 <__libc_init_array+0x3c>)
 8007922:	1b64      	subs	r4, r4, r5
 8007924:	10a4      	asrs	r4, r4, #2
 8007926:	2600      	movs	r6, #0
 8007928:	42a6      	cmp	r6, r4
 800792a:	d109      	bne.n	8007940 <__libc_init_array+0x24>
 800792c:	4d0b      	ldr	r5, [pc, #44]	; (800795c <__libc_init_array+0x40>)
 800792e:	4c0c      	ldr	r4, [pc, #48]	; (8007960 <__libc_init_array+0x44>)
 8007930:	f002 fdc2 	bl	800a4b8 <_init>
 8007934:	1b64      	subs	r4, r4, r5
 8007936:	10a4      	asrs	r4, r4, #2
 8007938:	2600      	movs	r6, #0
 800793a:	42a6      	cmp	r6, r4
 800793c:	d105      	bne.n	800794a <__libc_init_array+0x2e>
 800793e:	bd70      	pop	{r4, r5, r6, pc}
 8007940:	f855 3b04 	ldr.w	r3, [r5], #4
 8007944:	4798      	blx	r3
 8007946:	3601      	adds	r6, #1
 8007948:	e7ee      	b.n	8007928 <__libc_init_array+0xc>
 800794a:	f855 3b04 	ldr.w	r3, [r5], #4
 800794e:	4798      	blx	r3
 8007950:	3601      	adds	r6, #1
 8007952:	e7f2      	b.n	800793a <__libc_init_array+0x1e>
 8007954:	0800a9dc 	.word	0x0800a9dc
 8007958:	0800a9dc 	.word	0x0800a9dc
 800795c:	0800a9dc 	.word	0x0800a9dc
 8007960:	0800a9e0 	.word	0x0800a9e0

08007964 <memcpy>:
 8007964:	440a      	add	r2, r1
 8007966:	4291      	cmp	r1, r2
 8007968:	f100 33ff 	add.w	r3, r0, #4294967295
 800796c:	d100      	bne.n	8007970 <memcpy+0xc>
 800796e:	4770      	bx	lr
 8007970:	b510      	push	{r4, lr}
 8007972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800797a:	4291      	cmp	r1, r2
 800797c:	d1f9      	bne.n	8007972 <memcpy+0xe>
 800797e:	bd10      	pop	{r4, pc}

08007980 <memset>:
 8007980:	4402      	add	r2, r0
 8007982:	4603      	mov	r3, r0
 8007984:	4293      	cmp	r3, r2
 8007986:	d100      	bne.n	800798a <memset+0xa>
 8007988:	4770      	bx	lr
 800798a:	f803 1b01 	strb.w	r1, [r3], #1
 800798e:	e7f9      	b.n	8007984 <memset+0x4>

08007990 <__cvt>:
 8007990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007994:	ec55 4b10 	vmov	r4, r5, d0
 8007998:	2d00      	cmp	r5, #0
 800799a:	460e      	mov	r6, r1
 800799c:	4619      	mov	r1, r3
 800799e:	462b      	mov	r3, r5
 80079a0:	bfbb      	ittet	lt
 80079a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80079a6:	461d      	movlt	r5, r3
 80079a8:	2300      	movge	r3, #0
 80079aa:	232d      	movlt	r3, #45	; 0x2d
 80079ac:	700b      	strb	r3, [r1, #0]
 80079ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80079b4:	4691      	mov	r9, r2
 80079b6:	f023 0820 	bic.w	r8, r3, #32
 80079ba:	bfbc      	itt	lt
 80079bc:	4622      	movlt	r2, r4
 80079be:	4614      	movlt	r4, r2
 80079c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079c4:	d005      	beq.n	80079d2 <__cvt+0x42>
 80079c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80079ca:	d100      	bne.n	80079ce <__cvt+0x3e>
 80079cc:	3601      	adds	r6, #1
 80079ce:	2102      	movs	r1, #2
 80079d0:	e000      	b.n	80079d4 <__cvt+0x44>
 80079d2:	2103      	movs	r1, #3
 80079d4:	ab03      	add	r3, sp, #12
 80079d6:	9301      	str	r3, [sp, #4]
 80079d8:	ab02      	add	r3, sp, #8
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	ec45 4b10 	vmov	d0, r4, r5
 80079e0:	4653      	mov	r3, sl
 80079e2:	4632      	mov	r2, r6
 80079e4:	f000 fe18 	bl	8008618 <_dtoa_r>
 80079e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80079ec:	4607      	mov	r7, r0
 80079ee:	d102      	bne.n	80079f6 <__cvt+0x66>
 80079f0:	f019 0f01 	tst.w	r9, #1
 80079f4:	d022      	beq.n	8007a3c <__cvt+0xac>
 80079f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079fa:	eb07 0906 	add.w	r9, r7, r6
 80079fe:	d110      	bne.n	8007a22 <__cvt+0x92>
 8007a00:	783b      	ldrb	r3, [r7, #0]
 8007a02:	2b30      	cmp	r3, #48	; 0x30
 8007a04:	d10a      	bne.n	8007a1c <__cvt+0x8c>
 8007a06:	2200      	movs	r2, #0
 8007a08:	2300      	movs	r3, #0
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	4629      	mov	r1, r5
 8007a0e:	f7f9 f873 	bl	8000af8 <__aeabi_dcmpeq>
 8007a12:	b918      	cbnz	r0, 8007a1c <__cvt+0x8c>
 8007a14:	f1c6 0601 	rsb	r6, r6, #1
 8007a18:	f8ca 6000 	str.w	r6, [sl]
 8007a1c:	f8da 3000 	ldr.w	r3, [sl]
 8007a20:	4499      	add	r9, r3
 8007a22:	2200      	movs	r2, #0
 8007a24:	2300      	movs	r3, #0
 8007a26:	4620      	mov	r0, r4
 8007a28:	4629      	mov	r1, r5
 8007a2a:	f7f9 f865 	bl	8000af8 <__aeabi_dcmpeq>
 8007a2e:	b108      	cbz	r0, 8007a34 <__cvt+0xa4>
 8007a30:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a34:	2230      	movs	r2, #48	; 0x30
 8007a36:	9b03      	ldr	r3, [sp, #12]
 8007a38:	454b      	cmp	r3, r9
 8007a3a:	d307      	bcc.n	8007a4c <__cvt+0xbc>
 8007a3c:	9b03      	ldr	r3, [sp, #12]
 8007a3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a40:	1bdb      	subs	r3, r3, r7
 8007a42:	4638      	mov	r0, r7
 8007a44:	6013      	str	r3, [r2, #0]
 8007a46:	b004      	add	sp, #16
 8007a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a4c:	1c59      	adds	r1, r3, #1
 8007a4e:	9103      	str	r1, [sp, #12]
 8007a50:	701a      	strb	r2, [r3, #0]
 8007a52:	e7f0      	b.n	8007a36 <__cvt+0xa6>

08007a54 <__exponent>:
 8007a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a56:	4603      	mov	r3, r0
 8007a58:	2900      	cmp	r1, #0
 8007a5a:	bfb8      	it	lt
 8007a5c:	4249      	neglt	r1, r1
 8007a5e:	f803 2b02 	strb.w	r2, [r3], #2
 8007a62:	bfb4      	ite	lt
 8007a64:	222d      	movlt	r2, #45	; 0x2d
 8007a66:	222b      	movge	r2, #43	; 0x2b
 8007a68:	2909      	cmp	r1, #9
 8007a6a:	7042      	strb	r2, [r0, #1]
 8007a6c:	dd2a      	ble.n	8007ac4 <__exponent+0x70>
 8007a6e:	f10d 0407 	add.w	r4, sp, #7
 8007a72:	46a4      	mov	ip, r4
 8007a74:	270a      	movs	r7, #10
 8007a76:	46a6      	mov	lr, r4
 8007a78:	460a      	mov	r2, r1
 8007a7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007a7e:	fb07 1516 	mls	r5, r7, r6, r1
 8007a82:	3530      	adds	r5, #48	; 0x30
 8007a84:	2a63      	cmp	r2, #99	; 0x63
 8007a86:	f104 34ff 	add.w	r4, r4, #4294967295
 8007a8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007a8e:	4631      	mov	r1, r6
 8007a90:	dcf1      	bgt.n	8007a76 <__exponent+0x22>
 8007a92:	3130      	adds	r1, #48	; 0x30
 8007a94:	f1ae 0502 	sub.w	r5, lr, #2
 8007a98:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007a9c:	1c44      	adds	r4, r0, #1
 8007a9e:	4629      	mov	r1, r5
 8007aa0:	4561      	cmp	r1, ip
 8007aa2:	d30a      	bcc.n	8007aba <__exponent+0x66>
 8007aa4:	f10d 0209 	add.w	r2, sp, #9
 8007aa8:	eba2 020e 	sub.w	r2, r2, lr
 8007aac:	4565      	cmp	r5, ip
 8007aae:	bf88      	it	hi
 8007ab0:	2200      	movhi	r2, #0
 8007ab2:	4413      	add	r3, r2
 8007ab4:	1a18      	subs	r0, r3, r0
 8007ab6:	b003      	add	sp, #12
 8007ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007abe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007ac2:	e7ed      	b.n	8007aa0 <__exponent+0x4c>
 8007ac4:	2330      	movs	r3, #48	; 0x30
 8007ac6:	3130      	adds	r1, #48	; 0x30
 8007ac8:	7083      	strb	r3, [r0, #2]
 8007aca:	70c1      	strb	r1, [r0, #3]
 8007acc:	1d03      	adds	r3, r0, #4
 8007ace:	e7f1      	b.n	8007ab4 <__exponent+0x60>

08007ad0 <_printf_float>:
 8007ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad4:	ed2d 8b02 	vpush	{d8}
 8007ad8:	b08d      	sub	sp, #52	; 0x34
 8007ada:	460c      	mov	r4, r1
 8007adc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ae0:	4616      	mov	r6, r2
 8007ae2:	461f      	mov	r7, r3
 8007ae4:	4605      	mov	r5, r0
 8007ae6:	f001 fd3d 	bl	8009564 <_localeconv_r>
 8007aea:	f8d0 a000 	ldr.w	sl, [r0]
 8007aee:	4650      	mov	r0, sl
 8007af0:	f7f8 fb86 	bl	8000200 <strlen>
 8007af4:	2300      	movs	r3, #0
 8007af6:	930a      	str	r3, [sp, #40]	; 0x28
 8007af8:	6823      	ldr	r3, [r4, #0]
 8007afa:	9305      	str	r3, [sp, #20]
 8007afc:	f8d8 3000 	ldr.w	r3, [r8]
 8007b00:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007b04:	3307      	adds	r3, #7
 8007b06:	f023 0307 	bic.w	r3, r3, #7
 8007b0a:	f103 0208 	add.w	r2, r3, #8
 8007b0e:	f8c8 2000 	str.w	r2, [r8]
 8007b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b16:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007b1a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007b1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b22:	9307      	str	r3, [sp, #28]
 8007b24:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b28:	ee08 0a10 	vmov	s16, r0
 8007b2c:	4b9f      	ldr	r3, [pc, #636]	; (8007dac <_printf_float+0x2dc>)
 8007b2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b32:	f04f 32ff 	mov.w	r2, #4294967295
 8007b36:	f7f9 f811 	bl	8000b5c <__aeabi_dcmpun>
 8007b3a:	bb88      	cbnz	r0, 8007ba0 <_printf_float+0xd0>
 8007b3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b40:	4b9a      	ldr	r3, [pc, #616]	; (8007dac <_printf_float+0x2dc>)
 8007b42:	f04f 32ff 	mov.w	r2, #4294967295
 8007b46:	f7f8 ffeb 	bl	8000b20 <__aeabi_dcmple>
 8007b4a:	bb48      	cbnz	r0, 8007ba0 <_printf_float+0xd0>
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	2300      	movs	r3, #0
 8007b50:	4640      	mov	r0, r8
 8007b52:	4649      	mov	r1, r9
 8007b54:	f7f8 ffda 	bl	8000b0c <__aeabi_dcmplt>
 8007b58:	b110      	cbz	r0, 8007b60 <_printf_float+0x90>
 8007b5a:	232d      	movs	r3, #45	; 0x2d
 8007b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b60:	4b93      	ldr	r3, [pc, #588]	; (8007db0 <_printf_float+0x2e0>)
 8007b62:	4894      	ldr	r0, [pc, #592]	; (8007db4 <_printf_float+0x2e4>)
 8007b64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007b68:	bf94      	ite	ls
 8007b6a:	4698      	movls	r8, r3
 8007b6c:	4680      	movhi	r8, r0
 8007b6e:	2303      	movs	r3, #3
 8007b70:	6123      	str	r3, [r4, #16]
 8007b72:	9b05      	ldr	r3, [sp, #20]
 8007b74:	f023 0204 	bic.w	r2, r3, #4
 8007b78:	6022      	str	r2, [r4, #0]
 8007b7a:	f04f 0900 	mov.w	r9, #0
 8007b7e:	9700      	str	r7, [sp, #0]
 8007b80:	4633      	mov	r3, r6
 8007b82:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b84:	4621      	mov	r1, r4
 8007b86:	4628      	mov	r0, r5
 8007b88:	f000 f9d8 	bl	8007f3c <_printf_common>
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	f040 8090 	bne.w	8007cb2 <_printf_float+0x1e2>
 8007b92:	f04f 30ff 	mov.w	r0, #4294967295
 8007b96:	b00d      	add	sp, #52	; 0x34
 8007b98:	ecbd 8b02 	vpop	{d8}
 8007b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba0:	4642      	mov	r2, r8
 8007ba2:	464b      	mov	r3, r9
 8007ba4:	4640      	mov	r0, r8
 8007ba6:	4649      	mov	r1, r9
 8007ba8:	f7f8 ffd8 	bl	8000b5c <__aeabi_dcmpun>
 8007bac:	b140      	cbz	r0, 8007bc0 <_printf_float+0xf0>
 8007bae:	464b      	mov	r3, r9
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	bfbc      	itt	lt
 8007bb4:	232d      	movlt	r3, #45	; 0x2d
 8007bb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007bba:	487f      	ldr	r0, [pc, #508]	; (8007db8 <_printf_float+0x2e8>)
 8007bbc:	4b7f      	ldr	r3, [pc, #508]	; (8007dbc <_printf_float+0x2ec>)
 8007bbe:	e7d1      	b.n	8007b64 <_printf_float+0x94>
 8007bc0:	6863      	ldr	r3, [r4, #4]
 8007bc2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007bc6:	9206      	str	r2, [sp, #24]
 8007bc8:	1c5a      	adds	r2, r3, #1
 8007bca:	d13f      	bne.n	8007c4c <_printf_float+0x17c>
 8007bcc:	2306      	movs	r3, #6
 8007bce:	6063      	str	r3, [r4, #4]
 8007bd0:	9b05      	ldr	r3, [sp, #20]
 8007bd2:	6861      	ldr	r1, [r4, #4]
 8007bd4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007bd8:	2300      	movs	r3, #0
 8007bda:	9303      	str	r3, [sp, #12]
 8007bdc:	ab0a      	add	r3, sp, #40	; 0x28
 8007bde:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007be2:	ab09      	add	r3, sp, #36	; 0x24
 8007be4:	ec49 8b10 	vmov	d0, r8, r9
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	6022      	str	r2, [r4, #0]
 8007bec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	f7ff fecd 	bl	8007990 <__cvt>
 8007bf6:	9b06      	ldr	r3, [sp, #24]
 8007bf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bfa:	2b47      	cmp	r3, #71	; 0x47
 8007bfc:	4680      	mov	r8, r0
 8007bfe:	d108      	bne.n	8007c12 <_printf_float+0x142>
 8007c00:	1cc8      	adds	r0, r1, #3
 8007c02:	db02      	blt.n	8007c0a <_printf_float+0x13a>
 8007c04:	6863      	ldr	r3, [r4, #4]
 8007c06:	4299      	cmp	r1, r3
 8007c08:	dd41      	ble.n	8007c8e <_printf_float+0x1be>
 8007c0a:	f1ab 0b02 	sub.w	fp, fp, #2
 8007c0e:	fa5f fb8b 	uxtb.w	fp, fp
 8007c12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c16:	d820      	bhi.n	8007c5a <_printf_float+0x18a>
 8007c18:	3901      	subs	r1, #1
 8007c1a:	465a      	mov	r2, fp
 8007c1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c20:	9109      	str	r1, [sp, #36]	; 0x24
 8007c22:	f7ff ff17 	bl	8007a54 <__exponent>
 8007c26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c28:	1813      	adds	r3, r2, r0
 8007c2a:	2a01      	cmp	r2, #1
 8007c2c:	4681      	mov	r9, r0
 8007c2e:	6123      	str	r3, [r4, #16]
 8007c30:	dc02      	bgt.n	8007c38 <_printf_float+0x168>
 8007c32:	6822      	ldr	r2, [r4, #0]
 8007c34:	07d2      	lsls	r2, r2, #31
 8007c36:	d501      	bpl.n	8007c3c <_printf_float+0x16c>
 8007c38:	3301      	adds	r3, #1
 8007c3a:	6123      	str	r3, [r4, #16]
 8007c3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d09c      	beq.n	8007b7e <_printf_float+0xae>
 8007c44:	232d      	movs	r3, #45	; 0x2d
 8007c46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c4a:	e798      	b.n	8007b7e <_printf_float+0xae>
 8007c4c:	9a06      	ldr	r2, [sp, #24]
 8007c4e:	2a47      	cmp	r2, #71	; 0x47
 8007c50:	d1be      	bne.n	8007bd0 <_printf_float+0x100>
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1bc      	bne.n	8007bd0 <_printf_float+0x100>
 8007c56:	2301      	movs	r3, #1
 8007c58:	e7b9      	b.n	8007bce <_printf_float+0xfe>
 8007c5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007c5e:	d118      	bne.n	8007c92 <_printf_float+0x1c2>
 8007c60:	2900      	cmp	r1, #0
 8007c62:	6863      	ldr	r3, [r4, #4]
 8007c64:	dd0b      	ble.n	8007c7e <_printf_float+0x1ae>
 8007c66:	6121      	str	r1, [r4, #16]
 8007c68:	b913      	cbnz	r3, 8007c70 <_printf_float+0x1a0>
 8007c6a:	6822      	ldr	r2, [r4, #0]
 8007c6c:	07d0      	lsls	r0, r2, #31
 8007c6e:	d502      	bpl.n	8007c76 <_printf_float+0x1a6>
 8007c70:	3301      	adds	r3, #1
 8007c72:	440b      	add	r3, r1
 8007c74:	6123      	str	r3, [r4, #16]
 8007c76:	65a1      	str	r1, [r4, #88]	; 0x58
 8007c78:	f04f 0900 	mov.w	r9, #0
 8007c7c:	e7de      	b.n	8007c3c <_printf_float+0x16c>
 8007c7e:	b913      	cbnz	r3, 8007c86 <_printf_float+0x1b6>
 8007c80:	6822      	ldr	r2, [r4, #0]
 8007c82:	07d2      	lsls	r2, r2, #31
 8007c84:	d501      	bpl.n	8007c8a <_printf_float+0x1ba>
 8007c86:	3302      	adds	r3, #2
 8007c88:	e7f4      	b.n	8007c74 <_printf_float+0x1a4>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e7f2      	b.n	8007c74 <_printf_float+0x1a4>
 8007c8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c94:	4299      	cmp	r1, r3
 8007c96:	db05      	blt.n	8007ca4 <_printf_float+0x1d4>
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	6121      	str	r1, [r4, #16]
 8007c9c:	07d8      	lsls	r0, r3, #31
 8007c9e:	d5ea      	bpl.n	8007c76 <_printf_float+0x1a6>
 8007ca0:	1c4b      	adds	r3, r1, #1
 8007ca2:	e7e7      	b.n	8007c74 <_printf_float+0x1a4>
 8007ca4:	2900      	cmp	r1, #0
 8007ca6:	bfd4      	ite	le
 8007ca8:	f1c1 0202 	rsble	r2, r1, #2
 8007cac:	2201      	movgt	r2, #1
 8007cae:	4413      	add	r3, r2
 8007cb0:	e7e0      	b.n	8007c74 <_printf_float+0x1a4>
 8007cb2:	6823      	ldr	r3, [r4, #0]
 8007cb4:	055a      	lsls	r2, r3, #21
 8007cb6:	d407      	bmi.n	8007cc8 <_printf_float+0x1f8>
 8007cb8:	6923      	ldr	r3, [r4, #16]
 8007cba:	4642      	mov	r2, r8
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	47b8      	blx	r7
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	d12c      	bne.n	8007d20 <_printf_float+0x250>
 8007cc6:	e764      	b.n	8007b92 <_printf_float+0xc2>
 8007cc8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ccc:	f240 80e0 	bls.w	8007e90 <_printf_float+0x3c0>
 8007cd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	f7f8 ff0e 	bl	8000af8 <__aeabi_dcmpeq>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d034      	beq.n	8007d4a <_printf_float+0x27a>
 8007ce0:	4a37      	ldr	r2, [pc, #220]	; (8007dc0 <_printf_float+0x2f0>)
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	4631      	mov	r1, r6
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	47b8      	blx	r7
 8007cea:	3001      	adds	r0, #1
 8007cec:	f43f af51 	beq.w	8007b92 <_printf_float+0xc2>
 8007cf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	db02      	blt.n	8007cfe <_printf_float+0x22e>
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	07d8      	lsls	r0, r3, #31
 8007cfc:	d510      	bpl.n	8007d20 <_printf_float+0x250>
 8007cfe:	ee18 3a10 	vmov	r3, s16
 8007d02:	4652      	mov	r2, sl
 8007d04:	4631      	mov	r1, r6
 8007d06:	4628      	mov	r0, r5
 8007d08:	47b8      	blx	r7
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	f43f af41 	beq.w	8007b92 <_printf_float+0xc2>
 8007d10:	f04f 0800 	mov.w	r8, #0
 8007d14:	f104 091a 	add.w	r9, r4, #26
 8007d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	4543      	cmp	r3, r8
 8007d1e:	dc09      	bgt.n	8007d34 <_printf_float+0x264>
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	079b      	lsls	r3, r3, #30
 8007d24:	f100 8105 	bmi.w	8007f32 <_printf_float+0x462>
 8007d28:	68e0      	ldr	r0, [r4, #12]
 8007d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d2c:	4298      	cmp	r0, r3
 8007d2e:	bfb8      	it	lt
 8007d30:	4618      	movlt	r0, r3
 8007d32:	e730      	b.n	8007b96 <_printf_float+0xc6>
 8007d34:	2301      	movs	r3, #1
 8007d36:	464a      	mov	r2, r9
 8007d38:	4631      	mov	r1, r6
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	47b8      	blx	r7
 8007d3e:	3001      	adds	r0, #1
 8007d40:	f43f af27 	beq.w	8007b92 <_printf_float+0xc2>
 8007d44:	f108 0801 	add.w	r8, r8, #1
 8007d48:	e7e6      	b.n	8007d18 <_printf_float+0x248>
 8007d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	dc39      	bgt.n	8007dc4 <_printf_float+0x2f4>
 8007d50:	4a1b      	ldr	r2, [pc, #108]	; (8007dc0 <_printf_float+0x2f0>)
 8007d52:	2301      	movs	r3, #1
 8007d54:	4631      	mov	r1, r6
 8007d56:	4628      	mov	r0, r5
 8007d58:	47b8      	blx	r7
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	f43f af19 	beq.w	8007b92 <_printf_float+0xc2>
 8007d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d64:	4313      	orrs	r3, r2
 8007d66:	d102      	bne.n	8007d6e <_printf_float+0x29e>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	07d9      	lsls	r1, r3, #31
 8007d6c:	d5d8      	bpl.n	8007d20 <_printf_float+0x250>
 8007d6e:	ee18 3a10 	vmov	r3, s16
 8007d72:	4652      	mov	r2, sl
 8007d74:	4631      	mov	r1, r6
 8007d76:	4628      	mov	r0, r5
 8007d78:	47b8      	blx	r7
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	f43f af09 	beq.w	8007b92 <_printf_float+0xc2>
 8007d80:	f04f 0900 	mov.w	r9, #0
 8007d84:	f104 0a1a 	add.w	sl, r4, #26
 8007d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d8a:	425b      	negs	r3, r3
 8007d8c:	454b      	cmp	r3, r9
 8007d8e:	dc01      	bgt.n	8007d94 <_printf_float+0x2c4>
 8007d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d92:	e792      	b.n	8007cba <_printf_float+0x1ea>
 8007d94:	2301      	movs	r3, #1
 8007d96:	4652      	mov	r2, sl
 8007d98:	4631      	mov	r1, r6
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	47b8      	blx	r7
 8007d9e:	3001      	adds	r0, #1
 8007da0:	f43f aef7 	beq.w	8007b92 <_printf_float+0xc2>
 8007da4:	f109 0901 	add.w	r9, r9, #1
 8007da8:	e7ee      	b.n	8007d88 <_printf_float+0x2b8>
 8007daa:	bf00      	nop
 8007dac:	7fefffff 	.word	0x7fefffff
 8007db0:	0800a5fc 	.word	0x0800a5fc
 8007db4:	0800a600 	.word	0x0800a600
 8007db8:	0800a608 	.word	0x0800a608
 8007dbc:	0800a604 	.word	0x0800a604
 8007dc0:	0800a60c 	.word	0x0800a60c
 8007dc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	bfa8      	it	ge
 8007dcc:	461a      	movge	r2, r3
 8007dce:	2a00      	cmp	r2, #0
 8007dd0:	4691      	mov	r9, r2
 8007dd2:	dc37      	bgt.n	8007e44 <_printf_float+0x374>
 8007dd4:	f04f 0b00 	mov.w	fp, #0
 8007dd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ddc:	f104 021a 	add.w	r2, r4, #26
 8007de0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007de2:	9305      	str	r3, [sp, #20]
 8007de4:	eba3 0309 	sub.w	r3, r3, r9
 8007de8:	455b      	cmp	r3, fp
 8007dea:	dc33      	bgt.n	8007e54 <_printf_float+0x384>
 8007dec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007df0:	429a      	cmp	r2, r3
 8007df2:	db3b      	blt.n	8007e6c <_printf_float+0x39c>
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	07da      	lsls	r2, r3, #31
 8007df8:	d438      	bmi.n	8007e6c <_printf_float+0x39c>
 8007dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dfc:	9a05      	ldr	r2, [sp, #20]
 8007dfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e00:	1a9a      	subs	r2, r3, r2
 8007e02:	eba3 0901 	sub.w	r9, r3, r1
 8007e06:	4591      	cmp	r9, r2
 8007e08:	bfa8      	it	ge
 8007e0a:	4691      	movge	r9, r2
 8007e0c:	f1b9 0f00 	cmp.w	r9, #0
 8007e10:	dc35      	bgt.n	8007e7e <_printf_float+0x3ae>
 8007e12:	f04f 0800 	mov.w	r8, #0
 8007e16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e1a:	f104 0a1a 	add.w	sl, r4, #26
 8007e1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e22:	1a9b      	subs	r3, r3, r2
 8007e24:	eba3 0309 	sub.w	r3, r3, r9
 8007e28:	4543      	cmp	r3, r8
 8007e2a:	f77f af79 	ble.w	8007d20 <_printf_float+0x250>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	4652      	mov	r2, sl
 8007e32:	4631      	mov	r1, r6
 8007e34:	4628      	mov	r0, r5
 8007e36:	47b8      	blx	r7
 8007e38:	3001      	adds	r0, #1
 8007e3a:	f43f aeaa 	beq.w	8007b92 <_printf_float+0xc2>
 8007e3e:	f108 0801 	add.w	r8, r8, #1
 8007e42:	e7ec      	b.n	8007e1e <_printf_float+0x34e>
 8007e44:	4613      	mov	r3, r2
 8007e46:	4631      	mov	r1, r6
 8007e48:	4642      	mov	r2, r8
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	47b8      	blx	r7
 8007e4e:	3001      	adds	r0, #1
 8007e50:	d1c0      	bne.n	8007dd4 <_printf_float+0x304>
 8007e52:	e69e      	b.n	8007b92 <_printf_float+0xc2>
 8007e54:	2301      	movs	r3, #1
 8007e56:	4631      	mov	r1, r6
 8007e58:	4628      	mov	r0, r5
 8007e5a:	9205      	str	r2, [sp, #20]
 8007e5c:	47b8      	blx	r7
 8007e5e:	3001      	adds	r0, #1
 8007e60:	f43f ae97 	beq.w	8007b92 <_printf_float+0xc2>
 8007e64:	9a05      	ldr	r2, [sp, #20]
 8007e66:	f10b 0b01 	add.w	fp, fp, #1
 8007e6a:	e7b9      	b.n	8007de0 <_printf_float+0x310>
 8007e6c:	ee18 3a10 	vmov	r3, s16
 8007e70:	4652      	mov	r2, sl
 8007e72:	4631      	mov	r1, r6
 8007e74:	4628      	mov	r0, r5
 8007e76:	47b8      	blx	r7
 8007e78:	3001      	adds	r0, #1
 8007e7a:	d1be      	bne.n	8007dfa <_printf_float+0x32a>
 8007e7c:	e689      	b.n	8007b92 <_printf_float+0xc2>
 8007e7e:	9a05      	ldr	r2, [sp, #20]
 8007e80:	464b      	mov	r3, r9
 8007e82:	4442      	add	r2, r8
 8007e84:	4631      	mov	r1, r6
 8007e86:	4628      	mov	r0, r5
 8007e88:	47b8      	blx	r7
 8007e8a:	3001      	adds	r0, #1
 8007e8c:	d1c1      	bne.n	8007e12 <_printf_float+0x342>
 8007e8e:	e680      	b.n	8007b92 <_printf_float+0xc2>
 8007e90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e92:	2a01      	cmp	r2, #1
 8007e94:	dc01      	bgt.n	8007e9a <_printf_float+0x3ca>
 8007e96:	07db      	lsls	r3, r3, #31
 8007e98:	d538      	bpl.n	8007f0c <_printf_float+0x43c>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	4642      	mov	r2, r8
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	47b8      	blx	r7
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	f43f ae74 	beq.w	8007b92 <_printf_float+0xc2>
 8007eaa:	ee18 3a10 	vmov	r3, s16
 8007eae:	4652      	mov	r2, sl
 8007eb0:	4631      	mov	r1, r6
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	47b8      	blx	r7
 8007eb6:	3001      	adds	r0, #1
 8007eb8:	f43f ae6b 	beq.w	8007b92 <_printf_float+0xc2>
 8007ebc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	f7f8 fe18 	bl	8000af8 <__aeabi_dcmpeq>
 8007ec8:	b9d8      	cbnz	r0, 8007f02 <_printf_float+0x432>
 8007eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ecc:	f108 0201 	add.w	r2, r8, #1
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	47b8      	blx	r7
 8007ed8:	3001      	adds	r0, #1
 8007eda:	d10e      	bne.n	8007efa <_printf_float+0x42a>
 8007edc:	e659      	b.n	8007b92 <_printf_float+0xc2>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	4652      	mov	r2, sl
 8007ee2:	4631      	mov	r1, r6
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	47b8      	blx	r7
 8007ee8:	3001      	adds	r0, #1
 8007eea:	f43f ae52 	beq.w	8007b92 <_printf_float+0xc2>
 8007eee:	f108 0801 	add.w	r8, r8, #1
 8007ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	4543      	cmp	r3, r8
 8007ef8:	dcf1      	bgt.n	8007ede <_printf_float+0x40e>
 8007efa:	464b      	mov	r3, r9
 8007efc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f00:	e6dc      	b.n	8007cbc <_printf_float+0x1ec>
 8007f02:	f04f 0800 	mov.w	r8, #0
 8007f06:	f104 0a1a 	add.w	sl, r4, #26
 8007f0a:	e7f2      	b.n	8007ef2 <_printf_float+0x422>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	4642      	mov	r2, r8
 8007f10:	e7df      	b.n	8007ed2 <_printf_float+0x402>
 8007f12:	2301      	movs	r3, #1
 8007f14:	464a      	mov	r2, r9
 8007f16:	4631      	mov	r1, r6
 8007f18:	4628      	mov	r0, r5
 8007f1a:	47b8      	blx	r7
 8007f1c:	3001      	adds	r0, #1
 8007f1e:	f43f ae38 	beq.w	8007b92 <_printf_float+0xc2>
 8007f22:	f108 0801 	add.w	r8, r8, #1
 8007f26:	68e3      	ldr	r3, [r4, #12]
 8007f28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f2a:	1a5b      	subs	r3, r3, r1
 8007f2c:	4543      	cmp	r3, r8
 8007f2e:	dcf0      	bgt.n	8007f12 <_printf_float+0x442>
 8007f30:	e6fa      	b.n	8007d28 <_printf_float+0x258>
 8007f32:	f04f 0800 	mov.w	r8, #0
 8007f36:	f104 0919 	add.w	r9, r4, #25
 8007f3a:	e7f4      	b.n	8007f26 <_printf_float+0x456>

08007f3c <_printf_common>:
 8007f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f40:	4616      	mov	r6, r2
 8007f42:	4699      	mov	r9, r3
 8007f44:	688a      	ldr	r2, [r1, #8]
 8007f46:	690b      	ldr	r3, [r1, #16]
 8007f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	bfb8      	it	lt
 8007f50:	4613      	movlt	r3, r2
 8007f52:	6033      	str	r3, [r6, #0]
 8007f54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f58:	4607      	mov	r7, r0
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	b10a      	cbz	r2, 8007f62 <_printf_common+0x26>
 8007f5e:	3301      	adds	r3, #1
 8007f60:	6033      	str	r3, [r6, #0]
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	0699      	lsls	r1, r3, #26
 8007f66:	bf42      	ittt	mi
 8007f68:	6833      	ldrmi	r3, [r6, #0]
 8007f6a:	3302      	addmi	r3, #2
 8007f6c:	6033      	strmi	r3, [r6, #0]
 8007f6e:	6825      	ldr	r5, [r4, #0]
 8007f70:	f015 0506 	ands.w	r5, r5, #6
 8007f74:	d106      	bne.n	8007f84 <_printf_common+0x48>
 8007f76:	f104 0a19 	add.w	sl, r4, #25
 8007f7a:	68e3      	ldr	r3, [r4, #12]
 8007f7c:	6832      	ldr	r2, [r6, #0]
 8007f7e:	1a9b      	subs	r3, r3, r2
 8007f80:	42ab      	cmp	r3, r5
 8007f82:	dc26      	bgt.n	8007fd2 <_printf_common+0x96>
 8007f84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f88:	1e13      	subs	r3, r2, #0
 8007f8a:	6822      	ldr	r2, [r4, #0]
 8007f8c:	bf18      	it	ne
 8007f8e:	2301      	movne	r3, #1
 8007f90:	0692      	lsls	r2, r2, #26
 8007f92:	d42b      	bmi.n	8007fec <_printf_common+0xb0>
 8007f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f98:	4649      	mov	r1, r9
 8007f9a:	4638      	mov	r0, r7
 8007f9c:	47c0      	blx	r8
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	d01e      	beq.n	8007fe0 <_printf_common+0xa4>
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	68e5      	ldr	r5, [r4, #12]
 8007fa6:	6832      	ldr	r2, [r6, #0]
 8007fa8:	f003 0306 	and.w	r3, r3, #6
 8007fac:	2b04      	cmp	r3, #4
 8007fae:	bf08      	it	eq
 8007fb0:	1aad      	subeq	r5, r5, r2
 8007fb2:	68a3      	ldr	r3, [r4, #8]
 8007fb4:	6922      	ldr	r2, [r4, #16]
 8007fb6:	bf0c      	ite	eq
 8007fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fbc:	2500      	movne	r5, #0
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	bfc4      	itt	gt
 8007fc2:	1a9b      	subgt	r3, r3, r2
 8007fc4:	18ed      	addgt	r5, r5, r3
 8007fc6:	2600      	movs	r6, #0
 8007fc8:	341a      	adds	r4, #26
 8007fca:	42b5      	cmp	r5, r6
 8007fcc:	d11a      	bne.n	8008004 <_printf_common+0xc8>
 8007fce:	2000      	movs	r0, #0
 8007fd0:	e008      	b.n	8007fe4 <_printf_common+0xa8>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	4652      	mov	r2, sl
 8007fd6:	4649      	mov	r1, r9
 8007fd8:	4638      	mov	r0, r7
 8007fda:	47c0      	blx	r8
 8007fdc:	3001      	adds	r0, #1
 8007fde:	d103      	bne.n	8007fe8 <_printf_common+0xac>
 8007fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe8:	3501      	adds	r5, #1
 8007fea:	e7c6      	b.n	8007f7a <_printf_common+0x3e>
 8007fec:	18e1      	adds	r1, r4, r3
 8007fee:	1c5a      	adds	r2, r3, #1
 8007ff0:	2030      	movs	r0, #48	; 0x30
 8007ff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ff6:	4422      	add	r2, r4
 8007ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008000:	3302      	adds	r3, #2
 8008002:	e7c7      	b.n	8007f94 <_printf_common+0x58>
 8008004:	2301      	movs	r3, #1
 8008006:	4622      	mov	r2, r4
 8008008:	4649      	mov	r1, r9
 800800a:	4638      	mov	r0, r7
 800800c:	47c0      	blx	r8
 800800e:	3001      	adds	r0, #1
 8008010:	d0e6      	beq.n	8007fe0 <_printf_common+0xa4>
 8008012:	3601      	adds	r6, #1
 8008014:	e7d9      	b.n	8007fca <_printf_common+0x8e>
	...

08008018 <_printf_i>:
 8008018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800801c:	7e0f      	ldrb	r7, [r1, #24]
 800801e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008020:	2f78      	cmp	r7, #120	; 0x78
 8008022:	4691      	mov	r9, r2
 8008024:	4680      	mov	r8, r0
 8008026:	460c      	mov	r4, r1
 8008028:	469a      	mov	sl, r3
 800802a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800802e:	d807      	bhi.n	8008040 <_printf_i+0x28>
 8008030:	2f62      	cmp	r7, #98	; 0x62
 8008032:	d80a      	bhi.n	800804a <_printf_i+0x32>
 8008034:	2f00      	cmp	r7, #0
 8008036:	f000 80d8 	beq.w	80081ea <_printf_i+0x1d2>
 800803a:	2f58      	cmp	r7, #88	; 0x58
 800803c:	f000 80a3 	beq.w	8008186 <_printf_i+0x16e>
 8008040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008048:	e03a      	b.n	80080c0 <_printf_i+0xa8>
 800804a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800804e:	2b15      	cmp	r3, #21
 8008050:	d8f6      	bhi.n	8008040 <_printf_i+0x28>
 8008052:	a101      	add	r1, pc, #4	; (adr r1, 8008058 <_printf_i+0x40>)
 8008054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008058:	080080b1 	.word	0x080080b1
 800805c:	080080c5 	.word	0x080080c5
 8008060:	08008041 	.word	0x08008041
 8008064:	08008041 	.word	0x08008041
 8008068:	08008041 	.word	0x08008041
 800806c:	08008041 	.word	0x08008041
 8008070:	080080c5 	.word	0x080080c5
 8008074:	08008041 	.word	0x08008041
 8008078:	08008041 	.word	0x08008041
 800807c:	08008041 	.word	0x08008041
 8008080:	08008041 	.word	0x08008041
 8008084:	080081d1 	.word	0x080081d1
 8008088:	080080f5 	.word	0x080080f5
 800808c:	080081b3 	.word	0x080081b3
 8008090:	08008041 	.word	0x08008041
 8008094:	08008041 	.word	0x08008041
 8008098:	080081f3 	.word	0x080081f3
 800809c:	08008041 	.word	0x08008041
 80080a0:	080080f5 	.word	0x080080f5
 80080a4:	08008041 	.word	0x08008041
 80080a8:	08008041 	.word	0x08008041
 80080ac:	080081bb 	.word	0x080081bb
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	1d1a      	adds	r2, r3, #4
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	602a      	str	r2, [r5, #0]
 80080b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080c0:	2301      	movs	r3, #1
 80080c2:	e0a3      	b.n	800820c <_printf_i+0x1f4>
 80080c4:	6820      	ldr	r0, [r4, #0]
 80080c6:	6829      	ldr	r1, [r5, #0]
 80080c8:	0606      	lsls	r6, r0, #24
 80080ca:	f101 0304 	add.w	r3, r1, #4
 80080ce:	d50a      	bpl.n	80080e6 <_printf_i+0xce>
 80080d0:	680e      	ldr	r6, [r1, #0]
 80080d2:	602b      	str	r3, [r5, #0]
 80080d4:	2e00      	cmp	r6, #0
 80080d6:	da03      	bge.n	80080e0 <_printf_i+0xc8>
 80080d8:	232d      	movs	r3, #45	; 0x2d
 80080da:	4276      	negs	r6, r6
 80080dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080e0:	485e      	ldr	r0, [pc, #376]	; (800825c <_printf_i+0x244>)
 80080e2:	230a      	movs	r3, #10
 80080e4:	e019      	b.n	800811a <_printf_i+0x102>
 80080e6:	680e      	ldr	r6, [r1, #0]
 80080e8:	602b      	str	r3, [r5, #0]
 80080ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80080ee:	bf18      	it	ne
 80080f0:	b236      	sxthne	r6, r6
 80080f2:	e7ef      	b.n	80080d4 <_printf_i+0xbc>
 80080f4:	682b      	ldr	r3, [r5, #0]
 80080f6:	6820      	ldr	r0, [r4, #0]
 80080f8:	1d19      	adds	r1, r3, #4
 80080fa:	6029      	str	r1, [r5, #0]
 80080fc:	0601      	lsls	r1, r0, #24
 80080fe:	d501      	bpl.n	8008104 <_printf_i+0xec>
 8008100:	681e      	ldr	r6, [r3, #0]
 8008102:	e002      	b.n	800810a <_printf_i+0xf2>
 8008104:	0646      	lsls	r6, r0, #25
 8008106:	d5fb      	bpl.n	8008100 <_printf_i+0xe8>
 8008108:	881e      	ldrh	r6, [r3, #0]
 800810a:	4854      	ldr	r0, [pc, #336]	; (800825c <_printf_i+0x244>)
 800810c:	2f6f      	cmp	r7, #111	; 0x6f
 800810e:	bf0c      	ite	eq
 8008110:	2308      	moveq	r3, #8
 8008112:	230a      	movne	r3, #10
 8008114:	2100      	movs	r1, #0
 8008116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800811a:	6865      	ldr	r5, [r4, #4]
 800811c:	60a5      	str	r5, [r4, #8]
 800811e:	2d00      	cmp	r5, #0
 8008120:	bfa2      	ittt	ge
 8008122:	6821      	ldrge	r1, [r4, #0]
 8008124:	f021 0104 	bicge.w	r1, r1, #4
 8008128:	6021      	strge	r1, [r4, #0]
 800812a:	b90e      	cbnz	r6, 8008130 <_printf_i+0x118>
 800812c:	2d00      	cmp	r5, #0
 800812e:	d04d      	beq.n	80081cc <_printf_i+0x1b4>
 8008130:	4615      	mov	r5, r2
 8008132:	fbb6 f1f3 	udiv	r1, r6, r3
 8008136:	fb03 6711 	mls	r7, r3, r1, r6
 800813a:	5dc7      	ldrb	r7, [r0, r7]
 800813c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008140:	4637      	mov	r7, r6
 8008142:	42bb      	cmp	r3, r7
 8008144:	460e      	mov	r6, r1
 8008146:	d9f4      	bls.n	8008132 <_printf_i+0x11a>
 8008148:	2b08      	cmp	r3, #8
 800814a:	d10b      	bne.n	8008164 <_printf_i+0x14c>
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	07de      	lsls	r6, r3, #31
 8008150:	d508      	bpl.n	8008164 <_printf_i+0x14c>
 8008152:	6923      	ldr	r3, [r4, #16]
 8008154:	6861      	ldr	r1, [r4, #4]
 8008156:	4299      	cmp	r1, r3
 8008158:	bfde      	ittt	le
 800815a:	2330      	movle	r3, #48	; 0x30
 800815c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008160:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008164:	1b52      	subs	r2, r2, r5
 8008166:	6122      	str	r2, [r4, #16]
 8008168:	f8cd a000 	str.w	sl, [sp]
 800816c:	464b      	mov	r3, r9
 800816e:	aa03      	add	r2, sp, #12
 8008170:	4621      	mov	r1, r4
 8008172:	4640      	mov	r0, r8
 8008174:	f7ff fee2 	bl	8007f3c <_printf_common>
 8008178:	3001      	adds	r0, #1
 800817a:	d14c      	bne.n	8008216 <_printf_i+0x1fe>
 800817c:	f04f 30ff 	mov.w	r0, #4294967295
 8008180:	b004      	add	sp, #16
 8008182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008186:	4835      	ldr	r0, [pc, #212]	; (800825c <_printf_i+0x244>)
 8008188:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800818c:	6829      	ldr	r1, [r5, #0]
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	f851 6b04 	ldr.w	r6, [r1], #4
 8008194:	6029      	str	r1, [r5, #0]
 8008196:	061d      	lsls	r5, r3, #24
 8008198:	d514      	bpl.n	80081c4 <_printf_i+0x1ac>
 800819a:	07df      	lsls	r7, r3, #31
 800819c:	bf44      	itt	mi
 800819e:	f043 0320 	orrmi.w	r3, r3, #32
 80081a2:	6023      	strmi	r3, [r4, #0]
 80081a4:	b91e      	cbnz	r6, 80081ae <_printf_i+0x196>
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	f023 0320 	bic.w	r3, r3, #32
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	2310      	movs	r3, #16
 80081b0:	e7b0      	b.n	8008114 <_printf_i+0xfc>
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	f043 0320 	orr.w	r3, r3, #32
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	2378      	movs	r3, #120	; 0x78
 80081bc:	4828      	ldr	r0, [pc, #160]	; (8008260 <_printf_i+0x248>)
 80081be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081c2:	e7e3      	b.n	800818c <_printf_i+0x174>
 80081c4:	0659      	lsls	r1, r3, #25
 80081c6:	bf48      	it	mi
 80081c8:	b2b6      	uxthmi	r6, r6
 80081ca:	e7e6      	b.n	800819a <_printf_i+0x182>
 80081cc:	4615      	mov	r5, r2
 80081ce:	e7bb      	b.n	8008148 <_printf_i+0x130>
 80081d0:	682b      	ldr	r3, [r5, #0]
 80081d2:	6826      	ldr	r6, [r4, #0]
 80081d4:	6961      	ldr	r1, [r4, #20]
 80081d6:	1d18      	adds	r0, r3, #4
 80081d8:	6028      	str	r0, [r5, #0]
 80081da:	0635      	lsls	r5, r6, #24
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	d501      	bpl.n	80081e4 <_printf_i+0x1cc>
 80081e0:	6019      	str	r1, [r3, #0]
 80081e2:	e002      	b.n	80081ea <_printf_i+0x1d2>
 80081e4:	0670      	lsls	r0, r6, #25
 80081e6:	d5fb      	bpl.n	80081e0 <_printf_i+0x1c8>
 80081e8:	8019      	strh	r1, [r3, #0]
 80081ea:	2300      	movs	r3, #0
 80081ec:	6123      	str	r3, [r4, #16]
 80081ee:	4615      	mov	r5, r2
 80081f0:	e7ba      	b.n	8008168 <_printf_i+0x150>
 80081f2:	682b      	ldr	r3, [r5, #0]
 80081f4:	1d1a      	adds	r2, r3, #4
 80081f6:	602a      	str	r2, [r5, #0]
 80081f8:	681d      	ldr	r5, [r3, #0]
 80081fa:	6862      	ldr	r2, [r4, #4]
 80081fc:	2100      	movs	r1, #0
 80081fe:	4628      	mov	r0, r5
 8008200:	f7f8 f806 	bl	8000210 <memchr>
 8008204:	b108      	cbz	r0, 800820a <_printf_i+0x1f2>
 8008206:	1b40      	subs	r0, r0, r5
 8008208:	6060      	str	r0, [r4, #4]
 800820a:	6863      	ldr	r3, [r4, #4]
 800820c:	6123      	str	r3, [r4, #16]
 800820e:	2300      	movs	r3, #0
 8008210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008214:	e7a8      	b.n	8008168 <_printf_i+0x150>
 8008216:	6923      	ldr	r3, [r4, #16]
 8008218:	462a      	mov	r2, r5
 800821a:	4649      	mov	r1, r9
 800821c:	4640      	mov	r0, r8
 800821e:	47d0      	blx	sl
 8008220:	3001      	adds	r0, #1
 8008222:	d0ab      	beq.n	800817c <_printf_i+0x164>
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	079b      	lsls	r3, r3, #30
 8008228:	d413      	bmi.n	8008252 <_printf_i+0x23a>
 800822a:	68e0      	ldr	r0, [r4, #12]
 800822c:	9b03      	ldr	r3, [sp, #12]
 800822e:	4298      	cmp	r0, r3
 8008230:	bfb8      	it	lt
 8008232:	4618      	movlt	r0, r3
 8008234:	e7a4      	b.n	8008180 <_printf_i+0x168>
 8008236:	2301      	movs	r3, #1
 8008238:	4632      	mov	r2, r6
 800823a:	4649      	mov	r1, r9
 800823c:	4640      	mov	r0, r8
 800823e:	47d0      	blx	sl
 8008240:	3001      	adds	r0, #1
 8008242:	d09b      	beq.n	800817c <_printf_i+0x164>
 8008244:	3501      	adds	r5, #1
 8008246:	68e3      	ldr	r3, [r4, #12]
 8008248:	9903      	ldr	r1, [sp, #12]
 800824a:	1a5b      	subs	r3, r3, r1
 800824c:	42ab      	cmp	r3, r5
 800824e:	dcf2      	bgt.n	8008236 <_printf_i+0x21e>
 8008250:	e7eb      	b.n	800822a <_printf_i+0x212>
 8008252:	2500      	movs	r5, #0
 8008254:	f104 0619 	add.w	r6, r4, #25
 8008258:	e7f5      	b.n	8008246 <_printf_i+0x22e>
 800825a:	bf00      	nop
 800825c:	0800a60e 	.word	0x0800a60e
 8008260:	0800a61f 	.word	0x0800a61f

08008264 <iprintf>:
 8008264:	b40f      	push	{r0, r1, r2, r3}
 8008266:	4b0a      	ldr	r3, [pc, #40]	; (8008290 <iprintf+0x2c>)
 8008268:	b513      	push	{r0, r1, r4, lr}
 800826a:	681c      	ldr	r4, [r3, #0]
 800826c:	b124      	cbz	r4, 8008278 <iprintf+0x14>
 800826e:	69a3      	ldr	r3, [r4, #24]
 8008270:	b913      	cbnz	r3, 8008278 <iprintf+0x14>
 8008272:	4620      	mov	r0, r4
 8008274:	f001 f8d8 	bl	8009428 <__sinit>
 8008278:	ab05      	add	r3, sp, #20
 800827a:	9a04      	ldr	r2, [sp, #16]
 800827c:	68a1      	ldr	r1, [r4, #8]
 800827e:	9301      	str	r3, [sp, #4]
 8008280:	4620      	mov	r0, r4
 8008282:	f001 fe87 	bl	8009f94 <_vfiprintf_r>
 8008286:	b002      	add	sp, #8
 8008288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800828c:	b004      	add	sp, #16
 800828e:	4770      	bx	lr
 8008290:	2000000c 	.word	0x2000000c

08008294 <_puts_r>:
 8008294:	b570      	push	{r4, r5, r6, lr}
 8008296:	460e      	mov	r6, r1
 8008298:	4605      	mov	r5, r0
 800829a:	b118      	cbz	r0, 80082a4 <_puts_r+0x10>
 800829c:	6983      	ldr	r3, [r0, #24]
 800829e:	b90b      	cbnz	r3, 80082a4 <_puts_r+0x10>
 80082a0:	f001 f8c2 	bl	8009428 <__sinit>
 80082a4:	69ab      	ldr	r3, [r5, #24]
 80082a6:	68ac      	ldr	r4, [r5, #8]
 80082a8:	b913      	cbnz	r3, 80082b0 <_puts_r+0x1c>
 80082aa:	4628      	mov	r0, r5
 80082ac:	f001 f8bc 	bl	8009428 <__sinit>
 80082b0:	4b2c      	ldr	r3, [pc, #176]	; (8008364 <_puts_r+0xd0>)
 80082b2:	429c      	cmp	r4, r3
 80082b4:	d120      	bne.n	80082f8 <_puts_r+0x64>
 80082b6:	686c      	ldr	r4, [r5, #4]
 80082b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082ba:	07db      	lsls	r3, r3, #31
 80082bc:	d405      	bmi.n	80082ca <_puts_r+0x36>
 80082be:	89a3      	ldrh	r3, [r4, #12]
 80082c0:	0598      	lsls	r0, r3, #22
 80082c2:	d402      	bmi.n	80082ca <_puts_r+0x36>
 80082c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082c6:	f001 f952 	bl	800956e <__retarget_lock_acquire_recursive>
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	0719      	lsls	r1, r3, #28
 80082ce:	d51d      	bpl.n	800830c <_puts_r+0x78>
 80082d0:	6923      	ldr	r3, [r4, #16]
 80082d2:	b1db      	cbz	r3, 800830c <_puts_r+0x78>
 80082d4:	3e01      	subs	r6, #1
 80082d6:	68a3      	ldr	r3, [r4, #8]
 80082d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80082dc:	3b01      	subs	r3, #1
 80082de:	60a3      	str	r3, [r4, #8]
 80082e0:	bb39      	cbnz	r1, 8008332 <_puts_r+0x9e>
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	da38      	bge.n	8008358 <_puts_r+0xc4>
 80082e6:	4622      	mov	r2, r4
 80082e8:	210a      	movs	r1, #10
 80082ea:	4628      	mov	r0, r5
 80082ec:	f000 f848 	bl	8008380 <__swbuf_r>
 80082f0:	3001      	adds	r0, #1
 80082f2:	d011      	beq.n	8008318 <_puts_r+0x84>
 80082f4:	250a      	movs	r5, #10
 80082f6:	e011      	b.n	800831c <_puts_r+0x88>
 80082f8:	4b1b      	ldr	r3, [pc, #108]	; (8008368 <_puts_r+0xd4>)
 80082fa:	429c      	cmp	r4, r3
 80082fc:	d101      	bne.n	8008302 <_puts_r+0x6e>
 80082fe:	68ac      	ldr	r4, [r5, #8]
 8008300:	e7da      	b.n	80082b8 <_puts_r+0x24>
 8008302:	4b1a      	ldr	r3, [pc, #104]	; (800836c <_puts_r+0xd8>)
 8008304:	429c      	cmp	r4, r3
 8008306:	bf08      	it	eq
 8008308:	68ec      	ldreq	r4, [r5, #12]
 800830a:	e7d5      	b.n	80082b8 <_puts_r+0x24>
 800830c:	4621      	mov	r1, r4
 800830e:	4628      	mov	r0, r5
 8008310:	f000 f888 	bl	8008424 <__swsetup_r>
 8008314:	2800      	cmp	r0, #0
 8008316:	d0dd      	beq.n	80082d4 <_puts_r+0x40>
 8008318:	f04f 35ff 	mov.w	r5, #4294967295
 800831c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800831e:	07da      	lsls	r2, r3, #31
 8008320:	d405      	bmi.n	800832e <_puts_r+0x9a>
 8008322:	89a3      	ldrh	r3, [r4, #12]
 8008324:	059b      	lsls	r3, r3, #22
 8008326:	d402      	bmi.n	800832e <_puts_r+0x9a>
 8008328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800832a:	f001 f921 	bl	8009570 <__retarget_lock_release_recursive>
 800832e:	4628      	mov	r0, r5
 8008330:	bd70      	pop	{r4, r5, r6, pc}
 8008332:	2b00      	cmp	r3, #0
 8008334:	da04      	bge.n	8008340 <_puts_r+0xac>
 8008336:	69a2      	ldr	r2, [r4, #24]
 8008338:	429a      	cmp	r2, r3
 800833a:	dc06      	bgt.n	800834a <_puts_r+0xb6>
 800833c:	290a      	cmp	r1, #10
 800833e:	d004      	beq.n	800834a <_puts_r+0xb6>
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	6022      	str	r2, [r4, #0]
 8008346:	7019      	strb	r1, [r3, #0]
 8008348:	e7c5      	b.n	80082d6 <_puts_r+0x42>
 800834a:	4622      	mov	r2, r4
 800834c:	4628      	mov	r0, r5
 800834e:	f000 f817 	bl	8008380 <__swbuf_r>
 8008352:	3001      	adds	r0, #1
 8008354:	d1bf      	bne.n	80082d6 <_puts_r+0x42>
 8008356:	e7df      	b.n	8008318 <_puts_r+0x84>
 8008358:	6823      	ldr	r3, [r4, #0]
 800835a:	250a      	movs	r5, #10
 800835c:	1c5a      	adds	r2, r3, #1
 800835e:	6022      	str	r2, [r4, #0]
 8008360:	701d      	strb	r5, [r3, #0]
 8008362:	e7db      	b.n	800831c <_puts_r+0x88>
 8008364:	0800a6e0 	.word	0x0800a6e0
 8008368:	0800a700 	.word	0x0800a700
 800836c:	0800a6c0 	.word	0x0800a6c0

08008370 <puts>:
 8008370:	4b02      	ldr	r3, [pc, #8]	; (800837c <puts+0xc>)
 8008372:	4601      	mov	r1, r0
 8008374:	6818      	ldr	r0, [r3, #0]
 8008376:	f7ff bf8d 	b.w	8008294 <_puts_r>
 800837a:	bf00      	nop
 800837c:	2000000c 	.word	0x2000000c

08008380 <__swbuf_r>:
 8008380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008382:	460e      	mov	r6, r1
 8008384:	4614      	mov	r4, r2
 8008386:	4605      	mov	r5, r0
 8008388:	b118      	cbz	r0, 8008392 <__swbuf_r+0x12>
 800838a:	6983      	ldr	r3, [r0, #24]
 800838c:	b90b      	cbnz	r3, 8008392 <__swbuf_r+0x12>
 800838e:	f001 f84b 	bl	8009428 <__sinit>
 8008392:	4b21      	ldr	r3, [pc, #132]	; (8008418 <__swbuf_r+0x98>)
 8008394:	429c      	cmp	r4, r3
 8008396:	d12b      	bne.n	80083f0 <__swbuf_r+0x70>
 8008398:	686c      	ldr	r4, [r5, #4]
 800839a:	69a3      	ldr	r3, [r4, #24]
 800839c:	60a3      	str	r3, [r4, #8]
 800839e:	89a3      	ldrh	r3, [r4, #12]
 80083a0:	071a      	lsls	r2, r3, #28
 80083a2:	d52f      	bpl.n	8008404 <__swbuf_r+0x84>
 80083a4:	6923      	ldr	r3, [r4, #16]
 80083a6:	b36b      	cbz	r3, 8008404 <__swbuf_r+0x84>
 80083a8:	6923      	ldr	r3, [r4, #16]
 80083aa:	6820      	ldr	r0, [r4, #0]
 80083ac:	1ac0      	subs	r0, r0, r3
 80083ae:	6963      	ldr	r3, [r4, #20]
 80083b0:	b2f6      	uxtb	r6, r6
 80083b2:	4283      	cmp	r3, r0
 80083b4:	4637      	mov	r7, r6
 80083b6:	dc04      	bgt.n	80083c2 <__swbuf_r+0x42>
 80083b8:	4621      	mov	r1, r4
 80083ba:	4628      	mov	r0, r5
 80083bc:	f000 ffa0 	bl	8009300 <_fflush_r>
 80083c0:	bb30      	cbnz	r0, 8008410 <__swbuf_r+0x90>
 80083c2:	68a3      	ldr	r3, [r4, #8]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	60a3      	str	r3, [r4, #8]
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	1c5a      	adds	r2, r3, #1
 80083cc:	6022      	str	r2, [r4, #0]
 80083ce:	701e      	strb	r6, [r3, #0]
 80083d0:	6963      	ldr	r3, [r4, #20]
 80083d2:	3001      	adds	r0, #1
 80083d4:	4283      	cmp	r3, r0
 80083d6:	d004      	beq.n	80083e2 <__swbuf_r+0x62>
 80083d8:	89a3      	ldrh	r3, [r4, #12]
 80083da:	07db      	lsls	r3, r3, #31
 80083dc:	d506      	bpl.n	80083ec <__swbuf_r+0x6c>
 80083de:	2e0a      	cmp	r6, #10
 80083e0:	d104      	bne.n	80083ec <__swbuf_r+0x6c>
 80083e2:	4621      	mov	r1, r4
 80083e4:	4628      	mov	r0, r5
 80083e6:	f000 ff8b 	bl	8009300 <_fflush_r>
 80083ea:	b988      	cbnz	r0, 8008410 <__swbuf_r+0x90>
 80083ec:	4638      	mov	r0, r7
 80083ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083f0:	4b0a      	ldr	r3, [pc, #40]	; (800841c <__swbuf_r+0x9c>)
 80083f2:	429c      	cmp	r4, r3
 80083f4:	d101      	bne.n	80083fa <__swbuf_r+0x7a>
 80083f6:	68ac      	ldr	r4, [r5, #8]
 80083f8:	e7cf      	b.n	800839a <__swbuf_r+0x1a>
 80083fa:	4b09      	ldr	r3, [pc, #36]	; (8008420 <__swbuf_r+0xa0>)
 80083fc:	429c      	cmp	r4, r3
 80083fe:	bf08      	it	eq
 8008400:	68ec      	ldreq	r4, [r5, #12]
 8008402:	e7ca      	b.n	800839a <__swbuf_r+0x1a>
 8008404:	4621      	mov	r1, r4
 8008406:	4628      	mov	r0, r5
 8008408:	f000 f80c 	bl	8008424 <__swsetup_r>
 800840c:	2800      	cmp	r0, #0
 800840e:	d0cb      	beq.n	80083a8 <__swbuf_r+0x28>
 8008410:	f04f 37ff 	mov.w	r7, #4294967295
 8008414:	e7ea      	b.n	80083ec <__swbuf_r+0x6c>
 8008416:	bf00      	nop
 8008418:	0800a6e0 	.word	0x0800a6e0
 800841c:	0800a700 	.word	0x0800a700
 8008420:	0800a6c0 	.word	0x0800a6c0

08008424 <__swsetup_r>:
 8008424:	4b32      	ldr	r3, [pc, #200]	; (80084f0 <__swsetup_r+0xcc>)
 8008426:	b570      	push	{r4, r5, r6, lr}
 8008428:	681d      	ldr	r5, [r3, #0]
 800842a:	4606      	mov	r6, r0
 800842c:	460c      	mov	r4, r1
 800842e:	b125      	cbz	r5, 800843a <__swsetup_r+0x16>
 8008430:	69ab      	ldr	r3, [r5, #24]
 8008432:	b913      	cbnz	r3, 800843a <__swsetup_r+0x16>
 8008434:	4628      	mov	r0, r5
 8008436:	f000 fff7 	bl	8009428 <__sinit>
 800843a:	4b2e      	ldr	r3, [pc, #184]	; (80084f4 <__swsetup_r+0xd0>)
 800843c:	429c      	cmp	r4, r3
 800843e:	d10f      	bne.n	8008460 <__swsetup_r+0x3c>
 8008440:	686c      	ldr	r4, [r5, #4]
 8008442:	89a3      	ldrh	r3, [r4, #12]
 8008444:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008448:	0719      	lsls	r1, r3, #28
 800844a:	d42c      	bmi.n	80084a6 <__swsetup_r+0x82>
 800844c:	06dd      	lsls	r5, r3, #27
 800844e:	d411      	bmi.n	8008474 <__swsetup_r+0x50>
 8008450:	2309      	movs	r3, #9
 8008452:	6033      	str	r3, [r6, #0]
 8008454:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008458:	81a3      	strh	r3, [r4, #12]
 800845a:	f04f 30ff 	mov.w	r0, #4294967295
 800845e:	e03e      	b.n	80084de <__swsetup_r+0xba>
 8008460:	4b25      	ldr	r3, [pc, #148]	; (80084f8 <__swsetup_r+0xd4>)
 8008462:	429c      	cmp	r4, r3
 8008464:	d101      	bne.n	800846a <__swsetup_r+0x46>
 8008466:	68ac      	ldr	r4, [r5, #8]
 8008468:	e7eb      	b.n	8008442 <__swsetup_r+0x1e>
 800846a:	4b24      	ldr	r3, [pc, #144]	; (80084fc <__swsetup_r+0xd8>)
 800846c:	429c      	cmp	r4, r3
 800846e:	bf08      	it	eq
 8008470:	68ec      	ldreq	r4, [r5, #12]
 8008472:	e7e6      	b.n	8008442 <__swsetup_r+0x1e>
 8008474:	0758      	lsls	r0, r3, #29
 8008476:	d512      	bpl.n	800849e <__swsetup_r+0x7a>
 8008478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800847a:	b141      	cbz	r1, 800848e <__swsetup_r+0x6a>
 800847c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008480:	4299      	cmp	r1, r3
 8008482:	d002      	beq.n	800848a <__swsetup_r+0x66>
 8008484:	4630      	mov	r0, r6
 8008486:	f001 fc7b 	bl	8009d80 <_free_r>
 800848a:	2300      	movs	r3, #0
 800848c:	6363      	str	r3, [r4, #52]	; 0x34
 800848e:	89a3      	ldrh	r3, [r4, #12]
 8008490:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008494:	81a3      	strh	r3, [r4, #12]
 8008496:	2300      	movs	r3, #0
 8008498:	6063      	str	r3, [r4, #4]
 800849a:	6923      	ldr	r3, [r4, #16]
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	89a3      	ldrh	r3, [r4, #12]
 80084a0:	f043 0308 	orr.w	r3, r3, #8
 80084a4:	81a3      	strh	r3, [r4, #12]
 80084a6:	6923      	ldr	r3, [r4, #16]
 80084a8:	b94b      	cbnz	r3, 80084be <__swsetup_r+0x9a>
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80084b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084b4:	d003      	beq.n	80084be <__swsetup_r+0x9a>
 80084b6:	4621      	mov	r1, r4
 80084b8:	4630      	mov	r0, r6
 80084ba:	f001 f87f 	bl	80095bc <__smakebuf_r>
 80084be:	89a0      	ldrh	r0, [r4, #12]
 80084c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084c4:	f010 0301 	ands.w	r3, r0, #1
 80084c8:	d00a      	beq.n	80084e0 <__swsetup_r+0xbc>
 80084ca:	2300      	movs	r3, #0
 80084cc:	60a3      	str	r3, [r4, #8]
 80084ce:	6963      	ldr	r3, [r4, #20]
 80084d0:	425b      	negs	r3, r3
 80084d2:	61a3      	str	r3, [r4, #24]
 80084d4:	6923      	ldr	r3, [r4, #16]
 80084d6:	b943      	cbnz	r3, 80084ea <__swsetup_r+0xc6>
 80084d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80084dc:	d1ba      	bne.n	8008454 <__swsetup_r+0x30>
 80084de:	bd70      	pop	{r4, r5, r6, pc}
 80084e0:	0781      	lsls	r1, r0, #30
 80084e2:	bf58      	it	pl
 80084e4:	6963      	ldrpl	r3, [r4, #20]
 80084e6:	60a3      	str	r3, [r4, #8]
 80084e8:	e7f4      	b.n	80084d4 <__swsetup_r+0xb0>
 80084ea:	2000      	movs	r0, #0
 80084ec:	e7f7      	b.n	80084de <__swsetup_r+0xba>
 80084ee:	bf00      	nop
 80084f0:	2000000c 	.word	0x2000000c
 80084f4:	0800a6e0 	.word	0x0800a6e0
 80084f8:	0800a700 	.word	0x0800a700
 80084fc:	0800a6c0 	.word	0x0800a6c0

08008500 <quorem>:
 8008500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008504:	6903      	ldr	r3, [r0, #16]
 8008506:	690c      	ldr	r4, [r1, #16]
 8008508:	42a3      	cmp	r3, r4
 800850a:	4607      	mov	r7, r0
 800850c:	f2c0 8081 	blt.w	8008612 <quorem+0x112>
 8008510:	3c01      	subs	r4, #1
 8008512:	f101 0814 	add.w	r8, r1, #20
 8008516:	f100 0514 	add.w	r5, r0, #20
 800851a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800851e:	9301      	str	r3, [sp, #4]
 8008520:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008524:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008528:	3301      	adds	r3, #1
 800852a:	429a      	cmp	r2, r3
 800852c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008530:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008534:	fbb2 f6f3 	udiv	r6, r2, r3
 8008538:	d331      	bcc.n	800859e <quorem+0x9e>
 800853a:	f04f 0e00 	mov.w	lr, #0
 800853e:	4640      	mov	r0, r8
 8008540:	46ac      	mov	ip, r5
 8008542:	46f2      	mov	sl, lr
 8008544:	f850 2b04 	ldr.w	r2, [r0], #4
 8008548:	b293      	uxth	r3, r2
 800854a:	fb06 e303 	mla	r3, r6, r3, lr
 800854e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008552:	b29b      	uxth	r3, r3
 8008554:	ebaa 0303 	sub.w	r3, sl, r3
 8008558:	f8dc a000 	ldr.w	sl, [ip]
 800855c:	0c12      	lsrs	r2, r2, #16
 800855e:	fa13 f38a 	uxtah	r3, r3, sl
 8008562:	fb06 e202 	mla	r2, r6, r2, lr
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	9b00      	ldr	r3, [sp, #0]
 800856a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800856e:	b292      	uxth	r2, r2
 8008570:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008574:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008578:	f8bd 3000 	ldrh.w	r3, [sp]
 800857c:	4581      	cmp	r9, r0
 800857e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008582:	f84c 3b04 	str.w	r3, [ip], #4
 8008586:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800858a:	d2db      	bcs.n	8008544 <quorem+0x44>
 800858c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008590:	b92b      	cbnz	r3, 800859e <quorem+0x9e>
 8008592:	9b01      	ldr	r3, [sp, #4]
 8008594:	3b04      	subs	r3, #4
 8008596:	429d      	cmp	r5, r3
 8008598:	461a      	mov	r2, r3
 800859a:	d32e      	bcc.n	80085fa <quorem+0xfa>
 800859c:	613c      	str	r4, [r7, #16]
 800859e:	4638      	mov	r0, r7
 80085a0:	f001 fad6 	bl	8009b50 <__mcmp>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	db24      	blt.n	80085f2 <quorem+0xf2>
 80085a8:	3601      	adds	r6, #1
 80085aa:	4628      	mov	r0, r5
 80085ac:	f04f 0c00 	mov.w	ip, #0
 80085b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80085b4:	f8d0 e000 	ldr.w	lr, [r0]
 80085b8:	b293      	uxth	r3, r2
 80085ba:	ebac 0303 	sub.w	r3, ip, r3
 80085be:	0c12      	lsrs	r2, r2, #16
 80085c0:	fa13 f38e 	uxtah	r3, r3, lr
 80085c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80085c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085d2:	45c1      	cmp	r9, r8
 80085d4:	f840 3b04 	str.w	r3, [r0], #4
 80085d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80085dc:	d2e8      	bcs.n	80085b0 <quorem+0xb0>
 80085de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085e6:	b922      	cbnz	r2, 80085f2 <quorem+0xf2>
 80085e8:	3b04      	subs	r3, #4
 80085ea:	429d      	cmp	r5, r3
 80085ec:	461a      	mov	r2, r3
 80085ee:	d30a      	bcc.n	8008606 <quorem+0x106>
 80085f0:	613c      	str	r4, [r7, #16]
 80085f2:	4630      	mov	r0, r6
 80085f4:	b003      	add	sp, #12
 80085f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fa:	6812      	ldr	r2, [r2, #0]
 80085fc:	3b04      	subs	r3, #4
 80085fe:	2a00      	cmp	r2, #0
 8008600:	d1cc      	bne.n	800859c <quorem+0x9c>
 8008602:	3c01      	subs	r4, #1
 8008604:	e7c7      	b.n	8008596 <quorem+0x96>
 8008606:	6812      	ldr	r2, [r2, #0]
 8008608:	3b04      	subs	r3, #4
 800860a:	2a00      	cmp	r2, #0
 800860c:	d1f0      	bne.n	80085f0 <quorem+0xf0>
 800860e:	3c01      	subs	r4, #1
 8008610:	e7eb      	b.n	80085ea <quorem+0xea>
 8008612:	2000      	movs	r0, #0
 8008614:	e7ee      	b.n	80085f4 <quorem+0xf4>
	...

08008618 <_dtoa_r>:
 8008618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861c:	ed2d 8b04 	vpush	{d8-d9}
 8008620:	ec57 6b10 	vmov	r6, r7, d0
 8008624:	b093      	sub	sp, #76	; 0x4c
 8008626:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008628:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800862c:	9106      	str	r1, [sp, #24]
 800862e:	ee10 aa10 	vmov	sl, s0
 8008632:	4604      	mov	r4, r0
 8008634:	9209      	str	r2, [sp, #36]	; 0x24
 8008636:	930c      	str	r3, [sp, #48]	; 0x30
 8008638:	46bb      	mov	fp, r7
 800863a:	b975      	cbnz	r5, 800865a <_dtoa_r+0x42>
 800863c:	2010      	movs	r0, #16
 800863e:	f000 fffd 	bl	800963c <malloc>
 8008642:	4602      	mov	r2, r0
 8008644:	6260      	str	r0, [r4, #36]	; 0x24
 8008646:	b920      	cbnz	r0, 8008652 <_dtoa_r+0x3a>
 8008648:	4ba7      	ldr	r3, [pc, #668]	; (80088e8 <_dtoa_r+0x2d0>)
 800864a:	21ea      	movs	r1, #234	; 0xea
 800864c:	48a7      	ldr	r0, [pc, #668]	; (80088ec <_dtoa_r+0x2d4>)
 800864e:	f001 fe37 	bl	800a2c0 <__assert_func>
 8008652:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008656:	6005      	str	r5, [r0, #0]
 8008658:	60c5      	str	r5, [r0, #12]
 800865a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800865c:	6819      	ldr	r1, [r3, #0]
 800865e:	b151      	cbz	r1, 8008676 <_dtoa_r+0x5e>
 8008660:	685a      	ldr	r2, [r3, #4]
 8008662:	604a      	str	r2, [r1, #4]
 8008664:	2301      	movs	r3, #1
 8008666:	4093      	lsls	r3, r2
 8008668:	608b      	str	r3, [r1, #8]
 800866a:	4620      	mov	r0, r4
 800866c:	f001 f82e 	bl	80096cc <_Bfree>
 8008670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	1e3b      	subs	r3, r7, #0
 8008678:	bfaa      	itet	ge
 800867a:	2300      	movge	r3, #0
 800867c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008680:	f8c8 3000 	strge.w	r3, [r8]
 8008684:	4b9a      	ldr	r3, [pc, #616]	; (80088f0 <_dtoa_r+0x2d8>)
 8008686:	bfbc      	itt	lt
 8008688:	2201      	movlt	r2, #1
 800868a:	f8c8 2000 	strlt.w	r2, [r8]
 800868e:	ea33 030b 	bics.w	r3, r3, fp
 8008692:	d11b      	bne.n	80086cc <_dtoa_r+0xb4>
 8008694:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008696:	f242 730f 	movw	r3, #9999	; 0x270f
 800869a:	6013      	str	r3, [r2, #0]
 800869c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086a0:	4333      	orrs	r3, r6
 80086a2:	f000 8592 	beq.w	80091ca <_dtoa_r+0xbb2>
 80086a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086a8:	b963      	cbnz	r3, 80086c4 <_dtoa_r+0xac>
 80086aa:	4b92      	ldr	r3, [pc, #584]	; (80088f4 <_dtoa_r+0x2dc>)
 80086ac:	e022      	b.n	80086f4 <_dtoa_r+0xdc>
 80086ae:	4b92      	ldr	r3, [pc, #584]	; (80088f8 <_dtoa_r+0x2e0>)
 80086b0:	9301      	str	r3, [sp, #4]
 80086b2:	3308      	adds	r3, #8
 80086b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80086b6:	6013      	str	r3, [r2, #0]
 80086b8:	9801      	ldr	r0, [sp, #4]
 80086ba:	b013      	add	sp, #76	; 0x4c
 80086bc:	ecbd 8b04 	vpop	{d8-d9}
 80086c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c4:	4b8b      	ldr	r3, [pc, #556]	; (80088f4 <_dtoa_r+0x2dc>)
 80086c6:	9301      	str	r3, [sp, #4]
 80086c8:	3303      	adds	r3, #3
 80086ca:	e7f3      	b.n	80086b4 <_dtoa_r+0x9c>
 80086cc:	2200      	movs	r2, #0
 80086ce:	2300      	movs	r3, #0
 80086d0:	4650      	mov	r0, sl
 80086d2:	4659      	mov	r1, fp
 80086d4:	f7f8 fa10 	bl	8000af8 <__aeabi_dcmpeq>
 80086d8:	ec4b ab19 	vmov	d9, sl, fp
 80086dc:	4680      	mov	r8, r0
 80086de:	b158      	cbz	r0, 80086f8 <_dtoa_r+0xe0>
 80086e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086e2:	2301      	movs	r3, #1
 80086e4:	6013      	str	r3, [r2, #0]
 80086e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f000 856b 	beq.w	80091c4 <_dtoa_r+0xbac>
 80086ee:	4883      	ldr	r0, [pc, #524]	; (80088fc <_dtoa_r+0x2e4>)
 80086f0:	6018      	str	r0, [r3, #0]
 80086f2:	1e43      	subs	r3, r0, #1
 80086f4:	9301      	str	r3, [sp, #4]
 80086f6:	e7df      	b.n	80086b8 <_dtoa_r+0xa0>
 80086f8:	ec4b ab10 	vmov	d0, sl, fp
 80086fc:	aa10      	add	r2, sp, #64	; 0x40
 80086fe:	a911      	add	r1, sp, #68	; 0x44
 8008700:	4620      	mov	r0, r4
 8008702:	f001 facb 	bl	8009c9c <__d2b>
 8008706:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800870a:	ee08 0a10 	vmov	s16, r0
 800870e:	2d00      	cmp	r5, #0
 8008710:	f000 8084 	beq.w	800881c <_dtoa_r+0x204>
 8008714:	ee19 3a90 	vmov	r3, s19
 8008718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800871c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008720:	4656      	mov	r6, sl
 8008722:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008726:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800872a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800872e:	4b74      	ldr	r3, [pc, #464]	; (8008900 <_dtoa_r+0x2e8>)
 8008730:	2200      	movs	r2, #0
 8008732:	4630      	mov	r0, r6
 8008734:	4639      	mov	r1, r7
 8008736:	f7f7 fdbf 	bl	80002b8 <__aeabi_dsub>
 800873a:	a365      	add	r3, pc, #404	; (adr r3, 80088d0 <_dtoa_r+0x2b8>)
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	f7f7 ff72 	bl	8000628 <__aeabi_dmul>
 8008744:	a364      	add	r3, pc, #400	; (adr r3, 80088d8 <_dtoa_r+0x2c0>)
 8008746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874a:	f7f7 fdb7 	bl	80002bc <__adddf3>
 800874e:	4606      	mov	r6, r0
 8008750:	4628      	mov	r0, r5
 8008752:	460f      	mov	r7, r1
 8008754:	f7f7 fefe 	bl	8000554 <__aeabi_i2d>
 8008758:	a361      	add	r3, pc, #388	; (adr r3, 80088e0 <_dtoa_r+0x2c8>)
 800875a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875e:	f7f7 ff63 	bl	8000628 <__aeabi_dmul>
 8008762:	4602      	mov	r2, r0
 8008764:	460b      	mov	r3, r1
 8008766:	4630      	mov	r0, r6
 8008768:	4639      	mov	r1, r7
 800876a:	f7f7 fda7 	bl	80002bc <__adddf3>
 800876e:	4606      	mov	r6, r0
 8008770:	460f      	mov	r7, r1
 8008772:	f7f8 fa09 	bl	8000b88 <__aeabi_d2iz>
 8008776:	2200      	movs	r2, #0
 8008778:	9000      	str	r0, [sp, #0]
 800877a:	2300      	movs	r3, #0
 800877c:	4630      	mov	r0, r6
 800877e:	4639      	mov	r1, r7
 8008780:	f7f8 f9c4 	bl	8000b0c <__aeabi_dcmplt>
 8008784:	b150      	cbz	r0, 800879c <_dtoa_r+0x184>
 8008786:	9800      	ldr	r0, [sp, #0]
 8008788:	f7f7 fee4 	bl	8000554 <__aeabi_i2d>
 800878c:	4632      	mov	r2, r6
 800878e:	463b      	mov	r3, r7
 8008790:	f7f8 f9b2 	bl	8000af8 <__aeabi_dcmpeq>
 8008794:	b910      	cbnz	r0, 800879c <_dtoa_r+0x184>
 8008796:	9b00      	ldr	r3, [sp, #0]
 8008798:	3b01      	subs	r3, #1
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	9b00      	ldr	r3, [sp, #0]
 800879e:	2b16      	cmp	r3, #22
 80087a0:	d85a      	bhi.n	8008858 <_dtoa_r+0x240>
 80087a2:	9a00      	ldr	r2, [sp, #0]
 80087a4:	4b57      	ldr	r3, [pc, #348]	; (8008904 <_dtoa_r+0x2ec>)
 80087a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ae:	ec51 0b19 	vmov	r0, r1, d9
 80087b2:	f7f8 f9ab 	bl	8000b0c <__aeabi_dcmplt>
 80087b6:	2800      	cmp	r0, #0
 80087b8:	d050      	beq.n	800885c <_dtoa_r+0x244>
 80087ba:	9b00      	ldr	r3, [sp, #0]
 80087bc:	3b01      	subs	r3, #1
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	2300      	movs	r3, #0
 80087c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80087c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087c6:	1b5d      	subs	r5, r3, r5
 80087c8:	1e6b      	subs	r3, r5, #1
 80087ca:	9305      	str	r3, [sp, #20]
 80087cc:	bf45      	ittet	mi
 80087ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80087d2:	9304      	strmi	r3, [sp, #16]
 80087d4:	2300      	movpl	r3, #0
 80087d6:	2300      	movmi	r3, #0
 80087d8:	bf4c      	ite	mi
 80087da:	9305      	strmi	r3, [sp, #20]
 80087dc:	9304      	strpl	r3, [sp, #16]
 80087de:	9b00      	ldr	r3, [sp, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	db3d      	blt.n	8008860 <_dtoa_r+0x248>
 80087e4:	9b05      	ldr	r3, [sp, #20]
 80087e6:	9a00      	ldr	r2, [sp, #0]
 80087e8:	920a      	str	r2, [sp, #40]	; 0x28
 80087ea:	4413      	add	r3, r2
 80087ec:	9305      	str	r3, [sp, #20]
 80087ee:	2300      	movs	r3, #0
 80087f0:	9307      	str	r3, [sp, #28]
 80087f2:	9b06      	ldr	r3, [sp, #24]
 80087f4:	2b09      	cmp	r3, #9
 80087f6:	f200 8089 	bhi.w	800890c <_dtoa_r+0x2f4>
 80087fa:	2b05      	cmp	r3, #5
 80087fc:	bfc4      	itt	gt
 80087fe:	3b04      	subgt	r3, #4
 8008800:	9306      	strgt	r3, [sp, #24]
 8008802:	9b06      	ldr	r3, [sp, #24]
 8008804:	f1a3 0302 	sub.w	r3, r3, #2
 8008808:	bfcc      	ite	gt
 800880a:	2500      	movgt	r5, #0
 800880c:	2501      	movle	r5, #1
 800880e:	2b03      	cmp	r3, #3
 8008810:	f200 8087 	bhi.w	8008922 <_dtoa_r+0x30a>
 8008814:	e8df f003 	tbb	[pc, r3]
 8008818:	59383a2d 	.word	0x59383a2d
 800881c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008820:	441d      	add	r5, r3
 8008822:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008826:	2b20      	cmp	r3, #32
 8008828:	bfc1      	itttt	gt
 800882a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800882e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008832:	fa0b f303 	lslgt.w	r3, fp, r3
 8008836:	fa26 f000 	lsrgt.w	r0, r6, r0
 800883a:	bfda      	itte	le
 800883c:	f1c3 0320 	rsble	r3, r3, #32
 8008840:	fa06 f003 	lslle.w	r0, r6, r3
 8008844:	4318      	orrgt	r0, r3
 8008846:	f7f7 fe75 	bl	8000534 <__aeabi_ui2d>
 800884a:	2301      	movs	r3, #1
 800884c:	4606      	mov	r6, r0
 800884e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008852:	3d01      	subs	r5, #1
 8008854:	930e      	str	r3, [sp, #56]	; 0x38
 8008856:	e76a      	b.n	800872e <_dtoa_r+0x116>
 8008858:	2301      	movs	r3, #1
 800885a:	e7b2      	b.n	80087c2 <_dtoa_r+0x1aa>
 800885c:	900b      	str	r0, [sp, #44]	; 0x2c
 800885e:	e7b1      	b.n	80087c4 <_dtoa_r+0x1ac>
 8008860:	9b04      	ldr	r3, [sp, #16]
 8008862:	9a00      	ldr	r2, [sp, #0]
 8008864:	1a9b      	subs	r3, r3, r2
 8008866:	9304      	str	r3, [sp, #16]
 8008868:	4253      	negs	r3, r2
 800886a:	9307      	str	r3, [sp, #28]
 800886c:	2300      	movs	r3, #0
 800886e:	930a      	str	r3, [sp, #40]	; 0x28
 8008870:	e7bf      	b.n	80087f2 <_dtoa_r+0x1da>
 8008872:	2300      	movs	r3, #0
 8008874:	9308      	str	r3, [sp, #32]
 8008876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008878:	2b00      	cmp	r3, #0
 800887a:	dc55      	bgt.n	8008928 <_dtoa_r+0x310>
 800887c:	2301      	movs	r3, #1
 800887e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008882:	461a      	mov	r2, r3
 8008884:	9209      	str	r2, [sp, #36]	; 0x24
 8008886:	e00c      	b.n	80088a2 <_dtoa_r+0x28a>
 8008888:	2301      	movs	r3, #1
 800888a:	e7f3      	b.n	8008874 <_dtoa_r+0x25c>
 800888c:	2300      	movs	r3, #0
 800888e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008890:	9308      	str	r3, [sp, #32]
 8008892:	9b00      	ldr	r3, [sp, #0]
 8008894:	4413      	add	r3, r2
 8008896:	9302      	str	r3, [sp, #8]
 8008898:	3301      	adds	r3, #1
 800889a:	2b01      	cmp	r3, #1
 800889c:	9303      	str	r3, [sp, #12]
 800889e:	bfb8      	it	lt
 80088a0:	2301      	movlt	r3, #1
 80088a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80088a4:	2200      	movs	r2, #0
 80088a6:	6042      	str	r2, [r0, #4]
 80088a8:	2204      	movs	r2, #4
 80088aa:	f102 0614 	add.w	r6, r2, #20
 80088ae:	429e      	cmp	r6, r3
 80088b0:	6841      	ldr	r1, [r0, #4]
 80088b2:	d93d      	bls.n	8008930 <_dtoa_r+0x318>
 80088b4:	4620      	mov	r0, r4
 80088b6:	f000 fec9 	bl	800964c <_Balloc>
 80088ba:	9001      	str	r0, [sp, #4]
 80088bc:	2800      	cmp	r0, #0
 80088be:	d13b      	bne.n	8008938 <_dtoa_r+0x320>
 80088c0:	4b11      	ldr	r3, [pc, #68]	; (8008908 <_dtoa_r+0x2f0>)
 80088c2:	4602      	mov	r2, r0
 80088c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80088c8:	e6c0      	b.n	800864c <_dtoa_r+0x34>
 80088ca:	2301      	movs	r3, #1
 80088cc:	e7df      	b.n	800888e <_dtoa_r+0x276>
 80088ce:	bf00      	nop
 80088d0:	636f4361 	.word	0x636f4361
 80088d4:	3fd287a7 	.word	0x3fd287a7
 80088d8:	8b60c8b3 	.word	0x8b60c8b3
 80088dc:	3fc68a28 	.word	0x3fc68a28
 80088e0:	509f79fb 	.word	0x509f79fb
 80088e4:	3fd34413 	.word	0x3fd34413
 80088e8:	0800a63d 	.word	0x0800a63d
 80088ec:	0800a654 	.word	0x0800a654
 80088f0:	7ff00000 	.word	0x7ff00000
 80088f4:	0800a639 	.word	0x0800a639
 80088f8:	0800a630 	.word	0x0800a630
 80088fc:	0800a60d 	.word	0x0800a60d
 8008900:	3ff80000 	.word	0x3ff80000
 8008904:	0800a7a8 	.word	0x0800a7a8
 8008908:	0800a6af 	.word	0x0800a6af
 800890c:	2501      	movs	r5, #1
 800890e:	2300      	movs	r3, #0
 8008910:	9306      	str	r3, [sp, #24]
 8008912:	9508      	str	r5, [sp, #32]
 8008914:	f04f 33ff 	mov.w	r3, #4294967295
 8008918:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800891c:	2200      	movs	r2, #0
 800891e:	2312      	movs	r3, #18
 8008920:	e7b0      	b.n	8008884 <_dtoa_r+0x26c>
 8008922:	2301      	movs	r3, #1
 8008924:	9308      	str	r3, [sp, #32]
 8008926:	e7f5      	b.n	8008914 <_dtoa_r+0x2fc>
 8008928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800892a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800892e:	e7b8      	b.n	80088a2 <_dtoa_r+0x28a>
 8008930:	3101      	adds	r1, #1
 8008932:	6041      	str	r1, [r0, #4]
 8008934:	0052      	lsls	r2, r2, #1
 8008936:	e7b8      	b.n	80088aa <_dtoa_r+0x292>
 8008938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800893a:	9a01      	ldr	r2, [sp, #4]
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	9b03      	ldr	r3, [sp, #12]
 8008940:	2b0e      	cmp	r3, #14
 8008942:	f200 809d 	bhi.w	8008a80 <_dtoa_r+0x468>
 8008946:	2d00      	cmp	r5, #0
 8008948:	f000 809a 	beq.w	8008a80 <_dtoa_r+0x468>
 800894c:	9b00      	ldr	r3, [sp, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	dd32      	ble.n	80089b8 <_dtoa_r+0x3a0>
 8008952:	4ab7      	ldr	r2, [pc, #732]	; (8008c30 <_dtoa_r+0x618>)
 8008954:	f003 030f 	and.w	r3, r3, #15
 8008958:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800895c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008960:	9b00      	ldr	r3, [sp, #0]
 8008962:	05d8      	lsls	r0, r3, #23
 8008964:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008968:	d516      	bpl.n	8008998 <_dtoa_r+0x380>
 800896a:	4bb2      	ldr	r3, [pc, #712]	; (8008c34 <_dtoa_r+0x61c>)
 800896c:	ec51 0b19 	vmov	r0, r1, d9
 8008970:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008974:	f7f7 ff82 	bl	800087c <__aeabi_ddiv>
 8008978:	f007 070f 	and.w	r7, r7, #15
 800897c:	4682      	mov	sl, r0
 800897e:	468b      	mov	fp, r1
 8008980:	2503      	movs	r5, #3
 8008982:	4eac      	ldr	r6, [pc, #688]	; (8008c34 <_dtoa_r+0x61c>)
 8008984:	b957      	cbnz	r7, 800899c <_dtoa_r+0x384>
 8008986:	4642      	mov	r2, r8
 8008988:	464b      	mov	r3, r9
 800898a:	4650      	mov	r0, sl
 800898c:	4659      	mov	r1, fp
 800898e:	f7f7 ff75 	bl	800087c <__aeabi_ddiv>
 8008992:	4682      	mov	sl, r0
 8008994:	468b      	mov	fp, r1
 8008996:	e028      	b.n	80089ea <_dtoa_r+0x3d2>
 8008998:	2502      	movs	r5, #2
 800899a:	e7f2      	b.n	8008982 <_dtoa_r+0x36a>
 800899c:	07f9      	lsls	r1, r7, #31
 800899e:	d508      	bpl.n	80089b2 <_dtoa_r+0x39a>
 80089a0:	4640      	mov	r0, r8
 80089a2:	4649      	mov	r1, r9
 80089a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80089a8:	f7f7 fe3e 	bl	8000628 <__aeabi_dmul>
 80089ac:	3501      	adds	r5, #1
 80089ae:	4680      	mov	r8, r0
 80089b0:	4689      	mov	r9, r1
 80089b2:	107f      	asrs	r7, r7, #1
 80089b4:	3608      	adds	r6, #8
 80089b6:	e7e5      	b.n	8008984 <_dtoa_r+0x36c>
 80089b8:	f000 809b 	beq.w	8008af2 <_dtoa_r+0x4da>
 80089bc:	9b00      	ldr	r3, [sp, #0]
 80089be:	4f9d      	ldr	r7, [pc, #628]	; (8008c34 <_dtoa_r+0x61c>)
 80089c0:	425e      	negs	r6, r3
 80089c2:	4b9b      	ldr	r3, [pc, #620]	; (8008c30 <_dtoa_r+0x618>)
 80089c4:	f006 020f 	and.w	r2, r6, #15
 80089c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d0:	ec51 0b19 	vmov	r0, r1, d9
 80089d4:	f7f7 fe28 	bl	8000628 <__aeabi_dmul>
 80089d8:	1136      	asrs	r6, r6, #4
 80089da:	4682      	mov	sl, r0
 80089dc:	468b      	mov	fp, r1
 80089de:	2300      	movs	r3, #0
 80089e0:	2502      	movs	r5, #2
 80089e2:	2e00      	cmp	r6, #0
 80089e4:	d17a      	bne.n	8008adc <_dtoa_r+0x4c4>
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1d3      	bne.n	8008992 <_dtoa_r+0x37a>
 80089ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 8082 	beq.w	8008af6 <_dtoa_r+0x4de>
 80089f2:	4b91      	ldr	r3, [pc, #580]	; (8008c38 <_dtoa_r+0x620>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	4650      	mov	r0, sl
 80089f8:	4659      	mov	r1, fp
 80089fa:	f7f8 f887 	bl	8000b0c <__aeabi_dcmplt>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d079      	beq.n	8008af6 <_dtoa_r+0x4de>
 8008a02:	9b03      	ldr	r3, [sp, #12]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d076      	beq.n	8008af6 <_dtoa_r+0x4de>
 8008a08:	9b02      	ldr	r3, [sp, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	dd36      	ble.n	8008a7c <_dtoa_r+0x464>
 8008a0e:	9b00      	ldr	r3, [sp, #0]
 8008a10:	4650      	mov	r0, sl
 8008a12:	4659      	mov	r1, fp
 8008a14:	1e5f      	subs	r7, r3, #1
 8008a16:	2200      	movs	r2, #0
 8008a18:	4b88      	ldr	r3, [pc, #544]	; (8008c3c <_dtoa_r+0x624>)
 8008a1a:	f7f7 fe05 	bl	8000628 <__aeabi_dmul>
 8008a1e:	9e02      	ldr	r6, [sp, #8]
 8008a20:	4682      	mov	sl, r0
 8008a22:	468b      	mov	fp, r1
 8008a24:	3501      	adds	r5, #1
 8008a26:	4628      	mov	r0, r5
 8008a28:	f7f7 fd94 	bl	8000554 <__aeabi_i2d>
 8008a2c:	4652      	mov	r2, sl
 8008a2e:	465b      	mov	r3, fp
 8008a30:	f7f7 fdfa 	bl	8000628 <__aeabi_dmul>
 8008a34:	4b82      	ldr	r3, [pc, #520]	; (8008c40 <_dtoa_r+0x628>)
 8008a36:	2200      	movs	r2, #0
 8008a38:	f7f7 fc40 	bl	80002bc <__adddf3>
 8008a3c:	46d0      	mov	r8, sl
 8008a3e:	46d9      	mov	r9, fp
 8008a40:	4682      	mov	sl, r0
 8008a42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008a46:	2e00      	cmp	r6, #0
 8008a48:	d158      	bne.n	8008afc <_dtoa_r+0x4e4>
 8008a4a:	4b7e      	ldr	r3, [pc, #504]	; (8008c44 <_dtoa_r+0x62c>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	4640      	mov	r0, r8
 8008a50:	4649      	mov	r1, r9
 8008a52:	f7f7 fc31 	bl	80002b8 <__aeabi_dsub>
 8008a56:	4652      	mov	r2, sl
 8008a58:	465b      	mov	r3, fp
 8008a5a:	4680      	mov	r8, r0
 8008a5c:	4689      	mov	r9, r1
 8008a5e:	f7f8 f873 	bl	8000b48 <__aeabi_dcmpgt>
 8008a62:	2800      	cmp	r0, #0
 8008a64:	f040 8295 	bne.w	8008f92 <_dtoa_r+0x97a>
 8008a68:	4652      	mov	r2, sl
 8008a6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a6e:	4640      	mov	r0, r8
 8008a70:	4649      	mov	r1, r9
 8008a72:	f7f8 f84b 	bl	8000b0c <__aeabi_dcmplt>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	f040 8289 	bne.w	8008f8e <_dtoa_r+0x976>
 8008a7c:	ec5b ab19 	vmov	sl, fp, d9
 8008a80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f2c0 8148 	blt.w	8008d18 <_dtoa_r+0x700>
 8008a88:	9a00      	ldr	r2, [sp, #0]
 8008a8a:	2a0e      	cmp	r2, #14
 8008a8c:	f300 8144 	bgt.w	8008d18 <_dtoa_r+0x700>
 8008a90:	4b67      	ldr	r3, [pc, #412]	; (8008c30 <_dtoa_r+0x618>)
 8008a92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f280 80d5 	bge.w	8008c4c <_dtoa_r+0x634>
 8008aa2:	9b03      	ldr	r3, [sp, #12]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f300 80d1 	bgt.w	8008c4c <_dtoa_r+0x634>
 8008aaa:	f040 826f 	bne.w	8008f8c <_dtoa_r+0x974>
 8008aae:	4b65      	ldr	r3, [pc, #404]	; (8008c44 <_dtoa_r+0x62c>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	4649      	mov	r1, r9
 8008ab6:	f7f7 fdb7 	bl	8000628 <__aeabi_dmul>
 8008aba:	4652      	mov	r2, sl
 8008abc:	465b      	mov	r3, fp
 8008abe:	f7f8 f839 	bl	8000b34 <__aeabi_dcmpge>
 8008ac2:	9e03      	ldr	r6, [sp, #12]
 8008ac4:	4637      	mov	r7, r6
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	f040 8245 	bne.w	8008f56 <_dtoa_r+0x93e>
 8008acc:	9d01      	ldr	r5, [sp, #4]
 8008ace:	2331      	movs	r3, #49	; 0x31
 8008ad0:	f805 3b01 	strb.w	r3, [r5], #1
 8008ad4:	9b00      	ldr	r3, [sp, #0]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	e240      	b.n	8008f5e <_dtoa_r+0x946>
 8008adc:	07f2      	lsls	r2, r6, #31
 8008ade:	d505      	bpl.n	8008aec <_dtoa_r+0x4d4>
 8008ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ae4:	f7f7 fda0 	bl	8000628 <__aeabi_dmul>
 8008ae8:	3501      	adds	r5, #1
 8008aea:	2301      	movs	r3, #1
 8008aec:	1076      	asrs	r6, r6, #1
 8008aee:	3708      	adds	r7, #8
 8008af0:	e777      	b.n	80089e2 <_dtoa_r+0x3ca>
 8008af2:	2502      	movs	r5, #2
 8008af4:	e779      	b.n	80089ea <_dtoa_r+0x3d2>
 8008af6:	9f00      	ldr	r7, [sp, #0]
 8008af8:	9e03      	ldr	r6, [sp, #12]
 8008afa:	e794      	b.n	8008a26 <_dtoa_r+0x40e>
 8008afc:	9901      	ldr	r1, [sp, #4]
 8008afe:	4b4c      	ldr	r3, [pc, #304]	; (8008c30 <_dtoa_r+0x618>)
 8008b00:	4431      	add	r1, r6
 8008b02:	910d      	str	r1, [sp, #52]	; 0x34
 8008b04:	9908      	ldr	r1, [sp, #32]
 8008b06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008b0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b0e:	2900      	cmp	r1, #0
 8008b10:	d043      	beq.n	8008b9a <_dtoa_r+0x582>
 8008b12:	494d      	ldr	r1, [pc, #308]	; (8008c48 <_dtoa_r+0x630>)
 8008b14:	2000      	movs	r0, #0
 8008b16:	f7f7 feb1 	bl	800087c <__aeabi_ddiv>
 8008b1a:	4652      	mov	r2, sl
 8008b1c:	465b      	mov	r3, fp
 8008b1e:	f7f7 fbcb 	bl	80002b8 <__aeabi_dsub>
 8008b22:	9d01      	ldr	r5, [sp, #4]
 8008b24:	4682      	mov	sl, r0
 8008b26:	468b      	mov	fp, r1
 8008b28:	4649      	mov	r1, r9
 8008b2a:	4640      	mov	r0, r8
 8008b2c:	f7f8 f82c 	bl	8000b88 <__aeabi_d2iz>
 8008b30:	4606      	mov	r6, r0
 8008b32:	f7f7 fd0f 	bl	8000554 <__aeabi_i2d>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4640      	mov	r0, r8
 8008b3c:	4649      	mov	r1, r9
 8008b3e:	f7f7 fbbb 	bl	80002b8 <__aeabi_dsub>
 8008b42:	3630      	adds	r6, #48	; 0x30
 8008b44:	f805 6b01 	strb.w	r6, [r5], #1
 8008b48:	4652      	mov	r2, sl
 8008b4a:	465b      	mov	r3, fp
 8008b4c:	4680      	mov	r8, r0
 8008b4e:	4689      	mov	r9, r1
 8008b50:	f7f7 ffdc 	bl	8000b0c <__aeabi_dcmplt>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d163      	bne.n	8008c20 <_dtoa_r+0x608>
 8008b58:	4642      	mov	r2, r8
 8008b5a:	464b      	mov	r3, r9
 8008b5c:	4936      	ldr	r1, [pc, #216]	; (8008c38 <_dtoa_r+0x620>)
 8008b5e:	2000      	movs	r0, #0
 8008b60:	f7f7 fbaa 	bl	80002b8 <__aeabi_dsub>
 8008b64:	4652      	mov	r2, sl
 8008b66:	465b      	mov	r3, fp
 8008b68:	f7f7 ffd0 	bl	8000b0c <__aeabi_dcmplt>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	f040 80b5 	bne.w	8008cdc <_dtoa_r+0x6c4>
 8008b72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b74:	429d      	cmp	r5, r3
 8008b76:	d081      	beq.n	8008a7c <_dtoa_r+0x464>
 8008b78:	4b30      	ldr	r3, [pc, #192]	; (8008c3c <_dtoa_r+0x624>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	4650      	mov	r0, sl
 8008b7e:	4659      	mov	r1, fp
 8008b80:	f7f7 fd52 	bl	8000628 <__aeabi_dmul>
 8008b84:	4b2d      	ldr	r3, [pc, #180]	; (8008c3c <_dtoa_r+0x624>)
 8008b86:	4682      	mov	sl, r0
 8008b88:	468b      	mov	fp, r1
 8008b8a:	4640      	mov	r0, r8
 8008b8c:	4649      	mov	r1, r9
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f7f7 fd4a 	bl	8000628 <__aeabi_dmul>
 8008b94:	4680      	mov	r8, r0
 8008b96:	4689      	mov	r9, r1
 8008b98:	e7c6      	b.n	8008b28 <_dtoa_r+0x510>
 8008b9a:	4650      	mov	r0, sl
 8008b9c:	4659      	mov	r1, fp
 8008b9e:	f7f7 fd43 	bl	8000628 <__aeabi_dmul>
 8008ba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ba4:	9d01      	ldr	r5, [sp, #4]
 8008ba6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ba8:	4682      	mov	sl, r0
 8008baa:	468b      	mov	fp, r1
 8008bac:	4649      	mov	r1, r9
 8008bae:	4640      	mov	r0, r8
 8008bb0:	f7f7 ffea 	bl	8000b88 <__aeabi_d2iz>
 8008bb4:	4606      	mov	r6, r0
 8008bb6:	f7f7 fccd 	bl	8000554 <__aeabi_i2d>
 8008bba:	3630      	adds	r6, #48	; 0x30
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	4640      	mov	r0, r8
 8008bc2:	4649      	mov	r1, r9
 8008bc4:	f7f7 fb78 	bl	80002b8 <__aeabi_dsub>
 8008bc8:	f805 6b01 	strb.w	r6, [r5], #1
 8008bcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bce:	429d      	cmp	r5, r3
 8008bd0:	4680      	mov	r8, r0
 8008bd2:	4689      	mov	r9, r1
 8008bd4:	f04f 0200 	mov.w	r2, #0
 8008bd8:	d124      	bne.n	8008c24 <_dtoa_r+0x60c>
 8008bda:	4b1b      	ldr	r3, [pc, #108]	; (8008c48 <_dtoa_r+0x630>)
 8008bdc:	4650      	mov	r0, sl
 8008bde:	4659      	mov	r1, fp
 8008be0:	f7f7 fb6c 	bl	80002bc <__adddf3>
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	4640      	mov	r0, r8
 8008bea:	4649      	mov	r1, r9
 8008bec:	f7f7 ffac 	bl	8000b48 <__aeabi_dcmpgt>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d173      	bne.n	8008cdc <_dtoa_r+0x6c4>
 8008bf4:	4652      	mov	r2, sl
 8008bf6:	465b      	mov	r3, fp
 8008bf8:	4913      	ldr	r1, [pc, #76]	; (8008c48 <_dtoa_r+0x630>)
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	f7f7 fb5c 	bl	80002b8 <__aeabi_dsub>
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	4640      	mov	r0, r8
 8008c06:	4649      	mov	r1, r9
 8008c08:	f7f7 ff80 	bl	8000b0c <__aeabi_dcmplt>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	f43f af35 	beq.w	8008a7c <_dtoa_r+0x464>
 8008c12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008c14:	1e6b      	subs	r3, r5, #1
 8008c16:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c18:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c1c:	2b30      	cmp	r3, #48	; 0x30
 8008c1e:	d0f8      	beq.n	8008c12 <_dtoa_r+0x5fa>
 8008c20:	9700      	str	r7, [sp, #0]
 8008c22:	e049      	b.n	8008cb8 <_dtoa_r+0x6a0>
 8008c24:	4b05      	ldr	r3, [pc, #20]	; (8008c3c <_dtoa_r+0x624>)
 8008c26:	f7f7 fcff 	bl	8000628 <__aeabi_dmul>
 8008c2a:	4680      	mov	r8, r0
 8008c2c:	4689      	mov	r9, r1
 8008c2e:	e7bd      	b.n	8008bac <_dtoa_r+0x594>
 8008c30:	0800a7a8 	.word	0x0800a7a8
 8008c34:	0800a780 	.word	0x0800a780
 8008c38:	3ff00000 	.word	0x3ff00000
 8008c3c:	40240000 	.word	0x40240000
 8008c40:	401c0000 	.word	0x401c0000
 8008c44:	40140000 	.word	0x40140000
 8008c48:	3fe00000 	.word	0x3fe00000
 8008c4c:	9d01      	ldr	r5, [sp, #4]
 8008c4e:	4656      	mov	r6, sl
 8008c50:	465f      	mov	r7, fp
 8008c52:	4642      	mov	r2, r8
 8008c54:	464b      	mov	r3, r9
 8008c56:	4630      	mov	r0, r6
 8008c58:	4639      	mov	r1, r7
 8008c5a:	f7f7 fe0f 	bl	800087c <__aeabi_ddiv>
 8008c5e:	f7f7 ff93 	bl	8000b88 <__aeabi_d2iz>
 8008c62:	4682      	mov	sl, r0
 8008c64:	f7f7 fc76 	bl	8000554 <__aeabi_i2d>
 8008c68:	4642      	mov	r2, r8
 8008c6a:	464b      	mov	r3, r9
 8008c6c:	f7f7 fcdc 	bl	8000628 <__aeabi_dmul>
 8008c70:	4602      	mov	r2, r0
 8008c72:	460b      	mov	r3, r1
 8008c74:	4630      	mov	r0, r6
 8008c76:	4639      	mov	r1, r7
 8008c78:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008c7c:	f7f7 fb1c 	bl	80002b8 <__aeabi_dsub>
 8008c80:	f805 6b01 	strb.w	r6, [r5], #1
 8008c84:	9e01      	ldr	r6, [sp, #4]
 8008c86:	9f03      	ldr	r7, [sp, #12]
 8008c88:	1bae      	subs	r6, r5, r6
 8008c8a:	42b7      	cmp	r7, r6
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	d135      	bne.n	8008cfe <_dtoa_r+0x6e6>
 8008c92:	f7f7 fb13 	bl	80002bc <__adddf3>
 8008c96:	4642      	mov	r2, r8
 8008c98:	464b      	mov	r3, r9
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	460f      	mov	r7, r1
 8008c9e:	f7f7 ff53 	bl	8000b48 <__aeabi_dcmpgt>
 8008ca2:	b9d0      	cbnz	r0, 8008cda <_dtoa_r+0x6c2>
 8008ca4:	4642      	mov	r2, r8
 8008ca6:	464b      	mov	r3, r9
 8008ca8:	4630      	mov	r0, r6
 8008caa:	4639      	mov	r1, r7
 8008cac:	f7f7 ff24 	bl	8000af8 <__aeabi_dcmpeq>
 8008cb0:	b110      	cbz	r0, 8008cb8 <_dtoa_r+0x6a0>
 8008cb2:	f01a 0f01 	tst.w	sl, #1
 8008cb6:	d110      	bne.n	8008cda <_dtoa_r+0x6c2>
 8008cb8:	4620      	mov	r0, r4
 8008cba:	ee18 1a10 	vmov	r1, s16
 8008cbe:	f000 fd05 	bl	80096cc <_Bfree>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	9800      	ldr	r0, [sp, #0]
 8008cc6:	702b      	strb	r3, [r5, #0]
 8008cc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cca:	3001      	adds	r0, #1
 8008ccc:	6018      	str	r0, [r3, #0]
 8008cce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f43f acf1 	beq.w	80086b8 <_dtoa_r+0xa0>
 8008cd6:	601d      	str	r5, [r3, #0]
 8008cd8:	e4ee      	b.n	80086b8 <_dtoa_r+0xa0>
 8008cda:	9f00      	ldr	r7, [sp, #0]
 8008cdc:	462b      	mov	r3, r5
 8008cde:	461d      	mov	r5, r3
 8008ce0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ce4:	2a39      	cmp	r2, #57	; 0x39
 8008ce6:	d106      	bne.n	8008cf6 <_dtoa_r+0x6de>
 8008ce8:	9a01      	ldr	r2, [sp, #4]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d1f7      	bne.n	8008cde <_dtoa_r+0x6c6>
 8008cee:	9901      	ldr	r1, [sp, #4]
 8008cf0:	2230      	movs	r2, #48	; 0x30
 8008cf2:	3701      	adds	r7, #1
 8008cf4:	700a      	strb	r2, [r1, #0]
 8008cf6:	781a      	ldrb	r2, [r3, #0]
 8008cf8:	3201      	adds	r2, #1
 8008cfa:	701a      	strb	r2, [r3, #0]
 8008cfc:	e790      	b.n	8008c20 <_dtoa_r+0x608>
 8008cfe:	4ba6      	ldr	r3, [pc, #664]	; (8008f98 <_dtoa_r+0x980>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	f7f7 fc91 	bl	8000628 <__aeabi_dmul>
 8008d06:	2200      	movs	r2, #0
 8008d08:	2300      	movs	r3, #0
 8008d0a:	4606      	mov	r6, r0
 8008d0c:	460f      	mov	r7, r1
 8008d0e:	f7f7 fef3 	bl	8000af8 <__aeabi_dcmpeq>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d09d      	beq.n	8008c52 <_dtoa_r+0x63a>
 8008d16:	e7cf      	b.n	8008cb8 <_dtoa_r+0x6a0>
 8008d18:	9a08      	ldr	r2, [sp, #32]
 8008d1a:	2a00      	cmp	r2, #0
 8008d1c:	f000 80d7 	beq.w	8008ece <_dtoa_r+0x8b6>
 8008d20:	9a06      	ldr	r2, [sp, #24]
 8008d22:	2a01      	cmp	r2, #1
 8008d24:	f300 80ba 	bgt.w	8008e9c <_dtoa_r+0x884>
 8008d28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d2a:	2a00      	cmp	r2, #0
 8008d2c:	f000 80b2 	beq.w	8008e94 <_dtoa_r+0x87c>
 8008d30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008d34:	9e07      	ldr	r6, [sp, #28]
 8008d36:	9d04      	ldr	r5, [sp, #16]
 8008d38:	9a04      	ldr	r2, [sp, #16]
 8008d3a:	441a      	add	r2, r3
 8008d3c:	9204      	str	r2, [sp, #16]
 8008d3e:	9a05      	ldr	r2, [sp, #20]
 8008d40:	2101      	movs	r1, #1
 8008d42:	441a      	add	r2, r3
 8008d44:	4620      	mov	r0, r4
 8008d46:	9205      	str	r2, [sp, #20]
 8008d48:	f000 fd78 	bl	800983c <__i2b>
 8008d4c:	4607      	mov	r7, r0
 8008d4e:	2d00      	cmp	r5, #0
 8008d50:	dd0c      	ble.n	8008d6c <_dtoa_r+0x754>
 8008d52:	9b05      	ldr	r3, [sp, #20]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	dd09      	ble.n	8008d6c <_dtoa_r+0x754>
 8008d58:	42ab      	cmp	r3, r5
 8008d5a:	9a04      	ldr	r2, [sp, #16]
 8008d5c:	bfa8      	it	ge
 8008d5e:	462b      	movge	r3, r5
 8008d60:	1ad2      	subs	r2, r2, r3
 8008d62:	9204      	str	r2, [sp, #16]
 8008d64:	9a05      	ldr	r2, [sp, #20]
 8008d66:	1aed      	subs	r5, r5, r3
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	9305      	str	r3, [sp, #20]
 8008d6c:	9b07      	ldr	r3, [sp, #28]
 8008d6e:	b31b      	cbz	r3, 8008db8 <_dtoa_r+0x7a0>
 8008d70:	9b08      	ldr	r3, [sp, #32]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 80af 	beq.w	8008ed6 <_dtoa_r+0x8be>
 8008d78:	2e00      	cmp	r6, #0
 8008d7a:	dd13      	ble.n	8008da4 <_dtoa_r+0x78c>
 8008d7c:	4639      	mov	r1, r7
 8008d7e:	4632      	mov	r2, r6
 8008d80:	4620      	mov	r0, r4
 8008d82:	f000 fe1b 	bl	80099bc <__pow5mult>
 8008d86:	ee18 2a10 	vmov	r2, s16
 8008d8a:	4601      	mov	r1, r0
 8008d8c:	4607      	mov	r7, r0
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f000 fd6a 	bl	8009868 <__multiply>
 8008d94:	ee18 1a10 	vmov	r1, s16
 8008d98:	4680      	mov	r8, r0
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f000 fc96 	bl	80096cc <_Bfree>
 8008da0:	ee08 8a10 	vmov	s16, r8
 8008da4:	9b07      	ldr	r3, [sp, #28]
 8008da6:	1b9a      	subs	r2, r3, r6
 8008da8:	d006      	beq.n	8008db8 <_dtoa_r+0x7a0>
 8008daa:	ee18 1a10 	vmov	r1, s16
 8008dae:	4620      	mov	r0, r4
 8008db0:	f000 fe04 	bl	80099bc <__pow5mult>
 8008db4:	ee08 0a10 	vmov	s16, r0
 8008db8:	2101      	movs	r1, #1
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 fd3e 	bl	800983c <__i2b>
 8008dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	4606      	mov	r6, r0
 8008dc6:	f340 8088 	ble.w	8008eda <_dtoa_r+0x8c2>
 8008dca:	461a      	mov	r2, r3
 8008dcc:	4601      	mov	r1, r0
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f000 fdf4 	bl	80099bc <__pow5mult>
 8008dd4:	9b06      	ldr	r3, [sp, #24]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	4606      	mov	r6, r0
 8008dda:	f340 8081 	ble.w	8008ee0 <_dtoa_r+0x8c8>
 8008dde:	f04f 0800 	mov.w	r8, #0
 8008de2:	6933      	ldr	r3, [r6, #16]
 8008de4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008de8:	6918      	ldr	r0, [r3, #16]
 8008dea:	f000 fcd7 	bl	800979c <__hi0bits>
 8008dee:	f1c0 0020 	rsb	r0, r0, #32
 8008df2:	9b05      	ldr	r3, [sp, #20]
 8008df4:	4418      	add	r0, r3
 8008df6:	f010 001f 	ands.w	r0, r0, #31
 8008dfa:	f000 8092 	beq.w	8008f22 <_dtoa_r+0x90a>
 8008dfe:	f1c0 0320 	rsb	r3, r0, #32
 8008e02:	2b04      	cmp	r3, #4
 8008e04:	f340 808a 	ble.w	8008f1c <_dtoa_r+0x904>
 8008e08:	f1c0 001c 	rsb	r0, r0, #28
 8008e0c:	9b04      	ldr	r3, [sp, #16]
 8008e0e:	4403      	add	r3, r0
 8008e10:	9304      	str	r3, [sp, #16]
 8008e12:	9b05      	ldr	r3, [sp, #20]
 8008e14:	4403      	add	r3, r0
 8008e16:	4405      	add	r5, r0
 8008e18:	9305      	str	r3, [sp, #20]
 8008e1a:	9b04      	ldr	r3, [sp, #16]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	dd07      	ble.n	8008e30 <_dtoa_r+0x818>
 8008e20:	ee18 1a10 	vmov	r1, s16
 8008e24:	461a      	mov	r2, r3
 8008e26:	4620      	mov	r0, r4
 8008e28:	f000 fe22 	bl	8009a70 <__lshift>
 8008e2c:	ee08 0a10 	vmov	s16, r0
 8008e30:	9b05      	ldr	r3, [sp, #20]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	dd05      	ble.n	8008e42 <_dtoa_r+0x82a>
 8008e36:	4631      	mov	r1, r6
 8008e38:	461a      	mov	r2, r3
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f000 fe18 	bl	8009a70 <__lshift>
 8008e40:	4606      	mov	r6, r0
 8008e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d06e      	beq.n	8008f26 <_dtoa_r+0x90e>
 8008e48:	ee18 0a10 	vmov	r0, s16
 8008e4c:	4631      	mov	r1, r6
 8008e4e:	f000 fe7f 	bl	8009b50 <__mcmp>
 8008e52:	2800      	cmp	r0, #0
 8008e54:	da67      	bge.n	8008f26 <_dtoa_r+0x90e>
 8008e56:	9b00      	ldr	r3, [sp, #0]
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	ee18 1a10 	vmov	r1, s16
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	220a      	movs	r2, #10
 8008e62:	2300      	movs	r3, #0
 8008e64:	4620      	mov	r0, r4
 8008e66:	f000 fc53 	bl	8009710 <__multadd>
 8008e6a:	9b08      	ldr	r3, [sp, #32]
 8008e6c:	ee08 0a10 	vmov	s16, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f000 81b1 	beq.w	80091d8 <_dtoa_r+0xbc0>
 8008e76:	2300      	movs	r3, #0
 8008e78:	4639      	mov	r1, r7
 8008e7a:	220a      	movs	r2, #10
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f000 fc47 	bl	8009710 <__multadd>
 8008e82:	9b02      	ldr	r3, [sp, #8]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	4607      	mov	r7, r0
 8008e88:	f300 808e 	bgt.w	8008fa8 <_dtoa_r+0x990>
 8008e8c:	9b06      	ldr	r3, [sp, #24]
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	dc51      	bgt.n	8008f36 <_dtoa_r+0x91e>
 8008e92:	e089      	b.n	8008fa8 <_dtoa_r+0x990>
 8008e94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e9a:	e74b      	b.n	8008d34 <_dtoa_r+0x71c>
 8008e9c:	9b03      	ldr	r3, [sp, #12]
 8008e9e:	1e5e      	subs	r6, r3, #1
 8008ea0:	9b07      	ldr	r3, [sp, #28]
 8008ea2:	42b3      	cmp	r3, r6
 8008ea4:	bfbf      	itttt	lt
 8008ea6:	9b07      	ldrlt	r3, [sp, #28]
 8008ea8:	9607      	strlt	r6, [sp, #28]
 8008eaa:	1af2      	sublt	r2, r6, r3
 8008eac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008eae:	bfb6      	itet	lt
 8008eb0:	189b      	addlt	r3, r3, r2
 8008eb2:	1b9e      	subge	r6, r3, r6
 8008eb4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008eb6:	9b03      	ldr	r3, [sp, #12]
 8008eb8:	bfb8      	it	lt
 8008eba:	2600      	movlt	r6, #0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	bfb7      	itett	lt
 8008ec0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008ec4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008ec8:	1a9d      	sublt	r5, r3, r2
 8008eca:	2300      	movlt	r3, #0
 8008ecc:	e734      	b.n	8008d38 <_dtoa_r+0x720>
 8008ece:	9e07      	ldr	r6, [sp, #28]
 8008ed0:	9d04      	ldr	r5, [sp, #16]
 8008ed2:	9f08      	ldr	r7, [sp, #32]
 8008ed4:	e73b      	b.n	8008d4e <_dtoa_r+0x736>
 8008ed6:	9a07      	ldr	r2, [sp, #28]
 8008ed8:	e767      	b.n	8008daa <_dtoa_r+0x792>
 8008eda:	9b06      	ldr	r3, [sp, #24]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	dc18      	bgt.n	8008f12 <_dtoa_r+0x8fa>
 8008ee0:	f1ba 0f00 	cmp.w	sl, #0
 8008ee4:	d115      	bne.n	8008f12 <_dtoa_r+0x8fa>
 8008ee6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008eea:	b993      	cbnz	r3, 8008f12 <_dtoa_r+0x8fa>
 8008eec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ef0:	0d1b      	lsrs	r3, r3, #20
 8008ef2:	051b      	lsls	r3, r3, #20
 8008ef4:	b183      	cbz	r3, 8008f18 <_dtoa_r+0x900>
 8008ef6:	9b04      	ldr	r3, [sp, #16]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	9304      	str	r3, [sp, #16]
 8008efc:	9b05      	ldr	r3, [sp, #20]
 8008efe:	3301      	adds	r3, #1
 8008f00:	9305      	str	r3, [sp, #20]
 8008f02:	f04f 0801 	mov.w	r8, #1
 8008f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f47f af6a 	bne.w	8008de2 <_dtoa_r+0x7ca>
 8008f0e:	2001      	movs	r0, #1
 8008f10:	e76f      	b.n	8008df2 <_dtoa_r+0x7da>
 8008f12:	f04f 0800 	mov.w	r8, #0
 8008f16:	e7f6      	b.n	8008f06 <_dtoa_r+0x8ee>
 8008f18:	4698      	mov	r8, r3
 8008f1a:	e7f4      	b.n	8008f06 <_dtoa_r+0x8ee>
 8008f1c:	f43f af7d 	beq.w	8008e1a <_dtoa_r+0x802>
 8008f20:	4618      	mov	r0, r3
 8008f22:	301c      	adds	r0, #28
 8008f24:	e772      	b.n	8008e0c <_dtoa_r+0x7f4>
 8008f26:	9b03      	ldr	r3, [sp, #12]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	dc37      	bgt.n	8008f9c <_dtoa_r+0x984>
 8008f2c:	9b06      	ldr	r3, [sp, #24]
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	dd34      	ble.n	8008f9c <_dtoa_r+0x984>
 8008f32:	9b03      	ldr	r3, [sp, #12]
 8008f34:	9302      	str	r3, [sp, #8]
 8008f36:	9b02      	ldr	r3, [sp, #8]
 8008f38:	b96b      	cbnz	r3, 8008f56 <_dtoa_r+0x93e>
 8008f3a:	4631      	mov	r1, r6
 8008f3c:	2205      	movs	r2, #5
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f000 fbe6 	bl	8009710 <__multadd>
 8008f44:	4601      	mov	r1, r0
 8008f46:	4606      	mov	r6, r0
 8008f48:	ee18 0a10 	vmov	r0, s16
 8008f4c:	f000 fe00 	bl	8009b50 <__mcmp>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	f73f adbb 	bgt.w	8008acc <_dtoa_r+0x4b4>
 8008f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f58:	9d01      	ldr	r5, [sp, #4]
 8008f5a:	43db      	mvns	r3, r3
 8008f5c:	9300      	str	r3, [sp, #0]
 8008f5e:	f04f 0800 	mov.w	r8, #0
 8008f62:	4631      	mov	r1, r6
 8008f64:	4620      	mov	r0, r4
 8008f66:	f000 fbb1 	bl	80096cc <_Bfree>
 8008f6a:	2f00      	cmp	r7, #0
 8008f6c:	f43f aea4 	beq.w	8008cb8 <_dtoa_r+0x6a0>
 8008f70:	f1b8 0f00 	cmp.w	r8, #0
 8008f74:	d005      	beq.n	8008f82 <_dtoa_r+0x96a>
 8008f76:	45b8      	cmp	r8, r7
 8008f78:	d003      	beq.n	8008f82 <_dtoa_r+0x96a>
 8008f7a:	4641      	mov	r1, r8
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f000 fba5 	bl	80096cc <_Bfree>
 8008f82:	4639      	mov	r1, r7
 8008f84:	4620      	mov	r0, r4
 8008f86:	f000 fba1 	bl	80096cc <_Bfree>
 8008f8a:	e695      	b.n	8008cb8 <_dtoa_r+0x6a0>
 8008f8c:	2600      	movs	r6, #0
 8008f8e:	4637      	mov	r7, r6
 8008f90:	e7e1      	b.n	8008f56 <_dtoa_r+0x93e>
 8008f92:	9700      	str	r7, [sp, #0]
 8008f94:	4637      	mov	r7, r6
 8008f96:	e599      	b.n	8008acc <_dtoa_r+0x4b4>
 8008f98:	40240000 	.word	0x40240000
 8008f9c:	9b08      	ldr	r3, [sp, #32]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 80ca 	beq.w	8009138 <_dtoa_r+0xb20>
 8008fa4:	9b03      	ldr	r3, [sp, #12]
 8008fa6:	9302      	str	r3, [sp, #8]
 8008fa8:	2d00      	cmp	r5, #0
 8008faa:	dd05      	ble.n	8008fb8 <_dtoa_r+0x9a0>
 8008fac:	4639      	mov	r1, r7
 8008fae:	462a      	mov	r2, r5
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f000 fd5d 	bl	8009a70 <__lshift>
 8008fb6:	4607      	mov	r7, r0
 8008fb8:	f1b8 0f00 	cmp.w	r8, #0
 8008fbc:	d05b      	beq.n	8009076 <_dtoa_r+0xa5e>
 8008fbe:	6879      	ldr	r1, [r7, #4]
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	f000 fb43 	bl	800964c <_Balloc>
 8008fc6:	4605      	mov	r5, r0
 8008fc8:	b928      	cbnz	r0, 8008fd6 <_dtoa_r+0x9be>
 8008fca:	4b87      	ldr	r3, [pc, #540]	; (80091e8 <_dtoa_r+0xbd0>)
 8008fcc:	4602      	mov	r2, r0
 8008fce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008fd2:	f7ff bb3b 	b.w	800864c <_dtoa_r+0x34>
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	3202      	adds	r2, #2
 8008fda:	0092      	lsls	r2, r2, #2
 8008fdc:	f107 010c 	add.w	r1, r7, #12
 8008fe0:	300c      	adds	r0, #12
 8008fe2:	f7fe fcbf 	bl	8007964 <memcpy>
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	4629      	mov	r1, r5
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 fd40 	bl	8009a70 <__lshift>
 8008ff0:	9b01      	ldr	r3, [sp, #4]
 8008ff2:	f103 0901 	add.w	r9, r3, #1
 8008ff6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	9305      	str	r3, [sp, #20]
 8008ffe:	f00a 0301 	and.w	r3, sl, #1
 8009002:	46b8      	mov	r8, r7
 8009004:	9304      	str	r3, [sp, #16]
 8009006:	4607      	mov	r7, r0
 8009008:	4631      	mov	r1, r6
 800900a:	ee18 0a10 	vmov	r0, s16
 800900e:	f7ff fa77 	bl	8008500 <quorem>
 8009012:	4641      	mov	r1, r8
 8009014:	9002      	str	r0, [sp, #8]
 8009016:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800901a:	ee18 0a10 	vmov	r0, s16
 800901e:	f000 fd97 	bl	8009b50 <__mcmp>
 8009022:	463a      	mov	r2, r7
 8009024:	9003      	str	r0, [sp, #12]
 8009026:	4631      	mov	r1, r6
 8009028:	4620      	mov	r0, r4
 800902a:	f000 fdad 	bl	8009b88 <__mdiff>
 800902e:	68c2      	ldr	r2, [r0, #12]
 8009030:	f109 3bff 	add.w	fp, r9, #4294967295
 8009034:	4605      	mov	r5, r0
 8009036:	bb02      	cbnz	r2, 800907a <_dtoa_r+0xa62>
 8009038:	4601      	mov	r1, r0
 800903a:	ee18 0a10 	vmov	r0, s16
 800903e:	f000 fd87 	bl	8009b50 <__mcmp>
 8009042:	4602      	mov	r2, r0
 8009044:	4629      	mov	r1, r5
 8009046:	4620      	mov	r0, r4
 8009048:	9207      	str	r2, [sp, #28]
 800904a:	f000 fb3f 	bl	80096cc <_Bfree>
 800904e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009052:	ea43 0102 	orr.w	r1, r3, r2
 8009056:	9b04      	ldr	r3, [sp, #16]
 8009058:	430b      	orrs	r3, r1
 800905a:	464d      	mov	r5, r9
 800905c:	d10f      	bne.n	800907e <_dtoa_r+0xa66>
 800905e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009062:	d02a      	beq.n	80090ba <_dtoa_r+0xaa2>
 8009064:	9b03      	ldr	r3, [sp, #12]
 8009066:	2b00      	cmp	r3, #0
 8009068:	dd02      	ble.n	8009070 <_dtoa_r+0xa58>
 800906a:	9b02      	ldr	r3, [sp, #8]
 800906c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009070:	f88b a000 	strb.w	sl, [fp]
 8009074:	e775      	b.n	8008f62 <_dtoa_r+0x94a>
 8009076:	4638      	mov	r0, r7
 8009078:	e7ba      	b.n	8008ff0 <_dtoa_r+0x9d8>
 800907a:	2201      	movs	r2, #1
 800907c:	e7e2      	b.n	8009044 <_dtoa_r+0xa2c>
 800907e:	9b03      	ldr	r3, [sp, #12]
 8009080:	2b00      	cmp	r3, #0
 8009082:	db04      	blt.n	800908e <_dtoa_r+0xa76>
 8009084:	9906      	ldr	r1, [sp, #24]
 8009086:	430b      	orrs	r3, r1
 8009088:	9904      	ldr	r1, [sp, #16]
 800908a:	430b      	orrs	r3, r1
 800908c:	d122      	bne.n	80090d4 <_dtoa_r+0xabc>
 800908e:	2a00      	cmp	r2, #0
 8009090:	ddee      	ble.n	8009070 <_dtoa_r+0xa58>
 8009092:	ee18 1a10 	vmov	r1, s16
 8009096:	2201      	movs	r2, #1
 8009098:	4620      	mov	r0, r4
 800909a:	f000 fce9 	bl	8009a70 <__lshift>
 800909e:	4631      	mov	r1, r6
 80090a0:	ee08 0a10 	vmov	s16, r0
 80090a4:	f000 fd54 	bl	8009b50 <__mcmp>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	dc03      	bgt.n	80090b4 <_dtoa_r+0xa9c>
 80090ac:	d1e0      	bne.n	8009070 <_dtoa_r+0xa58>
 80090ae:	f01a 0f01 	tst.w	sl, #1
 80090b2:	d0dd      	beq.n	8009070 <_dtoa_r+0xa58>
 80090b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80090b8:	d1d7      	bne.n	800906a <_dtoa_r+0xa52>
 80090ba:	2339      	movs	r3, #57	; 0x39
 80090bc:	f88b 3000 	strb.w	r3, [fp]
 80090c0:	462b      	mov	r3, r5
 80090c2:	461d      	mov	r5, r3
 80090c4:	3b01      	subs	r3, #1
 80090c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80090ca:	2a39      	cmp	r2, #57	; 0x39
 80090cc:	d071      	beq.n	80091b2 <_dtoa_r+0xb9a>
 80090ce:	3201      	adds	r2, #1
 80090d0:	701a      	strb	r2, [r3, #0]
 80090d2:	e746      	b.n	8008f62 <_dtoa_r+0x94a>
 80090d4:	2a00      	cmp	r2, #0
 80090d6:	dd07      	ble.n	80090e8 <_dtoa_r+0xad0>
 80090d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80090dc:	d0ed      	beq.n	80090ba <_dtoa_r+0xaa2>
 80090de:	f10a 0301 	add.w	r3, sl, #1
 80090e2:	f88b 3000 	strb.w	r3, [fp]
 80090e6:	e73c      	b.n	8008f62 <_dtoa_r+0x94a>
 80090e8:	9b05      	ldr	r3, [sp, #20]
 80090ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80090ee:	4599      	cmp	r9, r3
 80090f0:	d047      	beq.n	8009182 <_dtoa_r+0xb6a>
 80090f2:	ee18 1a10 	vmov	r1, s16
 80090f6:	2300      	movs	r3, #0
 80090f8:	220a      	movs	r2, #10
 80090fa:	4620      	mov	r0, r4
 80090fc:	f000 fb08 	bl	8009710 <__multadd>
 8009100:	45b8      	cmp	r8, r7
 8009102:	ee08 0a10 	vmov	s16, r0
 8009106:	f04f 0300 	mov.w	r3, #0
 800910a:	f04f 020a 	mov.w	r2, #10
 800910e:	4641      	mov	r1, r8
 8009110:	4620      	mov	r0, r4
 8009112:	d106      	bne.n	8009122 <_dtoa_r+0xb0a>
 8009114:	f000 fafc 	bl	8009710 <__multadd>
 8009118:	4680      	mov	r8, r0
 800911a:	4607      	mov	r7, r0
 800911c:	f109 0901 	add.w	r9, r9, #1
 8009120:	e772      	b.n	8009008 <_dtoa_r+0x9f0>
 8009122:	f000 faf5 	bl	8009710 <__multadd>
 8009126:	4639      	mov	r1, r7
 8009128:	4680      	mov	r8, r0
 800912a:	2300      	movs	r3, #0
 800912c:	220a      	movs	r2, #10
 800912e:	4620      	mov	r0, r4
 8009130:	f000 faee 	bl	8009710 <__multadd>
 8009134:	4607      	mov	r7, r0
 8009136:	e7f1      	b.n	800911c <_dtoa_r+0xb04>
 8009138:	9b03      	ldr	r3, [sp, #12]
 800913a:	9302      	str	r3, [sp, #8]
 800913c:	9d01      	ldr	r5, [sp, #4]
 800913e:	ee18 0a10 	vmov	r0, s16
 8009142:	4631      	mov	r1, r6
 8009144:	f7ff f9dc 	bl	8008500 <quorem>
 8009148:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800914c:	9b01      	ldr	r3, [sp, #4]
 800914e:	f805 ab01 	strb.w	sl, [r5], #1
 8009152:	1aea      	subs	r2, r5, r3
 8009154:	9b02      	ldr	r3, [sp, #8]
 8009156:	4293      	cmp	r3, r2
 8009158:	dd09      	ble.n	800916e <_dtoa_r+0xb56>
 800915a:	ee18 1a10 	vmov	r1, s16
 800915e:	2300      	movs	r3, #0
 8009160:	220a      	movs	r2, #10
 8009162:	4620      	mov	r0, r4
 8009164:	f000 fad4 	bl	8009710 <__multadd>
 8009168:	ee08 0a10 	vmov	s16, r0
 800916c:	e7e7      	b.n	800913e <_dtoa_r+0xb26>
 800916e:	9b02      	ldr	r3, [sp, #8]
 8009170:	2b00      	cmp	r3, #0
 8009172:	bfc8      	it	gt
 8009174:	461d      	movgt	r5, r3
 8009176:	9b01      	ldr	r3, [sp, #4]
 8009178:	bfd8      	it	le
 800917a:	2501      	movle	r5, #1
 800917c:	441d      	add	r5, r3
 800917e:	f04f 0800 	mov.w	r8, #0
 8009182:	ee18 1a10 	vmov	r1, s16
 8009186:	2201      	movs	r2, #1
 8009188:	4620      	mov	r0, r4
 800918a:	f000 fc71 	bl	8009a70 <__lshift>
 800918e:	4631      	mov	r1, r6
 8009190:	ee08 0a10 	vmov	s16, r0
 8009194:	f000 fcdc 	bl	8009b50 <__mcmp>
 8009198:	2800      	cmp	r0, #0
 800919a:	dc91      	bgt.n	80090c0 <_dtoa_r+0xaa8>
 800919c:	d102      	bne.n	80091a4 <_dtoa_r+0xb8c>
 800919e:	f01a 0f01 	tst.w	sl, #1
 80091a2:	d18d      	bne.n	80090c0 <_dtoa_r+0xaa8>
 80091a4:	462b      	mov	r3, r5
 80091a6:	461d      	mov	r5, r3
 80091a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091ac:	2a30      	cmp	r2, #48	; 0x30
 80091ae:	d0fa      	beq.n	80091a6 <_dtoa_r+0xb8e>
 80091b0:	e6d7      	b.n	8008f62 <_dtoa_r+0x94a>
 80091b2:	9a01      	ldr	r2, [sp, #4]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d184      	bne.n	80090c2 <_dtoa_r+0xaaa>
 80091b8:	9b00      	ldr	r3, [sp, #0]
 80091ba:	3301      	adds	r3, #1
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	2331      	movs	r3, #49	; 0x31
 80091c0:	7013      	strb	r3, [r2, #0]
 80091c2:	e6ce      	b.n	8008f62 <_dtoa_r+0x94a>
 80091c4:	4b09      	ldr	r3, [pc, #36]	; (80091ec <_dtoa_r+0xbd4>)
 80091c6:	f7ff ba95 	b.w	80086f4 <_dtoa_r+0xdc>
 80091ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f47f aa6e 	bne.w	80086ae <_dtoa_r+0x96>
 80091d2:	4b07      	ldr	r3, [pc, #28]	; (80091f0 <_dtoa_r+0xbd8>)
 80091d4:	f7ff ba8e 	b.w	80086f4 <_dtoa_r+0xdc>
 80091d8:	9b02      	ldr	r3, [sp, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	dcae      	bgt.n	800913c <_dtoa_r+0xb24>
 80091de:	9b06      	ldr	r3, [sp, #24]
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	f73f aea8 	bgt.w	8008f36 <_dtoa_r+0x91e>
 80091e6:	e7a9      	b.n	800913c <_dtoa_r+0xb24>
 80091e8:	0800a6af 	.word	0x0800a6af
 80091ec:	0800a60c 	.word	0x0800a60c
 80091f0:	0800a630 	.word	0x0800a630

080091f4 <__sflush_r>:
 80091f4:	898a      	ldrh	r2, [r1, #12]
 80091f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091fa:	4605      	mov	r5, r0
 80091fc:	0710      	lsls	r0, r2, #28
 80091fe:	460c      	mov	r4, r1
 8009200:	d458      	bmi.n	80092b4 <__sflush_r+0xc0>
 8009202:	684b      	ldr	r3, [r1, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	dc05      	bgt.n	8009214 <__sflush_r+0x20>
 8009208:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800920a:	2b00      	cmp	r3, #0
 800920c:	dc02      	bgt.n	8009214 <__sflush_r+0x20>
 800920e:	2000      	movs	r0, #0
 8009210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009216:	2e00      	cmp	r6, #0
 8009218:	d0f9      	beq.n	800920e <__sflush_r+0x1a>
 800921a:	2300      	movs	r3, #0
 800921c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009220:	682f      	ldr	r7, [r5, #0]
 8009222:	602b      	str	r3, [r5, #0]
 8009224:	d032      	beq.n	800928c <__sflush_r+0x98>
 8009226:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009228:	89a3      	ldrh	r3, [r4, #12]
 800922a:	075a      	lsls	r2, r3, #29
 800922c:	d505      	bpl.n	800923a <__sflush_r+0x46>
 800922e:	6863      	ldr	r3, [r4, #4]
 8009230:	1ac0      	subs	r0, r0, r3
 8009232:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009234:	b10b      	cbz	r3, 800923a <__sflush_r+0x46>
 8009236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009238:	1ac0      	subs	r0, r0, r3
 800923a:	2300      	movs	r3, #0
 800923c:	4602      	mov	r2, r0
 800923e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009240:	6a21      	ldr	r1, [r4, #32]
 8009242:	4628      	mov	r0, r5
 8009244:	47b0      	blx	r6
 8009246:	1c43      	adds	r3, r0, #1
 8009248:	89a3      	ldrh	r3, [r4, #12]
 800924a:	d106      	bne.n	800925a <__sflush_r+0x66>
 800924c:	6829      	ldr	r1, [r5, #0]
 800924e:	291d      	cmp	r1, #29
 8009250:	d82c      	bhi.n	80092ac <__sflush_r+0xb8>
 8009252:	4a2a      	ldr	r2, [pc, #168]	; (80092fc <__sflush_r+0x108>)
 8009254:	40ca      	lsrs	r2, r1
 8009256:	07d6      	lsls	r6, r2, #31
 8009258:	d528      	bpl.n	80092ac <__sflush_r+0xb8>
 800925a:	2200      	movs	r2, #0
 800925c:	6062      	str	r2, [r4, #4]
 800925e:	04d9      	lsls	r1, r3, #19
 8009260:	6922      	ldr	r2, [r4, #16]
 8009262:	6022      	str	r2, [r4, #0]
 8009264:	d504      	bpl.n	8009270 <__sflush_r+0x7c>
 8009266:	1c42      	adds	r2, r0, #1
 8009268:	d101      	bne.n	800926e <__sflush_r+0x7a>
 800926a:	682b      	ldr	r3, [r5, #0]
 800926c:	b903      	cbnz	r3, 8009270 <__sflush_r+0x7c>
 800926e:	6560      	str	r0, [r4, #84]	; 0x54
 8009270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009272:	602f      	str	r7, [r5, #0]
 8009274:	2900      	cmp	r1, #0
 8009276:	d0ca      	beq.n	800920e <__sflush_r+0x1a>
 8009278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800927c:	4299      	cmp	r1, r3
 800927e:	d002      	beq.n	8009286 <__sflush_r+0x92>
 8009280:	4628      	mov	r0, r5
 8009282:	f000 fd7d 	bl	8009d80 <_free_r>
 8009286:	2000      	movs	r0, #0
 8009288:	6360      	str	r0, [r4, #52]	; 0x34
 800928a:	e7c1      	b.n	8009210 <__sflush_r+0x1c>
 800928c:	6a21      	ldr	r1, [r4, #32]
 800928e:	2301      	movs	r3, #1
 8009290:	4628      	mov	r0, r5
 8009292:	47b0      	blx	r6
 8009294:	1c41      	adds	r1, r0, #1
 8009296:	d1c7      	bne.n	8009228 <__sflush_r+0x34>
 8009298:	682b      	ldr	r3, [r5, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d0c4      	beq.n	8009228 <__sflush_r+0x34>
 800929e:	2b1d      	cmp	r3, #29
 80092a0:	d001      	beq.n	80092a6 <__sflush_r+0xb2>
 80092a2:	2b16      	cmp	r3, #22
 80092a4:	d101      	bne.n	80092aa <__sflush_r+0xb6>
 80092a6:	602f      	str	r7, [r5, #0]
 80092a8:	e7b1      	b.n	800920e <__sflush_r+0x1a>
 80092aa:	89a3      	ldrh	r3, [r4, #12]
 80092ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092b0:	81a3      	strh	r3, [r4, #12]
 80092b2:	e7ad      	b.n	8009210 <__sflush_r+0x1c>
 80092b4:	690f      	ldr	r7, [r1, #16]
 80092b6:	2f00      	cmp	r7, #0
 80092b8:	d0a9      	beq.n	800920e <__sflush_r+0x1a>
 80092ba:	0793      	lsls	r3, r2, #30
 80092bc:	680e      	ldr	r6, [r1, #0]
 80092be:	bf08      	it	eq
 80092c0:	694b      	ldreq	r3, [r1, #20]
 80092c2:	600f      	str	r7, [r1, #0]
 80092c4:	bf18      	it	ne
 80092c6:	2300      	movne	r3, #0
 80092c8:	eba6 0807 	sub.w	r8, r6, r7
 80092cc:	608b      	str	r3, [r1, #8]
 80092ce:	f1b8 0f00 	cmp.w	r8, #0
 80092d2:	dd9c      	ble.n	800920e <__sflush_r+0x1a>
 80092d4:	6a21      	ldr	r1, [r4, #32]
 80092d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092d8:	4643      	mov	r3, r8
 80092da:	463a      	mov	r2, r7
 80092dc:	4628      	mov	r0, r5
 80092de:	47b0      	blx	r6
 80092e0:	2800      	cmp	r0, #0
 80092e2:	dc06      	bgt.n	80092f2 <__sflush_r+0xfe>
 80092e4:	89a3      	ldrh	r3, [r4, #12]
 80092e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092ea:	81a3      	strh	r3, [r4, #12]
 80092ec:	f04f 30ff 	mov.w	r0, #4294967295
 80092f0:	e78e      	b.n	8009210 <__sflush_r+0x1c>
 80092f2:	4407      	add	r7, r0
 80092f4:	eba8 0800 	sub.w	r8, r8, r0
 80092f8:	e7e9      	b.n	80092ce <__sflush_r+0xda>
 80092fa:	bf00      	nop
 80092fc:	20400001 	.word	0x20400001

08009300 <_fflush_r>:
 8009300:	b538      	push	{r3, r4, r5, lr}
 8009302:	690b      	ldr	r3, [r1, #16]
 8009304:	4605      	mov	r5, r0
 8009306:	460c      	mov	r4, r1
 8009308:	b913      	cbnz	r3, 8009310 <_fflush_r+0x10>
 800930a:	2500      	movs	r5, #0
 800930c:	4628      	mov	r0, r5
 800930e:	bd38      	pop	{r3, r4, r5, pc}
 8009310:	b118      	cbz	r0, 800931a <_fflush_r+0x1a>
 8009312:	6983      	ldr	r3, [r0, #24]
 8009314:	b90b      	cbnz	r3, 800931a <_fflush_r+0x1a>
 8009316:	f000 f887 	bl	8009428 <__sinit>
 800931a:	4b14      	ldr	r3, [pc, #80]	; (800936c <_fflush_r+0x6c>)
 800931c:	429c      	cmp	r4, r3
 800931e:	d11b      	bne.n	8009358 <_fflush_r+0x58>
 8009320:	686c      	ldr	r4, [r5, #4]
 8009322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d0ef      	beq.n	800930a <_fflush_r+0xa>
 800932a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800932c:	07d0      	lsls	r0, r2, #31
 800932e:	d404      	bmi.n	800933a <_fflush_r+0x3a>
 8009330:	0599      	lsls	r1, r3, #22
 8009332:	d402      	bmi.n	800933a <_fflush_r+0x3a>
 8009334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009336:	f000 f91a 	bl	800956e <__retarget_lock_acquire_recursive>
 800933a:	4628      	mov	r0, r5
 800933c:	4621      	mov	r1, r4
 800933e:	f7ff ff59 	bl	80091f4 <__sflush_r>
 8009342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009344:	07da      	lsls	r2, r3, #31
 8009346:	4605      	mov	r5, r0
 8009348:	d4e0      	bmi.n	800930c <_fflush_r+0xc>
 800934a:	89a3      	ldrh	r3, [r4, #12]
 800934c:	059b      	lsls	r3, r3, #22
 800934e:	d4dd      	bmi.n	800930c <_fflush_r+0xc>
 8009350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009352:	f000 f90d 	bl	8009570 <__retarget_lock_release_recursive>
 8009356:	e7d9      	b.n	800930c <_fflush_r+0xc>
 8009358:	4b05      	ldr	r3, [pc, #20]	; (8009370 <_fflush_r+0x70>)
 800935a:	429c      	cmp	r4, r3
 800935c:	d101      	bne.n	8009362 <_fflush_r+0x62>
 800935e:	68ac      	ldr	r4, [r5, #8]
 8009360:	e7df      	b.n	8009322 <_fflush_r+0x22>
 8009362:	4b04      	ldr	r3, [pc, #16]	; (8009374 <_fflush_r+0x74>)
 8009364:	429c      	cmp	r4, r3
 8009366:	bf08      	it	eq
 8009368:	68ec      	ldreq	r4, [r5, #12]
 800936a:	e7da      	b.n	8009322 <_fflush_r+0x22>
 800936c:	0800a6e0 	.word	0x0800a6e0
 8009370:	0800a700 	.word	0x0800a700
 8009374:	0800a6c0 	.word	0x0800a6c0

08009378 <std>:
 8009378:	2300      	movs	r3, #0
 800937a:	b510      	push	{r4, lr}
 800937c:	4604      	mov	r4, r0
 800937e:	e9c0 3300 	strd	r3, r3, [r0]
 8009382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009386:	6083      	str	r3, [r0, #8]
 8009388:	8181      	strh	r1, [r0, #12]
 800938a:	6643      	str	r3, [r0, #100]	; 0x64
 800938c:	81c2      	strh	r2, [r0, #14]
 800938e:	6183      	str	r3, [r0, #24]
 8009390:	4619      	mov	r1, r3
 8009392:	2208      	movs	r2, #8
 8009394:	305c      	adds	r0, #92	; 0x5c
 8009396:	f7fe faf3 	bl	8007980 <memset>
 800939a:	4b05      	ldr	r3, [pc, #20]	; (80093b0 <std+0x38>)
 800939c:	6263      	str	r3, [r4, #36]	; 0x24
 800939e:	4b05      	ldr	r3, [pc, #20]	; (80093b4 <std+0x3c>)
 80093a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80093a2:	4b05      	ldr	r3, [pc, #20]	; (80093b8 <std+0x40>)
 80093a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093a6:	4b05      	ldr	r3, [pc, #20]	; (80093bc <std+0x44>)
 80093a8:	6224      	str	r4, [r4, #32]
 80093aa:	6323      	str	r3, [r4, #48]	; 0x30
 80093ac:	bd10      	pop	{r4, pc}
 80093ae:	bf00      	nop
 80093b0:	0800a215 	.word	0x0800a215
 80093b4:	0800a237 	.word	0x0800a237
 80093b8:	0800a26f 	.word	0x0800a26f
 80093bc:	0800a293 	.word	0x0800a293

080093c0 <_cleanup_r>:
 80093c0:	4901      	ldr	r1, [pc, #4]	; (80093c8 <_cleanup_r+0x8>)
 80093c2:	f000 b8af 	b.w	8009524 <_fwalk_reent>
 80093c6:	bf00      	nop
 80093c8:	08009301 	.word	0x08009301

080093cc <__sfmoreglue>:
 80093cc:	b570      	push	{r4, r5, r6, lr}
 80093ce:	2268      	movs	r2, #104	; 0x68
 80093d0:	1e4d      	subs	r5, r1, #1
 80093d2:	4355      	muls	r5, r2
 80093d4:	460e      	mov	r6, r1
 80093d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093da:	f000 fd3d 	bl	8009e58 <_malloc_r>
 80093de:	4604      	mov	r4, r0
 80093e0:	b140      	cbz	r0, 80093f4 <__sfmoreglue+0x28>
 80093e2:	2100      	movs	r1, #0
 80093e4:	e9c0 1600 	strd	r1, r6, [r0]
 80093e8:	300c      	adds	r0, #12
 80093ea:	60a0      	str	r0, [r4, #8]
 80093ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093f0:	f7fe fac6 	bl	8007980 <memset>
 80093f4:	4620      	mov	r0, r4
 80093f6:	bd70      	pop	{r4, r5, r6, pc}

080093f8 <__sfp_lock_acquire>:
 80093f8:	4801      	ldr	r0, [pc, #4]	; (8009400 <__sfp_lock_acquire+0x8>)
 80093fa:	f000 b8b8 	b.w	800956e <__retarget_lock_acquire_recursive>
 80093fe:	bf00      	nop
 8009400:	200003e9 	.word	0x200003e9

08009404 <__sfp_lock_release>:
 8009404:	4801      	ldr	r0, [pc, #4]	; (800940c <__sfp_lock_release+0x8>)
 8009406:	f000 b8b3 	b.w	8009570 <__retarget_lock_release_recursive>
 800940a:	bf00      	nop
 800940c:	200003e9 	.word	0x200003e9

08009410 <__sinit_lock_acquire>:
 8009410:	4801      	ldr	r0, [pc, #4]	; (8009418 <__sinit_lock_acquire+0x8>)
 8009412:	f000 b8ac 	b.w	800956e <__retarget_lock_acquire_recursive>
 8009416:	bf00      	nop
 8009418:	200003ea 	.word	0x200003ea

0800941c <__sinit_lock_release>:
 800941c:	4801      	ldr	r0, [pc, #4]	; (8009424 <__sinit_lock_release+0x8>)
 800941e:	f000 b8a7 	b.w	8009570 <__retarget_lock_release_recursive>
 8009422:	bf00      	nop
 8009424:	200003ea 	.word	0x200003ea

08009428 <__sinit>:
 8009428:	b510      	push	{r4, lr}
 800942a:	4604      	mov	r4, r0
 800942c:	f7ff fff0 	bl	8009410 <__sinit_lock_acquire>
 8009430:	69a3      	ldr	r3, [r4, #24]
 8009432:	b11b      	cbz	r3, 800943c <__sinit+0x14>
 8009434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009438:	f7ff bff0 	b.w	800941c <__sinit_lock_release>
 800943c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009440:	6523      	str	r3, [r4, #80]	; 0x50
 8009442:	4b13      	ldr	r3, [pc, #76]	; (8009490 <__sinit+0x68>)
 8009444:	4a13      	ldr	r2, [pc, #76]	; (8009494 <__sinit+0x6c>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	62a2      	str	r2, [r4, #40]	; 0x28
 800944a:	42a3      	cmp	r3, r4
 800944c:	bf04      	itt	eq
 800944e:	2301      	moveq	r3, #1
 8009450:	61a3      	streq	r3, [r4, #24]
 8009452:	4620      	mov	r0, r4
 8009454:	f000 f820 	bl	8009498 <__sfp>
 8009458:	6060      	str	r0, [r4, #4]
 800945a:	4620      	mov	r0, r4
 800945c:	f000 f81c 	bl	8009498 <__sfp>
 8009460:	60a0      	str	r0, [r4, #8]
 8009462:	4620      	mov	r0, r4
 8009464:	f000 f818 	bl	8009498 <__sfp>
 8009468:	2200      	movs	r2, #0
 800946a:	60e0      	str	r0, [r4, #12]
 800946c:	2104      	movs	r1, #4
 800946e:	6860      	ldr	r0, [r4, #4]
 8009470:	f7ff ff82 	bl	8009378 <std>
 8009474:	68a0      	ldr	r0, [r4, #8]
 8009476:	2201      	movs	r2, #1
 8009478:	2109      	movs	r1, #9
 800947a:	f7ff ff7d 	bl	8009378 <std>
 800947e:	68e0      	ldr	r0, [r4, #12]
 8009480:	2202      	movs	r2, #2
 8009482:	2112      	movs	r1, #18
 8009484:	f7ff ff78 	bl	8009378 <std>
 8009488:	2301      	movs	r3, #1
 800948a:	61a3      	str	r3, [r4, #24]
 800948c:	e7d2      	b.n	8009434 <__sinit+0xc>
 800948e:	bf00      	nop
 8009490:	0800a5f8 	.word	0x0800a5f8
 8009494:	080093c1 	.word	0x080093c1

08009498 <__sfp>:
 8009498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949a:	4607      	mov	r7, r0
 800949c:	f7ff ffac 	bl	80093f8 <__sfp_lock_acquire>
 80094a0:	4b1e      	ldr	r3, [pc, #120]	; (800951c <__sfp+0x84>)
 80094a2:	681e      	ldr	r6, [r3, #0]
 80094a4:	69b3      	ldr	r3, [r6, #24]
 80094a6:	b913      	cbnz	r3, 80094ae <__sfp+0x16>
 80094a8:	4630      	mov	r0, r6
 80094aa:	f7ff ffbd 	bl	8009428 <__sinit>
 80094ae:	3648      	adds	r6, #72	; 0x48
 80094b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094b4:	3b01      	subs	r3, #1
 80094b6:	d503      	bpl.n	80094c0 <__sfp+0x28>
 80094b8:	6833      	ldr	r3, [r6, #0]
 80094ba:	b30b      	cbz	r3, 8009500 <__sfp+0x68>
 80094bc:	6836      	ldr	r6, [r6, #0]
 80094be:	e7f7      	b.n	80094b0 <__sfp+0x18>
 80094c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094c4:	b9d5      	cbnz	r5, 80094fc <__sfp+0x64>
 80094c6:	4b16      	ldr	r3, [pc, #88]	; (8009520 <__sfp+0x88>)
 80094c8:	60e3      	str	r3, [r4, #12]
 80094ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094ce:	6665      	str	r5, [r4, #100]	; 0x64
 80094d0:	f000 f84c 	bl	800956c <__retarget_lock_init_recursive>
 80094d4:	f7ff ff96 	bl	8009404 <__sfp_lock_release>
 80094d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094e0:	6025      	str	r5, [r4, #0]
 80094e2:	61a5      	str	r5, [r4, #24]
 80094e4:	2208      	movs	r2, #8
 80094e6:	4629      	mov	r1, r5
 80094e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094ec:	f7fe fa48 	bl	8007980 <memset>
 80094f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094f8:	4620      	mov	r0, r4
 80094fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094fc:	3468      	adds	r4, #104	; 0x68
 80094fe:	e7d9      	b.n	80094b4 <__sfp+0x1c>
 8009500:	2104      	movs	r1, #4
 8009502:	4638      	mov	r0, r7
 8009504:	f7ff ff62 	bl	80093cc <__sfmoreglue>
 8009508:	4604      	mov	r4, r0
 800950a:	6030      	str	r0, [r6, #0]
 800950c:	2800      	cmp	r0, #0
 800950e:	d1d5      	bne.n	80094bc <__sfp+0x24>
 8009510:	f7ff ff78 	bl	8009404 <__sfp_lock_release>
 8009514:	230c      	movs	r3, #12
 8009516:	603b      	str	r3, [r7, #0]
 8009518:	e7ee      	b.n	80094f8 <__sfp+0x60>
 800951a:	bf00      	nop
 800951c:	0800a5f8 	.word	0x0800a5f8
 8009520:	ffff0001 	.word	0xffff0001

08009524 <_fwalk_reent>:
 8009524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009528:	4606      	mov	r6, r0
 800952a:	4688      	mov	r8, r1
 800952c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009530:	2700      	movs	r7, #0
 8009532:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009536:	f1b9 0901 	subs.w	r9, r9, #1
 800953a:	d505      	bpl.n	8009548 <_fwalk_reent+0x24>
 800953c:	6824      	ldr	r4, [r4, #0]
 800953e:	2c00      	cmp	r4, #0
 8009540:	d1f7      	bne.n	8009532 <_fwalk_reent+0xe>
 8009542:	4638      	mov	r0, r7
 8009544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009548:	89ab      	ldrh	r3, [r5, #12]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d907      	bls.n	800955e <_fwalk_reent+0x3a>
 800954e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009552:	3301      	adds	r3, #1
 8009554:	d003      	beq.n	800955e <_fwalk_reent+0x3a>
 8009556:	4629      	mov	r1, r5
 8009558:	4630      	mov	r0, r6
 800955a:	47c0      	blx	r8
 800955c:	4307      	orrs	r7, r0
 800955e:	3568      	adds	r5, #104	; 0x68
 8009560:	e7e9      	b.n	8009536 <_fwalk_reent+0x12>
	...

08009564 <_localeconv_r>:
 8009564:	4800      	ldr	r0, [pc, #0]	; (8009568 <_localeconv_r+0x4>)
 8009566:	4770      	bx	lr
 8009568:	20000160 	.word	0x20000160

0800956c <__retarget_lock_init_recursive>:
 800956c:	4770      	bx	lr

0800956e <__retarget_lock_acquire_recursive>:
 800956e:	4770      	bx	lr

08009570 <__retarget_lock_release_recursive>:
 8009570:	4770      	bx	lr

08009572 <__swhatbuf_r>:
 8009572:	b570      	push	{r4, r5, r6, lr}
 8009574:	460e      	mov	r6, r1
 8009576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800957a:	2900      	cmp	r1, #0
 800957c:	b096      	sub	sp, #88	; 0x58
 800957e:	4614      	mov	r4, r2
 8009580:	461d      	mov	r5, r3
 8009582:	da08      	bge.n	8009596 <__swhatbuf_r+0x24>
 8009584:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009588:	2200      	movs	r2, #0
 800958a:	602a      	str	r2, [r5, #0]
 800958c:	061a      	lsls	r2, r3, #24
 800958e:	d410      	bmi.n	80095b2 <__swhatbuf_r+0x40>
 8009590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009594:	e00e      	b.n	80095b4 <__swhatbuf_r+0x42>
 8009596:	466a      	mov	r2, sp
 8009598:	f000 fed2 	bl	800a340 <_fstat_r>
 800959c:	2800      	cmp	r0, #0
 800959e:	dbf1      	blt.n	8009584 <__swhatbuf_r+0x12>
 80095a0:	9a01      	ldr	r2, [sp, #4]
 80095a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80095a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80095aa:	425a      	negs	r2, r3
 80095ac:	415a      	adcs	r2, r3
 80095ae:	602a      	str	r2, [r5, #0]
 80095b0:	e7ee      	b.n	8009590 <__swhatbuf_r+0x1e>
 80095b2:	2340      	movs	r3, #64	; 0x40
 80095b4:	2000      	movs	r0, #0
 80095b6:	6023      	str	r3, [r4, #0]
 80095b8:	b016      	add	sp, #88	; 0x58
 80095ba:	bd70      	pop	{r4, r5, r6, pc}

080095bc <__smakebuf_r>:
 80095bc:	898b      	ldrh	r3, [r1, #12]
 80095be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095c0:	079d      	lsls	r5, r3, #30
 80095c2:	4606      	mov	r6, r0
 80095c4:	460c      	mov	r4, r1
 80095c6:	d507      	bpl.n	80095d8 <__smakebuf_r+0x1c>
 80095c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095cc:	6023      	str	r3, [r4, #0]
 80095ce:	6123      	str	r3, [r4, #16]
 80095d0:	2301      	movs	r3, #1
 80095d2:	6163      	str	r3, [r4, #20]
 80095d4:	b002      	add	sp, #8
 80095d6:	bd70      	pop	{r4, r5, r6, pc}
 80095d8:	ab01      	add	r3, sp, #4
 80095da:	466a      	mov	r2, sp
 80095dc:	f7ff ffc9 	bl	8009572 <__swhatbuf_r>
 80095e0:	9900      	ldr	r1, [sp, #0]
 80095e2:	4605      	mov	r5, r0
 80095e4:	4630      	mov	r0, r6
 80095e6:	f000 fc37 	bl	8009e58 <_malloc_r>
 80095ea:	b948      	cbnz	r0, 8009600 <__smakebuf_r+0x44>
 80095ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095f0:	059a      	lsls	r2, r3, #22
 80095f2:	d4ef      	bmi.n	80095d4 <__smakebuf_r+0x18>
 80095f4:	f023 0303 	bic.w	r3, r3, #3
 80095f8:	f043 0302 	orr.w	r3, r3, #2
 80095fc:	81a3      	strh	r3, [r4, #12]
 80095fe:	e7e3      	b.n	80095c8 <__smakebuf_r+0xc>
 8009600:	4b0d      	ldr	r3, [pc, #52]	; (8009638 <__smakebuf_r+0x7c>)
 8009602:	62b3      	str	r3, [r6, #40]	; 0x28
 8009604:	89a3      	ldrh	r3, [r4, #12]
 8009606:	6020      	str	r0, [r4, #0]
 8009608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800960c:	81a3      	strh	r3, [r4, #12]
 800960e:	9b00      	ldr	r3, [sp, #0]
 8009610:	6163      	str	r3, [r4, #20]
 8009612:	9b01      	ldr	r3, [sp, #4]
 8009614:	6120      	str	r0, [r4, #16]
 8009616:	b15b      	cbz	r3, 8009630 <__smakebuf_r+0x74>
 8009618:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800961c:	4630      	mov	r0, r6
 800961e:	f000 fea1 	bl	800a364 <_isatty_r>
 8009622:	b128      	cbz	r0, 8009630 <__smakebuf_r+0x74>
 8009624:	89a3      	ldrh	r3, [r4, #12]
 8009626:	f023 0303 	bic.w	r3, r3, #3
 800962a:	f043 0301 	orr.w	r3, r3, #1
 800962e:	81a3      	strh	r3, [r4, #12]
 8009630:	89a0      	ldrh	r0, [r4, #12]
 8009632:	4305      	orrs	r5, r0
 8009634:	81a5      	strh	r5, [r4, #12]
 8009636:	e7cd      	b.n	80095d4 <__smakebuf_r+0x18>
 8009638:	080093c1 	.word	0x080093c1

0800963c <malloc>:
 800963c:	4b02      	ldr	r3, [pc, #8]	; (8009648 <malloc+0xc>)
 800963e:	4601      	mov	r1, r0
 8009640:	6818      	ldr	r0, [r3, #0]
 8009642:	f000 bc09 	b.w	8009e58 <_malloc_r>
 8009646:	bf00      	nop
 8009648:	2000000c 	.word	0x2000000c

0800964c <_Balloc>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009650:	4604      	mov	r4, r0
 8009652:	460d      	mov	r5, r1
 8009654:	b976      	cbnz	r6, 8009674 <_Balloc+0x28>
 8009656:	2010      	movs	r0, #16
 8009658:	f7ff fff0 	bl	800963c <malloc>
 800965c:	4602      	mov	r2, r0
 800965e:	6260      	str	r0, [r4, #36]	; 0x24
 8009660:	b920      	cbnz	r0, 800966c <_Balloc+0x20>
 8009662:	4b18      	ldr	r3, [pc, #96]	; (80096c4 <_Balloc+0x78>)
 8009664:	4818      	ldr	r0, [pc, #96]	; (80096c8 <_Balloc+0x7c>)
 8009666:	2166      	movs	r1, #102	; 0x66
 8009668:	f000 fe2a 	bl	800a2c0 <__assert_func>
 800966c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009670:	6006      	str	r6, [r0, #0]
 8009672:	60c6      	str	r6, [r0, #12]
 8009674:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009676:	68f3      	ldr	r3, [r6, #12]
 8009678:	b183      	cbz	r3, 800969c <_Balloc+0x50>
 800967a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009682:	b9b8      	cbnz	r0, 80096b4 <_Balloc+0x68>
 8009684:	2101      	movs	r1, #1
 8009686:	fa01 f605 	lsl.w	r6, r1, r5
 800968a:	1d72      	adds	r2, r6, #5
 800968c:	0092      	lsls	r2, r2, #2
 800968e:	4620      	mov	r0, r4
 8009690:	f000 fb60 	bl	8009d54 <_calloc_r>
 8009694:	b160      	cbz	r0, 80096b0 <_Balloc+0x64>
 8009696:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800969a:	e00e      	b.n	80096ba <_Balloc+0x6e>
 800969c:	2221      	movs	r2, #33	; 0x21
 800969e:	2104      	movs	r1, #4
 80096a0:	4620      	mov	r0, r4
 80096a2:	f000 fb57 	bl	8009d54 <_calloc_r>
 80096a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096a8:	60f0      	str	r0, [r6, #12]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1e4      	bne.n	800967a <_Balloc+0x2e>
 80096b0:	2000      	movs	r0, #0
 80096b2:	bd70      	pop	{r4, r5, r6, pc}
 80096b4:	6802      	ldr	r2, [r0, #0]
 80096b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096ba:	2300      	movs	r3, #0
 80096bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096c0:	e7f7      	b.n	80096b2 <_Balloc+0x66>
 80096c2:	bf00      	nop
 80096c4:	0800a63d 	.word	0x0800a63d
 80096c8:	0800a720 	.word	0x0800a720

080096cc <_Bfree>:
 80096cc:	b570      	push	{r4, r5, r6, lr}
 80096ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096d0:	4605      	mov	r5, r0
 80096d2:	460c      	mov	r4, r1
 80096d4:	b976      	cbnz	r6, 80096f4 <_Bfree+0x28>
 80096d6:	2010      	movs	r0, #16
 80096d8:	f7ff ffb0 	bl	800963c <malloc>
 80096dc:	4602      	mov	r2, r0
 80096de:	6268      	str	r0, [r5, #36]	; 0x24
 80096e0:	b920      	cbnz	r0, 80096ec <_Bfree+0x20>
 80096e2:	4b09      	ldr	r3, [pc, #36]	; (8009708 <_Bfree+0x3c>)
 80096e4:	4809      	ldr	r0, [pc, #36]	; (800970c <_Bfree+0x40>)
 80096e6:	218a      	movs	r1, #138	; 0x8a
 80096e8:	f000 fdea 	bl	800a2c0 <__assert_func>
 80096ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096f0:	6006      	str	r6, [r0, #0]
 80096f2:	60c6      	str	r6, [r0, #12]
 80096f4:	b13c      	cbz	r4, 8009706 <_Bfree+0x3a>
 80096f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096f8:	6862      	ldr	r2, [r4, #4]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009700:	6021      	str	r1, [r4, #0]
 8009702:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009706:	bd70      	pop	{r4, r5, r6, pc}
 8009708:	0800a63d 	.word	0x0800a63d
 800970c:	0800a720 	.word	0x0800a720

08009710 <__multadd>:
 8009710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009714:	690d      	ldr	r5, [r1, #16]
 8009716:	4607      	mov	r7, r0
 8009718:	460c      	mov	r4, r1
 800971a:	461e      	mov	r6, r3
 800971c:	f101 0c14 	add.w	ip, r1, #20
 8009720:	2000      	movs	r0, #0
 8009722:	f8dc 3000 	ldr.w	r3, [ip]
 8009726:	b299      	uxth	r1, r3
 8009728:	fb02 6101 	mla	r1, r2, r1, r6
 800972c:	0c1e      	lsrs	r6, r3, #16
 800972e:	0c0b      	lsrs	r3, r1, #16
 8009730:	fb02 3306 	mla	r3, r2, r6, r3
 8009734:	b289      	uxth	r1, r1
 8009736:	3001      	adds	r0, #1
 8009738:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800973c:	4285      	cmp	r5, r0
 800973e:	f84c 1b04 	str.w	r1, [ip], #4
 8009742:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009746:	dcec      	bgt.n	8009722 <__multadd+0x12>
 8009748:	b30e      	cbz	r6, 800978e <__multadd+0x7e>
 800974a:	68a3      	ldr	r3, [r4, #8]
 800974c:	42ab      	cmp	r3, r5
 800974e:	dc19      	bgt.n	8009784 <__multadd+0x74>
 8009750:	6861      	ldr	r1, [r4, #4]
 8009752:	4638      	mov	r0, r7
 8009754:	3101      	adds	r1, #1
 8009756:	f7ff ff79 	bl	800964c <_Balloc>
 800975a:	4680      	mov	r8, r0
 800975c:	b928      	cbnz	r0, 800976a <__multadd+0x5a>
 800975e:	4602      	mov	r2, r0
 8009760:	4b0c      	ldr	r3, [pc, #48]	; (8009794 <__multadd+0x84>)
 8009762:	480d      	ldr	r0, [pc, #52]	; (8009798 <__multadd+0x88>)
 8009764:	21b5      	movs	r1, #181	; 0xb5
 8009766:	f000 fdab 	bl	800a2c0 <__assert_func>
 800976a:	6922      	ldr	r2, [r4, #16]
 800976c:	3202      	adds	r2, #2
 800976e:	f104 010c 	add.w	r1, r4, #12
 8009772:	0092      	lsls	r2, r2, #2
 8009774:	300c      	adds	r0, #12
 8009776:	f7fe f8f5 	bl	8007964 <memcpy>
 800977a:	4621      	mov	r1, r4
 800977c:	4638      	mov	r0, r7
 800977e:	f7ff ffa5 	bl	80096cc <_Bfree>
 8009782:	4644      	mov	r4, r8
 8009784:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009788:	3501      	adds	r5, #1
 800978a:	615e      	str	r6, [r3, #20]
 800978c:	6125      	str	r5, [r4, #16]
 800978e:	4620      	mov	r0, r4
 8009790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009794:	0800a6af 	.word	0x0800a6af
 8009798:	0800a720 	.word	0x0800a720

0800979c <__hi0bits>:
 800979c:	0c03      	lsrs	r3, r0, #16
 800979e:	041b      	lsls	r3, r3, #16
 80097a0:	b9d3      	cbnz	r3, 80097d8 <__hi0bits+0x3c>
 80097a2:	0400      	lsls	r0, r0, #16
 80097a4:	2310      	movs	r3, #16
 80097a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097aa:	bf04      	itt	eq
 80097ac:	0200      	lsleq	r0, r0, #8
 80097ae:	3308      	addeq	r3, #8
 80097b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097b4:	bf04      	itt	eq
 80097b6:	0100      	lsleq	r0, r0, #4
 80097b8:	3304      	addeq	r3, #4
 80097ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097be:	bf04      	itt	eq
 80097c0:	0080      	lsleq	r0, r0, #2
 80097c2:	3302      	addeq	r3, #2
 80097c4:	2800      	cmp	r0, #0
 80097c6:	db05      	blt.n	80097d4 <__hi0bits+0x38>
 80097c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097cc:	f103 0301 	add.w	r3, r3, #1
 80097d0:	bf08      	it	eq
 80097d2:	2320      	moveq	r3, #32
 80097d4:	4618      	mov	r0, r3
 80097d6:	4770      	bx	lr
 80097d8:	2300      	movs	r3, #0
 80097da:	e7e4      	b.n	80097a6 <__hi0bits+0xa>

080097dc <__lo0bits>:
 80097dc:	6803      	ldr	r3, [r0, #0]
 80097de:	f013 0207 	ands.w	r2, r3, #7
 80097e2:	4601      	mov	r1, r0
 80097e4:	d00b      	beq.n	80097fe <__lo0bits+0x22>
 80097e6:	07da      	lsls	r2, r3, #31
 80097e8:	d423      	bmi.n	8009832 <__lo0bits+0x56>
 80097ea:	0798      	lsls	r0, r3, #30
 80097ec:	bf49      	itett	mi
 80097ee:	085b      	lsrmi	r3, r3, #1
 80097f0:	089b      	lsrpl	r3, r3, #2
 80097f2:	2001      	movmi	r0, #1
 80097f4:	600b      	strmi	r3, [r1, #0]
 80097f6:	bf5c      	itt	pl
 80097f8:	600b      	strpl	r3, [r1, #0]
 80097fa:	2002      	movpl	r0, #2
 80097fc:	4770      	bx	lr
 80097fe:	b298      	uxth	r0, r3
 8009800:	b9a8      	cbnz	r0, 800982e <__lo0bits+0x52>
 8009802:	0c1b      	lsrs	r3, r3, #16
 8009804:	2010      	movs	r0, #16
 8009806:	b2da      	uxtb	r2, r3
 8009808:	b90a      	cbnz	r2, 800980e <__lo0bits+0x32>
 800980a:	3008      	adds	r0, #8
 800980c:	0a1b      	lsrs	r3, r3, #8
 800980e:	071a      	lsls	r2, r3, #28
 8009810:	bf04      	itt	eq
 8009812:	091b      	lsreq	r3, r3, #4
 8009814:	3004      	addeq	r0, #4
 8009816:	079a      	lsls	r2, r3, #30
 8009818:	bf04      	itt	eq
 800981a:	089b      	lsreq	r3, r3, #2
 800981c:	3002      	addeq	r0, #2
 800981e:	07da      	lsls	r2, r3, #31
 8009820:	d403      	bmi.n	800982a <__lo0bits+0x4e>
 8009822:	085b      	lsrs	r3, r3, #1
 8009824:	f100 0001 	add.w	r0, r0, #1
 8009828:	d005      	beq.n	8009836 <__lo0bits+0x5a>
 800982a:	600b      	str	r3, [r1, #0]
 800982c:	4770      	bx	lr
 800982e:	4610      	mov	r0, r2
 8009830:	e7e9      	b.n	8009806 <__lo0bits+0x2a>
 8009832:	2000      	movs	r0, #0
 8009834:	4770      	bx	lr
 8009836:	2020      	movs	r0, #32
 8009838:	4770      	bx	lr
	...

0800983c <__i2b>:
 800983c:	b510      	push	{r4, lr}
 800983e:	460c      	mov	r4, r1
 8009840:	2101      	movs	r1, #1
 8009842:	f7ff ff03 	bl	800964c <_Balloc>
 8009846:	4602      	mov	r2, r0
 8009848:	b928      	cbnz	r0, 8009856 <__i2b+0x1a>
 800984a:	4b05      	ldr	r3, [pc, #20]	; (8009860 <__i2b+0x24>)
 800984c:	4805      	ldr	r0, [pc, #20]	; (8009864 <__i2b+0x28>)
 800984e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009852:	f000 fd35 	bl	800a2c0 <__assert_func>
 8009856:	2301      	movs	r3, #1
 8009858:	6144      	str	r4, [r0, #20]
 800985a:	6103      	str	r3, [r0, #16]
 800985c:	bd10      	pop	{r4, pc}
 800985e:	bf00      	nop
 8009860:	0800a6af 	.word	0x0800a6af
 8009864:	0800a720 	.word	0x0800a720

08009868 <__multiply>:
 8009868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800986c:	4691      	mov	r9, r2
 800986e:	690a      	ldr	r2, [r1, #16]
 8009870:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009874:	429a      	cmp	r2, r3
 8009876:	bfb8      	it	lt
 8009878:	460b      	movlt	r3, r1
 800987a:	460c      	mov	r4, r1
 800987c:	bfbc      	itt	lt
 800987e:	464c      	movlt	r4, r9
 8009880:	4699      	movlt	r9, r3
 8009882:	6927      	ldr	r7, [r4, #16]
 8009884:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009888:	68a3      	ldr	r3, [r4, #8]
 800988a:	6861      	ldr	r1, [r4, #4]
 800988c:	eb07 060a 	add.w	r6, r7, sl
 8009890:	42b3      	cmp	r3, r6
 8009892:	b085      	sub	sp, #20
 8009894:	bfb8      	it	lt
 8009896:	3101      	addlt	r1, #1
 8009898:	f7ff fed8 	bl	800964c <_Balloc>
 800989c:	b930      	cbnz	r0, 80098ac <__multiply+0x44>
 800989e:	4602      	mov	r2, r0
 80098a0:	4b44      	ldr	r3, [pc, #272]	; (80099b4 <__multiply+0x14c>)
 80098a2:	4845      	ldr	r0, [pc, #276]	; (80099b8 <__multiply+0x150>)
 80098a4:	f240 115d 	movw	r1, #349	; 0x15d
 80098a8:	f000 fd0a 	bl	800a2c0 <__assert_func>
 80098ac:	f100 0514 	add.w	r5, r0, #20
 80098b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098b4:	462b      	mov	r3, r5
 80098b6:	2200      	movs	r2, #0
 80098b8:	4543      	cmp	r3, r8
 80098ba:	d321      	bcc.n	8009900 <__multiply+0x98>
 80098bc:	f104 0314 	add.w	r3, r4, #20
 80098c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80098c4:	f109 0314 	add.w	r3, r9, #20
 80098c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80098cc:	9202      	str	r2, [sp, #8]
 80098ce:	1b3a      	subs	r2, r7, r4
 80098d0:	3a15      	subs	r2, #21
 80098d2:	f022 0203 	bic.w	r2, r2, #3
 80098d6:	3204      	adds	r2, #4
 80098d8:	f104 0115 	add.w	r1, r4, #21
 80098dc:	428f      	cmp	r7, r1
 80098de:	bf38      	it	cc
 80098e0:	2204      	movcc	r2, #4
 80098e2:	9201      	str	r2, [sp, #4]
 80098e4:	9a02      	ldr	r2, [sp, #8]
 80098e6:	9303      	str	r3, [sp, #12]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d80c      	bhi.n	8009906 <__multiply+0x9e>
 80098ec:	2e00      	cmp	r6, #0
 80098ee:	dd03      	ble.n	80098f8 <__multiply+0x90>
 80098f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d05a      	beq.n	80099ae <__multiply+0x146>
 80098f8:	6106      	str	r6, [r0, #16]
 80098fa:	b005      	add	sp, #20
 80098fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009900:	f843 2b04 	str.w	r2, [r3], #4
 8009904:	e7d8      	b.n	80098b8 <__multiply+0x50>
 8009906:	f8b3 a000 	ldrh.w	sl, [r3]
 800990a:	f1ba 0f00 	cmp.w	sl, #0
 800990e:	d024      	beq.n	800995a <__multiply+0xf2>
 8009910:	f104 0e14 	add.w	lr, r4, #20
 8009914:	46a9      	mov	r9, r5
 8009916:	f04f 0c00 	mov.w	ip, #0
 800991a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800991e:	f8d9 1000 	ldr.w	r1, [r9]
 8009922:	fa1f fb82 	uxth.w	fp, r2
 8009926:	b289      	uxth	r1, r1
 8009928:	fb0a 110b 	mla	r1, sl, fp, r1
 800992c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009930:	f8d9 2000 	ldr.w	r2, [r9]
 8009934:	4461      	add	r1, ip
 8009936:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800993a:	fb0a c20b 	mla	r2, sl, fp, ip
 800993e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009942:	b289      	uxth	r1, r1
 8009944:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009948:	4577      	cmp	r7, lr
 800994a:	f849 1b04 	str.w	r1, [r9], #4
 800994e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009952:	d8e2      	bhi.n	800991a <__multiply+0xb2>
 8009954:	9a01      	ldr	r2, [sp, #4]
 8009956:	f845 c002 	str.w	ip, [r5, r2]
 800995a:	9a03      	ldr	r2, [sp, #12]
 800995c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009960:	3304      	adds	r3, #4
 8009962:	f1b9 0f00 	cmp.w	r9, #0
 8009966:	d020      	beq.n	80099aa <__multiply+0x142>
 8009968:	6829      	ldr	r1, [r5, #0]
 800996a:	f104 0c14 	add.w	ip, r4, #20
 800996e:	46ae      	mov	lr, r5
 8009970:	f04f 0a00 	mov.w	sl, #0
 8009974:	f8bc b000 	ldrh.w	fp, [ip]
 8009978:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800997c:	fb09 220b 	mla	r2, r9, fp, r2
 8009980:	4492      	add	sl, r2
 8009982:	b289      	uxth	r1, r1
 8009984:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009988:	f84e 1b04 	str.w	r1, [lr], #4
 800998c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009990:	f8be 1000 	ldrh.w	r1, [lr]
 8009994:	0c12      	lsrs	r2, r2, #16
 8009996:	fb09 1102 	mla	r1, r9, r2, r1
 800999a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800999e:	4567      	cmp	r7, ip
 80099a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099a4:	d8e6      	bhi.n	8009974 <__multiply+0x10c>
 80099a6:	9a01      	ldr	r2, [sp, #4]
 80099a8:	50a9      	str	r1, [r5, r2]
 80099aa:	3504      	adds	r5, #4
 80099ac:	e79a      	b.n	80098e4 <__multiply+0x7c>
 80099ae:	3e01      	subs	r6, #1
 80099b0:	e79c      	b.n	80098ec <__multiply+0x84>
 80099b2:	bf00      	nop
 80099b4:	0800a6af 	.word	0x0800a6af
 80099b8:	0800a720 	.word	0x0800a720

080099bc <__pow5mult>:
 80099bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099c0:	4615      	mov	r5, r2
 80099c2:	f012 0203 	ands.w	r2, r2, #3
 80099c6:	4606      	mov	r6, r0
 80099c8:	460f      	mov	r7, r1
 80099ca:	d007      	beq.n	80099dc <__pow5mult+0x20>
 80099cc:	4c25      	ldr	r4, [pc, #148]	; (8009a64 <__pow5mult+0xa8>)
 80099ce:	3a01      	subs	r2, #1
 80099d0:	2300      	movs	r3, #0
 80099d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099d6:	f7ff fe9b 	bl	8009710 <__multadd>
 80099da:	4607      	mov	r7, r0
 80099dc:	10ad      	asrs	r5, r5, #2
 80099de:	d03d      	beq.n	8009a5c <__pow5mult+0xa0>
 80099e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099e2:	b97c      	cbnz	r4, 8009a04 <__pow5mult+0x48>
 80099e4:	2010      	movs	r0, #16
 80099e6:	f7ff fe29 	bl	800963c <malloc>
 80099ea:	4602      	mov	r2, r0
 80099ec:	6270      	str	r0, [r6, #36]	; 0x24
 80099ee:	b928      	cbnz	r0, 80099fc <__pow5mult+0x40>
 80099f0:	4b1d      	ldr	r3, [pc, #116]	; (8009a68 <__pow5mult+0xac>)
 80099f2:	481e      	ldr	r0, [pc, #120]	; (8009a6c <__pow5mult+0xb0>)
 80099f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80099f8:	f000 fc62 	bl	800a2c0 <__assert_func>
 80099fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a00:	6004      	str	r4, [r0, #0]
 8009a02:	60c4      	str	r4, [r0, #12]
 8009a04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a0c:	b94c      	cbnz	r4, 8009a22 <__pow5mult+0x66>
 8009a0e:	f240 2171 	movw	r1, #625	; 0x271
 8009a12:	4630      	mov	r0, r6
 8009a14:	f7ff ff12 	bl	800983c <__i2b>
 8009a18:	2300      	movs	r3, #0
 8009a1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a1e:	4604      	mov	r4, r0
 8009a20:	6003      	str	r3, [r0, #0]
 8009a22:	f04f 0900 	mov.w	r9, #0
 8009a26:	07eb      	lsls	r3, r5, #31
 8009a28:	d50a      	bpl.n	8009a40 <__pow5mult+0x84>
 8009a2a:	4639      	mov	r1, r7
 8009a2c:	4622      	mov	r2, r4
 8009a2e:	4630      	mov	r0, r6
 8009a30:	f7ff ff1a 	bl	8009868 <__multiply>
 8009a34:	4639      	mov	r1, r7
 8009a36:	4680      	mov	r8, r0
 8009a38:	4630      	mov	r0, r6
 8009a3a:	f7ff fe47 	bl	80096cc <_Bfree>
 8009a3e:	4647      	mov	r7, r8
 8009a40:	106d      	asrs	r5, r5, #1
 8009a42:	d00b      	beq.n	8009a5c <__pow5mult+0xa0>
 8009a44:	6820      	ldr	r0, [r4, #0]
 8009a46:	b938      	cbnz	r0, 8009a58 <__pow5mult+0x9c>
 8009a48:	4622      	mov	r2, r4
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	f7ff ff0b 	bl	8009868 <__multiply>
 8009a52:	6020      	str	r0, [r4, #0]
 8009a54:	f8c0 9000 	str.w	r9, [r0]
 8009a58:	4604      	mov	r4, r0
 8009a5a:	e7e4      	b.n	8009a26 <__pow5mult+0x6a>
 8009a5c:	4638      	mov	r0, r7
 8009a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a62:	bf00      	nop
 8009a64:	0800a870 	.word	0x0800a870
 8009a68:	0800a63d 	.word	0x0800a63d
 8009a6c:	0800a720 	.word	0x0800a720

08009a70 <__lshift>:
 8009a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a74:	460c      	mov	r4, r1
 8009a76:	6849      	ldr	r1, [r1, #4]
 8009a78:	6923      	ldr	r3, [r4, #16]
 8009a7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a7e:	68a3      	ldr	r3, [r4, #8]
 8009a80:	4607      	mov	r7, r0
 8009a82:	4691      	mov	r9, r2
 8009a84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a88:	f108 0601 	add.w	r6, r8, #1
 8009a8c:	42b3      	cmp	r3, r6
 8009a8e:	db0b      	blt.n	8009aa8 <__lshift+0x38>
 8009a90:	4638      	mov	r0, r7
 8009a92:	f7ff fddb 	bl	800964c <_Balloc>
 8009a96:	4605      	mov	r5, r0
 8009a98:	b948      	cbnz	r0, 8009aae <__lshift+0x3e>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	4b2a      	ldr	r3, [pc, #168]	; (8009b48 <__lshift+0xd8>)
 8009a9e:	482b      	ldr	r0, [pc, #172]	; (8009b4c <__lshift+0xdc>)
 8009aa0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009aa4:	f000 fc0c 	bl	800a2c0 <__assert_func>
 8009aa8:	3101      	adds	r1, #1
 8009aaa:	005b      	lsls	r3, r3, #1
 8009aac:	e7ee      	b.n	8009a8c <__lshift+0x1c>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	f100 0114 	add.w	r1, r0, #20
 8009ab4:	f100 0210 	add.w	r2, r0, #16
 8009ab8:	4618      	mov	r0, r3
 8009aba:	4553      	cmp	r3, sl
 8009abc:	db37      	blt.n	8009b2e <__lshift+0xbe>
 8009abe:	6920      	ldr	r0, [r4, #16]
 8009ac0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ac4:	f104 0314 	add.w	r3, r4, #20
 8009ac8:	f019 091f 	ands.w	r9, r9, #31
 8009acc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ad0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ad4:	d02f      	beq.n	8009b36 <__lshift+0xc6>
 8009ad6:	f1c9 0e20 	rsb	lr, r9, #32
 8009ada:	468a      	mov	sl, r1
 8009adc:	f04f 0c00 	mov.w	ip, #0
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	fa02 f209 	lsl.w	r2, r2, r9
 8009ae6:	ea42 020c 	orr.w	r2, r2, ip
 8009aea:	f84a 2b04 	str.w	r2, [sl], #4
 8009aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8009af2:	4298      	cmp	r0, r3
 8009af4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009af8:	d8f2      	bhi.n	8009ae0 <__lshift+0x70>
 8009afa:	1b03      	subs	r3, r0, r4
 8009afc:	3b15      	subs	r3, #21
 8009afe:	f023 0303 	bic.w	r3, r3, #3
 8009b02:	3304      	adds	r3, #4
 8009b04:	f104 0215 	add.w	r2, r4, #21
 8009b08:	4290      	cmp	r0, r2
 8009b0a:	bf38      	it	cc
 8009b0c:	2304      	movcc	r3, #4
 8009b0e:	f841 c003 	str.w	ip, [r1, r3]
 8009b12:	f1bc 0f00 	cmp.w	ip, #0
 8009b16:	d001      	beq.n	8009b1c <__lshift+0xac>
 8009b18:	f108 0602 	add.w	r6, r8, #2
 8009b1c:	3e01      	subs	r6, #1
 8009b1e:	4638      	mov	r0, r7
 8009b20:	612e      	str	r6, [r5, #16]
 8009b22:	4621      	mov	r1, r4
 8009b24:	f7ff fdd2 	bl	80096cc <_Bfree>
 8009b28:	4628      	mov	r0, r5
 8009b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b32:	3301      	adds	r3, #1
 8009b34:	e7c1      	b.n	8009aba <__lshift+0x4a>
 8009b36:	3904      	subs	r1, #4
 8009b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b40:	4298      	cmp	r0, r3
 8009b42:	d8f9      	bhi.n	8009b38 <__lshift+0xc8>
 8009b44:	e7ea      	b.n	8009b1c <__lshift+0xac>
 8009b46:	bf00      	nop
 8009b48:	0800a6af 	.word	0x0800a6af
 8009b4c:	0800a720 	.word	0x0800a720

08009b50 <__mcmp>:
 8009b50:	b530      	push	{r4, r5, lr}
 8009b52:	6902      	ldr	r2, [r0, #16]
 8009b54:	690c      	ldr	r4, [r1, #16]
 8009b56:	1b12      	subs	r2, r2, r4
 8009b58:	d10e      	bne.n	8009b78 <__mcmp+0x28>
 8009b5a:	f100 0314 	add.w	r3, r0, #20
 8009b5e:	3114      	adds	r1, #20
 8009b60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b70:	42a5      	cmp	r5, r4
 8009b72:	d003      	beq.n	8009b7c <__mcmp+0x2c>
 8009b74:	d305      	bcc.n	8009b82 <__mcmp+0x32>
 8009b76:	2201      	movs	r2, #1
 8009b78:	4610      	mov	r0, r2
 8009b7a:	bd30      	pop	{r4, r5, pc}
 8009b7c:	4283      	cmp	r3, r0
 8009b7e:	d3f3      	bcc.n	8009b68 <__mcmp+0x18>
 8009b80:	e7fa      	b.n	8009b78 <__mcmp+0x28>
 8009b82:	f04f 32ff 	mov.w	r2, #4294967295
 8009b86:	e7f7      	b.n	8009b78 <__mcmp+0x28>

08009b88 <__mdiff>:
 8009b88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b8c:	460c      	mov	r4, r1
 8009b8e:	4606      	mov	r6, r0
 8009b90:	4611      	mov	r1, r2
 8009b92:	4620      	mov	r0, r4
 8009b94:	4690      	mov	r8, r2
 8009b96:	f7ff ffdb 	bl	8009b50 <__mcmp>
 8009b9a:	1e05      	subs	r5, r0, #0
 8009b9c:	d110      	bne.n	8009bc0 <__mdiff+0x38>
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	f7ff fd53 	bl	800964c <_Balloc>
 8009ba6:	b930      	cbnz	r0, 8009bb6 <__mdiff+0x2e>
 8009ba8:	4b3a      	ldr	r3, [pc, #232]	; (8009c94 <__mdiff+0x10c>)
 8009baa:	4602      	mov	r2, r0
 8009bac:	f240 2132 	movw	r1, #562	; 0x232
 8009bb0:	4839      	ldr	r0, [pc, #228]	; (8009c98 <__mdiff+0x110>)
 8009bb2:	f000 fb85 	bl	800a2c0 <__assert_func>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc0:	bfa4      	itt	ge
 8009bc2:	4643      	movge	r3, r8
 8009bc4:	46a0      	movge	r8, r4
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009bcc:	bfa6      	itte	ge
 8009bce:	461c      	movge	r4, r3
 8009bd0:	2500      	movge	r5, #0
 8009bd2:	2501      	movlt	r5, #1
 8009bd4:	f7ff fd3a 	bl	800964c <_Balloc>
 8009bd8:	b920      	cbnz	r0, 8009be4 <__mdiff+0x5c>
 8009bda:	4b2e      	ldr	r3, [pc, #184]	; (8009c94 <__mdiff+0x10c>)
 8009bdc:	4602      	mov	r2, r0
 8009bde:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009be2:	e7e5      	b.n	8009bb0 <__mdiff+0x28>
 8009be4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009be8:	6926      	ldr	r6, [r4, #16]
 8009bea:	60c5      	str	r5, [r0, #12]
 8009bec:	f104 0914 	add.w	r9, r4, #20
 8009bf0:	f108 0514 	add.w	r5, r8, #20
 8009bf4:	f100 0e14 	add.w	lr, r0, #20
 8009bf8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009bfc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c00:	f108 0210 	add.w	r2, r8, #16
 8009c04:	46f2      	mov	sl, lr
 8009c06:	2100      	movs	r1, #0
 8009c08:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c10:	fa1f f883 	uxth.w	r8, r3
 8009c14:	fa11 f18b 	uxtah	r1, r1, fp
 8009c18:	0c1b      	lsrs	r3, r3, #16
 8009c1a:	eba1 0808 	sub.w	r8, r1, r8
 8009c1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c26:	fa1f f888 	uxth.w	r8, r8
 8009c2a:	1419      	asrs	r1, r3, #16
 8009c2c:	454e      	cmp	r6, r9
 8009c2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c32:	f84a 3b04 	str.w	r3, [sl], #4
 8009c36:	d8e7      	bhi.n	8009c08 <__mdiff+0x80>
 8009c38:	1b33      	subs	r3, r6, r4
 8009c3a:	3b15      	subs	r3, #21
 8009c3c:	f023 0303 	bic.w	r3, r3, #3
 8009c40:	3304      	adds	r3, #4
 8009c42:	3415      	adds	r4, #21
 8009c44:	42a6      	cmp	r6, r4
 8009c46:	bf38      	it	cc
 8009c48:	2304      	movcc	r3, #4
 8009c4a:	441d      	add	r5, r3
 8009c4c:	4473      	add	r3, lr
 8009c4e:	469e      	mov	lr, r3
 8009c50:	462e      	mov	r6, r5
 8009c52:	4566      	cmp	r6, ip
 8009c54:	d30e      	bcc.n	8009c74 <__mdiff+0xec>
 8009c56:	f10c 0203 	add.w	r2, ip, #3
 8009c5a:	1b52      	subs	r2, r2, r5
 8009c5c:	f022 0203 	bic.w	r2, r2, #3
 8009c60:	3d03      	subs	r5, #3
 8009c62:	45ac      	cmp	ip, r5
 8009c64:	bf38      	it	cc
 8009c66:	2200      	movcc	r2, #0
 8009c68:	441a      	add	r2, r3
 8009c6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c6e:	b17b      	cbz	r3, 8009c90 <__mdiff+0x108>
 8009c70:	6107      	str	r7, [r0, #16]
 8009c72:	e7a3      	b.n	8009bbc <__mdiff+0x34>
 8009c74:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c78:	fa11 f288 	uxtah	r2, r1, r8
 8009c7c:	1414      	asrs	r4, r2, #16
 8009c7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c82:	b292      	uxth	r2, r2
 8009c84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c88:	f84e 2b04 	str.w	r2, [lr], #4
 8009c8c:	1421      	asrs	r1, r4, #16
 8009c8e:	e7e0      	b.n	8009c52 <__mdiff+0xca>
 8009c90:	3f01      	subs	r7, #1
 8009c92:	e7ea      	b.n	8009c6a <__mdiff+0xe2>
 8009c94:	0800a6af 	.word	0x0800a6af
 8009c98:	0800a720 	.word	0x0800a720

08009c9c <__d2b>:
 8009c9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ca0:	4689      	mov	r9, r1
 8009ca2:	2101      	movs	r1, #1
 8009ca4:	ec57 6b10 	vmov	r6, r7, d0
 8009ca8:	4690      	mov	r8, r2
 8009caa:	f7ff fccf 	bl	800964c <_Balloc>
 8009cae:	4604      	mov	r4, r0
 8009cb0:	b930      	cbnz	r0, 8009cc0 <__d2b+0x24>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	4b25      	ldr	r3, [pc, #148]	; (8009d4c <__d2b+0xb0>)
 8009cb6:	4826      	ldr	r0, [pc, #152]	; (8009d50 <__d2b+0xb4>)
 8009cb8:	f240 310a 	movw	r1, #778	; 0x30a
 8009cbc:	f000 fb00 	bl	800a2c0 <__assert_func>
 8009cc0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009cc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009cc8:	bb35      	cbnz	r5, 8009d18 <__d2b+0x7c>
 8009cca:	2e00      	cmp	r6, #0
 8009ccc:	9301      	str	r3, [sp, #4]
 8009cce:	d028      	beq.n	8009d22 <__d2b+0x86>
 8009cd0:	4668      	mov	r0, sp
 8009cd2:	9600      	str	r6, [sp, #0]
 8009cd4:	f7ff fd82 	bl	80097dc <__lo0bits>
 8009cd8:	9900      	ldr	r1, [sp, #0]
 8009cda:	b300      	cbz	r0, 8009d1e <__d2b+0x82>
 8009cdc:	9a01      	ldr	r2, [sp, #4]
 8009cde:	f1c0 0320 	rsb	r3, r0, #32
 8009ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce6:	430b      	orrs	r3, r1
 8009ce8:	40c2      	lsrs	r2, r0
 8009cea:	6163      	str	r3, [r4, #20]
 8009cec:	9201      	str	r2, [sp, #4]
 8009cee:	9b01      	ldr	r3, [sp, #4]
 8009cf0:	61a3      	str	r3, [r4, #24]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	bf14      	ite	ne
 8009cf6:	2202      	movne	r2, #2
 8009cf8:	2201      	moveq	r2, #1
 8009cfa:	6122      	str	r2, [r4, #16]
 8009cfc:	b1d5      	cbz	r5, 8009d34 <__d2b+0x98>
 8009cfe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d02:	4405      	add	r5, r0
 8009d04:	f8c9 5000 	str.w	r5, [r9]
 8009d08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d0c:	f8c8 0000 	str.w	r0, [r8]
 8009d10:	4620      	mov	r0, r4
 8009d12:	b003      	add	sp, #12
 8009d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d1c:	e7d5      	b.n	8009cca <__d2b+0x2e>
 8009d1e:	6161      	str	r1, [r4, #20]
 8009d20:	e7e5      	b.n	8009cee <__d2b+0x52>
 8009d22:	a801      	add	r0, sp, #4
 8009d24:	f7ff fd5a 	bl	80097dc <__lo0bits>
 8009d28:	9b01      	ldr	r3, [sp, #4]
 8009d2a:	6163      	str	r3, [r4, #20]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	6122      	str	r2, [r4, #16]
 8009d30:	3020      	adds	r0, #32
 8009d32:	e7e3      	b.n	8009cfc <__d2b+0x60>
 8009d34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d3c:	f8c9 0000 	str.w	r0, [r9]
 8009d40:	6918      	ldr	r0, [r3, #16]
 8009d42:	f7ff fd2b 	bl	800979c <__hi0bits>
 8009d46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d4a:	e7df      	b.n	8009d0c <__d2b+0x70>
 8009d4c:	0800a6af 	.word	0x0800a6af
 8009d50:	0800a720 	.word	0x0800a720

08009d54 <_calloc_r>:
 8009d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d56:	fba1 2402 	umull	r2, r4, r1, r2
 8009d5a:	b94c      	cbnz	r4, 8009d70 <_calloc_r+0x1c>
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	9201      	str	r2, [sp, #4]
 8009d60:	f000 f87a 	bl	8009e58 <_malloc_r>
 8009d64:	9a01      	ldr	r2, [sp, #4]
 8009d66:	4605      	mov	r5, r0
 8009d68:	b930      	cbnz	r0, 8009d78 <_calloc_r+0x24>
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	b003      	add	sp, #12
 8009d6e:	bd30      	pop	{r4, r5, pc}
 8009d70:	220c      	movs	r2, #12
 8009d72:	6002      	str	r2, [r0, #0]
 8009d74:	2500      	movs	r5, #0
 8009d76:	e7f8      	b.n	8009d6a <_calloc_r+0x16>
 8009d78:	4621      	mov	r1, r4
 8009d7a:	f7fd fe01 	bl	8007980 <memset>
 8009d7e:	e7f4      	b.n	8009d6a <_calloc_r+0x16>

08009d80 <_free_r>:
 8009d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d82:	2900      	cmp	r1, #0
 8009d84:	d044      	beq.n	8009e10 <_free_r+0x90>
 8009d86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d8a:	9001      	str	r0, [sp, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f1a1 0404 	sub.w	r4, r1, #4
 8009d92:	bfb8      	it	lt
 8009d94:	18e4      	addlt	r4, r4, r3
 8009d96:	f000 fb19 	bl	800a3cc <__malloc_lock>
 8009d9a:	4a1e      	ldr	r2, [pc, #120]	; (8009e14 <_free_r+0x94>)
 8009d9c:	9801      	ldr	r0, [sp, #4]
 8009d9e:	6813      	ldr	r3, [r2, #0]
 8009da0:	b933      	cbnz	r3, 8009db0 <_free_r+0x30>
 8009da2:	6063      	str	r3, [r4, #4]
 8009da4:	6014      	str	r4, [r2, #0]
 8009da6:	b003      	add	sp, #12
 8009da8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dac:	f000 bb14 	b.w	800a3d8 <__malloc_unlock>
 8009db0:	42a3      	cmp	r3, r4
 8009db2:	d908      	bls.n	8009dc6 <_free_r+0x46>
 8009db4:	6825      	ldr	r5, [r4, #0]
 8009db6:	1961      	adds	r1, r4, r5
 8009db8:	428b      	cmp	r3, r1
 8009dba:	bf01      	itttt	eq
 8009dbc:	6819      	ldreq	r1, [r3, #0]
 8009dbe:	685b      	ldreq	r3, [r3, #4]
 8009dc0:	1949      	addeq	r1, r1, r5
 8009dc2:	6021      	streq	r1, [r4, #0]
 8009dc4:	e7ed      	b.n	8009da2 <_free_r+0x22>
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	b10b      	cbz	r3, 8009dd0 <_free_r+0x50>
 8009dcc:	42a3      	cmp	r3, r4
 8009dce:	d9fa      	bls.n	8009dc6 <_free_r+0x46>
 8009dd0:	6811      	ldr	r1, [r2, #0]
 8009dd2:	1855      	adds	r5, r2, r1
 8009dd4:	42a5      	cmp	r5, r4
 8009dd6:	d10b      	bne.n	8009df0 <_free_r+0x70>
 8009dd8:	6824      	ldr	r4, [r4, #0]
 8009dda:	4421      	add	r1, r4
 8009ddc:	1854      	adds	r4, r2, r1
 8009dde:	42a3      	cmp	r3, r4
 8009de0:	6011      	str	r1, [r2, #0]
 8009de2:	d1e0      	bne.n	8009da6 <_free_r+0x26>
 8009de4:	681c      	ldr	r4, [r3, #0]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	6053      	str	r3, [r2, #4]
 8009dea:	4421      	add	r1, r4
 8009dec:	6011      	str	r1, [r2, #0]
 8009dee:	e7da      	b.n	8009da6 <_free_r+0x26>
 8009df0:	d902      	bls.n	8009df8 <_free_r+0x78>
 8009df2:	230c      	movs	r3, #12
 8009df4:	6003      	str	r3, [r0, #0]
 8009df6:	e7d6      	b.n	8009da6 <_free_r+0x26>
 8009df8:	6825      	ldr	r5, [r4, #0]
 8009dfa:	1961      	adds	r1, r4, r5
 8009dfc:	428b      	cmp	r3, r1
 8009dfe:	bf04      	itt	eq
 8009e00:	6819      	ldreq	r1, [r3, #0]
 8009e02:	685b      	ldreq	r3, [r3, #4]
 8009e04:	6063      	str	r3, [r4, #4]
 8009e06:	bf04      	itt	eq
 8009e08:	1949      	addeq	r1, r1, r5
 8009e0a:	6021      	streq	r1, [r4, #0]
 8009e0c:	6054      	str	r4, [r2, #4]
 8009e0e:	e7ca      	b.n	8009da6 <_free_r+0x26>
 8009e10:	b003      	add	sp, #12
 8009e12:	bd30      	pop	{r4, r5, pc}
 8009e14:	200003ec 	.word	0x200003ec

08009e18 <sbrk_aligned>:
 8009e18:	b570      	push	{r4, r5, r6, lr}
 8009e1a:	4e0e      	ldr	r6, [pc, #56]	; (8009e54 <sbrk_aligned+0x3c>)
 8009e1c:	460c      	mov	r4, r1
 8009e1e:	6831      	ldr	r1, [r6, #0]
 8009e20:	4605      	mov	r5, r0
 8009e22:	b911      	cbnz	r1, 8009e2a <sbrk_aligned+0x12>
 8009e24:	f000 f9e6 	bl	800a1f4 <_sbrk_r>
 8009e28:	6030      	str	r0, [r6, #0]
 8009e2a:	4621      	mov	r1, r4
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	f000 f9e1 	bl	800a1f4 <_sbrk_r>
 8009e32:	1c43      	adds	r3, r0, #1
 8009e34:	d00a      	beq.n	8009e4c <sbrk_aligned+0x34>
 8009e36:	1cc4      	adds	r4, r0, #3
 8009e38:	f024 0403 	bic.w	r4, r4, #3
 8009e3c:	42a0      	cmp	r0, r4
 8009e3e:	d007      	beq.n	8009e50 <sbrk_aligned+0x38>
 8009e40:	1a21      	subs	r1, r4, r0
 8009e42:	4628      	mov	r0, r5
 8009e44:	f000 f9d6 	bl	800a1f4 <_sbrk_r>
 8009e48:	3001      	adds	r0, #1
 8009e4a:	d101      	bne.n	8009e50 <sbrk_aligned+0x38>
 8009e4c:	f04f 34ff 	mov.w	r4, #4294967295
 8009e50:	4620      	mov	r0, r4
 8009e52:	bd70      	pop	{r4, r5, r6, pc}
 8009e54:	200003f0 	.word	0x200003f0

08009e58 <_malloc_r>:
 8009e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5c:	1ccd      	adds	r5, r1, #3
 8009e5e:	f025 0503 	bic.w	r5, r5, #3
 8009e62:	3508      	adds	r5, #8
 8009e64:	2d0c      	cmp	r5, #12
 8009e66:	bf38      	it	cc
 8009e68:	250c      	movcc	r5, #12
 8009e6a:	2d00      	cmp	r5, #0
 8009e6c:	4607      	mov	r7, r0
 8009e6e:	db01      	blt.n	8009e74 <_malloc_r+0x1c>
 8009e70:	42a9      	cmp	r1, r5
 8009e72:	d905      	bls.n	8009e80 <_malloc_r+0x28>
 8009e74:	230c      	movs	r3, #12
 8009e76:	603b      	str	r3, [r7, #0]
 8009e78:	2600      	movs	r6, #0
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e80:	4e2e      	ldr	r6, [pc, #184]	; (8009f3c <_malloc_r+0xe4>)
 8009e82:	f000 faa3 	bl	800a3cc <__malloc_lock>
 8009e86:	6833      	ldr	r3, [r6, #0]
 8009e88:	461c      	mov	r4, r3
 8009e8a:	bb34      	cbnz	r4, 8009eda <_malloc_r+0x82>
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	4638      	mov	r0, r7
 8009e90:	f7ff ffc2 	bl	8009e18 <sbrk_aligned>
 8009e94:	1c43      	adds	r3, r0, #1
 8009e96:	4604      	mov	r4, r0
 8009e98:	d14d      	bne.n	8009f36 <_malloc_r+0xde>
 8009e9a:	6834      	ldr	r4, [r6, #0]
 8009e9c:	4626      	mov	r6, r4
 8009e9e:	2e00      	cmp	r6, #0
 8009ea0:	d140      	bne.n	8009f24 <_malloc_r+0xcc>
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4638      	mov	r0, r7
 8009ea8:	eb04 0803 	add.w	r8, r4, r3
 8009eac:	f000 f9a2 	bl	800a1f4 <_sbrk_r>
 8009eb0:	4580      	cmp	r8, r0
 8009eb2:	d13a      	bne.n	8009f2a <_malloc_r+0xd2>
 8009eb4:	6821      	ldr	r1, [r4, #0]
 8009eb6:	3503      	adds	r5, #3
 8009eb8:	1a6d      	subs	r5, r5, r1
 8009eba:	f025 0503 	bic.w	r5, r5, #3
 8009ebe:	3508      	adds	r5, #8
 8009ec0:	2d0c      	cmp	r5, #12
 8009ec2:	bf38      	it	cc
 8009ec4:	250c      	movcc	r5, #12
 8009ec6:	4629      	mov	r1, r5
 8009ec8:	4638      	mov	r0, r7
 8009eca:	f7ff ffa5 	bl	8009e18 <sbrk_aligned>
 8009ece:	3001      	adds	r0, #1
 8009ed0:	d02b      	beq.n	8009f2a <_malloc_r+0xd2>
 8009ed2:	6823      	ldr	r3, [r4, #0]
 8009ed4:	442b      	add	r3, r5
 8009ed6:	6023      	str	r3, [r4, #0]
 8009ed8:	e00e      	b.n	8009ef8 <_malloc_r+0xa0>
 8009eda:	6822      	ldr	r2, [r4, #0]
 8009edc:	1b52      	subs	r2, r2, r5
 8009ede:	d41e      	bmi.n	8009f1e <_malloc_r+0xc6>
 8009ee0:	2a0b      	cmp	r2, #11
 8009ee2:	d916      	bls.n	8009f12 <_malloc_r+0xba>
 8009ee4:	1961      	adds	r1, r4, r5
 8009ee6:	42a3      	cmp	r3, r4
 8009ee8:	6025      	str	r5, [r4, #0]
 8009eea:	bf18      	it	ne
 8009eec:	6059      	strne	r1, [r3, #4]
 8009eee:	6863      	ldr	r3, [r4, #4]
 8009ef0:	bf08      	it	eq
 8009ef2:	6031      	streq	r1, [r6, #0]
 8009ef4:	5162      	str	r2, [r4, r5]
 8009ef6:	604b      	str	r3, [r1, #4]
 8009ef8:	4638      	mov	r0, r7
 8009efa:	f104 060b 	add.w	r6, r4, #11
 8009efe:	f000 fa6b 	bl	800a3d8 <__malloc_unlock>
 8009f02:	f026 0607 	bic.w	r6, r6, #7
 8009f06:	1d23      	adds	r3, r4, #4
 8009f08:	1af2      	subs	r2, r6, r3
 8009f0a:	d0b6      	beq.n	8009e7a <_malloc_r+0x22>
 8009f0c:	1b9b      	subs	r3, r3, r6
 8009f0e:	50a3      	str	r3, [r4, r2]
 8009f10:	e7b3      	b.n	8009e7a <_malloc_r+0x22>
 8009f12:	6862      	ldr	r2, [r4, #4]
 8009f14:	42a3      	cmp	r3, r4
 8009f16:	bf0c      	ite	eq
 8009f18:	6032      	streq	r2, [r6, #0]
 8009f1a:	605a      	strne	r2, [r3, #4]
 8009f1c:	e7ec      	b.n	8009ef8 <_malloc_r+0xa0>
 8009f1e:	4623      	mov	r3, r4
 8009f20:	6864      	ldr	r4, [r4, #4]
 8009f22:	e7b2      	b.n	8009e8a <_malloc_r+0x32>
 8009f24:	4634      	mov	r4, r6
 8009f26:	6876      	ldr	r6, [r6, #4]
 8009f28:	e7b9      	b.n	8009e9e <_malloc_r+0x46>
 8009f2a:	230c      	movs	r3, #12
 8009f2c:	603b      	str	r3, [r7, #0]
 8009f2e:	4638      	mov	r0, r7
 8009f30:	f000 fa52 	bl	800a3d8 <__malloc_unlock>
 8009f34:	e7a1      	b.n	8009e7a <_malloc_r+0x22>
 8009f36:	6025      	str	r5, [r4, #0]
 8009f38:	e7de      	b.n	8009ef8 <_malloc_r+0xa0>
 8009f3a:	bf00      	nop
 8009f3c:	200003ec 	.word	0x200003ec

08009f40 <__sfputc_r>:
 8009f40:	6893      	ldr	r3, [r2, #8]
 8009f42:	3b01      	subs	r3, #1
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	b410      	push	{r4}
 8009f48:	6093      	str	r3, [r2, #8]
 8009f4a:	da08      	bge.n	8009f5e <__sfputc_r+0x1e>
 8009f4c:	6994      	ldr	r4, [r2, #24]
 8009f4e:	42a3      	cmp	r3, r4
 8009f50:	db01      	blt.n	8009f56 <__sfputc_r+0x16>
 8009f52:	290a      	cmp	r1, #10
 8009f54:	d103      	bne.n	8009f5e <__sfputc_r+0x1e>
 8009f56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f5a:	f7fe ba11 	b.w	8008380 <__swbuf_r>
 8009f5e:	6813      	ldr	r3, [r2, #0]
 8009f60:	1c58      	adds	r0, r3, #1
 8009f62:	6010      	str	r0, [r2, #0]
 8009f64:	7019      	strb	r1, [r3, #0]
 8009f66:	4608      	mov	r0, r1
 8009f68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f6c:	4770      	bx	lr

08009f6e <__sfputs_r>:
 8009f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f70:	4606      	mov	r6, r0
 8009f72:	460f      	mov	r7, r1
 8009f74:	4614      	mov	r4, r2
 8009f76:	18d5      	adds	r5, r2, r3
 8009f78:	42ac      	cmp	r4, r5
 8009f7a:	d101      	bne.n	8009f80 <__sfputs_r+0x12>
 8009f7c:	2000      	movs	r0, #0
 8009f7e:	e007      	b.n	8009f90 <__sfputs_r+0x22>
 8009f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f84:	463a      	mov	r2, r7
 8009f86:	4630      	mov	r0, r6
 8009f88:	f7ff ffda 	bl	8009f40 <__sfputc_r>
 8009f8c:	1c43      	adds	r3, r0, #1
 8009f8e:	d1f3      	bne.n	8009f78 <__sfputs_r+0xa>
 8009f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f94 <_vfiprintf_r>:
 8009f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f98:	460d      	mov	r5, r1
 8009f9a:	b09d      	sub	sp, #116	; 0x74
 8009f9c:	4614      	mov	r4, r2
 8009f9e:	4698      	mov	r8, r3
 8009fa0:	4606      	mov	r6, r0
 8009fa2:	b118      	cbz	r0, 8009fac <_vfiprintf_r+0x18>
 8009fa4:	6983      	ldr	r3, [r0, #24]
 8009fa6:	b90b      	cbnz	r3, 8009fac <_vfiprintf_r+0x18>
 8009fa8:	f7ff fa3e 	bl	8009428 <__sinit>
 8009fac:	4b89      	ldr	r3, [pc, #548]	; (800a1d4 <_vfiprintf_r+0x240>)
 8009fae:	429d      	cmp	r5, r3
 8009fb0:	d11b      	bne.n	8009fea <_vfiprintf_r+0x56>
 8009fb2:	6875      	ldr	r5, [r6, #4]
 8009fb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fb6:	07d9      	lsls	r1, r3, #31
 8009fb8:	d405      	bmi.n	8009fc6 <_vfiprintf_r+0x32>
 8009fba:	89ab      	ldrh	r3, [r5, #12]
 8009fbc:	059a      	lsls	r2, r3, #22
 8009fbe:	d402      	bmi.n	8009fc6 <_vfiprintf_r+0x32>
 8009fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fc2:	f7ff fad4 	bl	800956e <__retarget_lock_acquire_recursive>
 8009fc6:	89ab      	ldrh	r3, [r5, #12]
 8009fc8:	071b      	lsls	r3, r3, #28
 8009fca:	d501      	bpl.n	8009fd0 <_vfiprintf_r+0x3c>
 8009fcc:	692b      	ldr	r3, [r5, #16]
 8009fce:	b9eb      	cbnz	r3, 800a00c <_vfiprintf_r+0x78>
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	f7fe fa26 	bl	8008424 <__swsetup_r>
 8009fd8:	b1c0      	cbz	r0, 800a00c <_vfiprintf_r+0x78>
 8009fda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fdc:	07dc      	lsls	r4, r3, #31
 8009fde:	d50e      	bpl.n	8009ffe <_vfiprintf_r+0x6a>
 8009fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe4:	b01d      	add	sp, #116	; 0x74
 8009fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fea:	4b7b      	ldr	r3, [pc, #492]	; (800a1d8 <_vfiprintf_r+0x244>)
 8009fec:	429d      	cmp	r5, r3
 8009fee:	d101      	bne.n	8009ff4 <_vfiprintf_r+0x60>
 8009ff0:	68b5      	ldr	r5, [r6, #8]
 8009ff2:	e7df      	b.n	8009fb4 <_vfiprintf_r+0x20>
 8009ff4:	4b79      	ldr	r3, [pc, #484]	; (800a1dc <_vfiprintf_r+0x248>)
 8009ff6:	429d      	cmp	r5, r3
 8009ff8:	bf08      	it	eq
 8009ffa:	68f5      	ldreq	r5, [r6, #12]
 8009ffc:	e7da      	b.n	8009fb4 <_vfiprintf_r+0x20>
 8009ffe:	89ab      	ldrh	r3, [r5, #12]
 800a000:	0598      	lsls	r0, r3, #22
 800a002:	d4ed      	bmi.n	8009fe0 <_vfiprintf_r+0x4c>
 800a004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a006:	f7ff fab3 	bl	8009570 <__retarget_lock_release_recursive>
 800a00a:	e7e9      	b.n	8009fe0 <_vfiprintf_r+0x4c>
 800a00c:	2300      	movs	r3, #0
 800a00e:	9309      	str	r3, [sp, #36]	; 0x24
 800a010:	2320      	movs	r3, #32
 800a012:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a016:	f8cd 800c 	str.w	r8, [sp, #12]
 800a01a:	2330      	movs	r3, #48	; 0x30
 800a01c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a1e0 <_vfiprintf_r+0x24c>
 800a020:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a024:	f04f 0901 	mov.w	r9, #1
 800a028:	4623      	mov	r3, r4
 800a02a:	469a      	mov	sl, r3
 800a02c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a030:	b10a      	cbz	r2, 800a036 <_vfiprintf_r+0xa2>
 800a032:	2a25      	cmp	r2, #37	; 0x25
 800a034:	d1f9      	bne.n	800a02a <_vfiprintf_r+0x96>
 800a036:	ebba 0b04 	subs.w	fp, sl, r4
 800a03a:	d00b      	beq.n	800a054 <_vfiprintf_r+0xc0>
 800a03c:	465b      	mov	r3, fp
 800a03e:	4622      	mov	r2, r4
 800a040:	4629      	mov	r1, r5
 800a042:	4630      	mov	r0, r6
 800a044:	f7ff ff93 	bl	8009f6e <__sfputs_r>
 800a048:	3001      	adds	r0, #1
 800a04a:	f000 80aa 	beq.w	800a1a2 <_vfiprintf_r+0x20e>
 800a04e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a050:	445a      	add	r2, fp
 800a052:	9209      	str	r2, [sp, #36]	; 0x24
 800a054:	f89a 3000 	ldrb.w	r3, [sl]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f000 80a2 	beq.w	800a1a2 <_vfiprintf_r+0x20e>
 800a05e:	2300      	movs	r3, #0
 800a060:	f04f 32ff 	mov.w	r2, #4294967295
 800a064:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a068:	f10a 0a01 	add.w	sl, sl, #1
 800a06c:	9304      	str	r3, [sp, #16]
 800a06e:	9307      	str	r3, [sp, #28]
 800a070:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a074:	931a      	str	r3, [sp, #104]	; 0x68
 800a076:	4654      	mov	r4, sl
 800a078:	2205      	movs	r2, #5
 800a07a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a07e:	4858      	ldr	r0, [pc, #352]	; (800a1e0 <_vfiprintf_r+0x24c>)
 800a080:	f7f6 f8c6 	bl	8000210 <memchr>
 800a084:	9a04      	ldr	r2, [sp, #16]
 800a086:	b9d8      	cbnz	r0, 800a0c0 <_vfiprintf_r+0x12c>
 800a088:	06d1      	lsls	r1, r2, #27
 800a08a:	bf44      	itt	mi
 800a08c:	2320      	movmi	r3, #32
 800a08e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a092:	0713      	lsls	r3, r2, #28
 800a094:	bf44      	itt	mi
 800a096:	232b      	movmi	r3, #43	; 0x2b
 800a098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a09c:	f89a 3000 	ldrb.w	r3, [sl]
 800a0a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a0a2:	d015      	beq.n	800a0d0 <_vfiprintf_r+0x13c>
 800a0a4:	9a07      	ldr	r2, [sp, #28]
 800a0a6:	4654      	mov	r4, sl
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	f04f 0c0a 	mov.w	ip, #10
 800a0ae:	4621      	mov	r1, r4
 800a0b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0b4:	3b30      	subs	r3, #48	; 0x30
 800a0b6:	2b09      	cmp	r3, #9
 800a0b8:	d94e      	bls.n	800a158 <_vfiprintf_r+0x1c4>
 800a0ba:	b1b0      	cbz	r0, 800a0ea <_vfiprintf_r+0x156>
 800a0bc:	9207      	str	r2, [sp, #28]
 800a0be:	e014      	b.n	800a0ea <_vfiprintf_r+0x156>
 800a0c0:	eba0 0308 	sub.w	r3, r0, r8
 800a0c4:	fa09 f303 	lsl.w	r3, r9, r3
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	9304      	str	r3, [sp, #16]
 800a0cc:	46a2      	mov	sl, r4
 800a0ce:	e7d2      	b.n	800a076 <_vfiprintf_r+0xe2>
 800a0d0:	9b03      	ldr	r3, [sp, #12]
 800a0d2:	1d19      	adds	r1, r3, #4
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	9103      	str	r1, [sp, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	bfbb      	ittet	lt
 800a0dc:	425b      	neglt	r3, r3
 800a0de:	f042 0202 	orrlt.w	r2, r2, #2
 800a0e2:	9307      	strge	r3, [sp, #28]
 800a0e4:	9307      	strlt	r3, [sp, #28]
 800a0e6:	bfb8      	it	lt
 800a0e8:	9204      	strlt	r2, [sp, #16]
 800a0ea:	7823      	ldrb	r3, [r4, #0]
 800a0ec:	2b2e      	cmp	r3, #46	; 0x2e
 800a0ee:	d10c      	bne.n	800a10a <_vfiprintf_r+0x176>
 800a0f0:	7863      	ldrb	r3, [r4, #1]
 800a0f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a0f4:	d135      	bne.n	800a162 <_vfiprintf_r+0x1ce>
 800a0f6:	9b03      	ldr	r3, [sp, #12]
 800a0f8:	1d1a      	adds	r2, r3, #4
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	9203      	str	r2, [sp, #12]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	bfb8      	it	lt
 800a102:	f04f 33ff 	movlt.w	r3, #4294967295
 800a106:	3402      	adds	r4, #2
 800a108:	9305      	str	r3, [sp, #20]
 800a10a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a1f0 <_vfiprintf_r+0x25c>
 800a10e:	7821      	ldrb	r1, [r4, #0]
 800a110:	2203      	movs	r2, #3
 800a112:	4650      	mov	r0, sl
 800a114:	f7f6 f87c 	bl	8000210 <memchr>
 800a118:	b140      	cbz	r0, 800a12c <_vfiprintf_r+0x198>
 800a11a:	2340      	movs	r3, #64	; 0x40
 800a11c:	eba0 000a 	sub.w	r0, r0, sl
 800a120:	fa03 f000 	lsl.w	r0, r3, r0
 800a124:	9b04      	ldr	r3, [sp, #16]
 800a126:	4303      	orrs	r3, r0
 800a128:	3401      	adds	r4, #1
 800a12a:	9304      	str	r3, [sp, #16]
 800a12c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a130:	482c      	ldr	r0, [pc, #176]	; (800a1e4 <_vfiprintf_r+0x250>)
 800a132:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a136:	2206      	movs	r2, #6
 800a138:	f7f6 f86a 	bl	8000210 <memchr>
 800a13c:	2800      	cmp	r0, #0
 800a13e:	d03f      	beq.n	800a1c0 <_vfiprintf_r+0x22c>
 800a140:	4b29      	ldr	r3, [pc, #164]	; (800a1e8 <_vfiprintf_r+0x254>)
 800a142:	bb1b      	cbnz	r3, 800a18c <_vfiprintf_r+0x1f8>
 800a144:	9b03      	ldr	r3, [sp, #12]
 800a146:	3307      	adds	r3, #7
 800a148:	f023 0307 	bic.w	r3, r3, #7
 800a14c:	3308      	adds	r3, #8
 800a14e:	9303      	str	r3, [sp, #12]
 800a150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a152:	443b      	add	r3, r7
 800a154:	9309      	str	r3, [sp, #36]	; 0x24
 800a156:	e767      	b.n	800a028 <_vfiprintf_r+0x94>
 800a158:	fb0c 3202 	mla	r2, ip, r2, r3
 800a15c:	460c      	mov	r4, r1
 800a15e:	2001      	movs	r0, #1
 800a160:	e7a5      	b.n	800a0ae <_vfiprintf_r+0x11a>
 800a162:	2300      	movs	r3, #0
 800a164:	3401      	adds	r4, #1
 800a166:	9305      	str	r3, [sp, #20]
 800a168:	4619      	mov	r1, r3
 800a16a:	f04f 0c0a 	mov.w	ip, #10
 800a16e:	4620      	mov	r0, r4
 800a170:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a174:	3a30      	subs	r2, #48	; 0x30
 800a176:	2a09      	cmp	r2, #9
 800a178:	d903      	bls.n	800a182 <_vfiprintf_r+0x1ee>
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d0c5      	beq.n	800a10a <_vfiprintf_r+0x176>
 800a17e:	9105      	str	r1, [sp, #20]
 800a180:	e7c3      	b.n	800a10a <_vfiprintf_r+0x176>
 800a182:	fb0c 2101 	mla	r1, ip, r1, r2
 800a186:	4604      	mov	r4, r0
 800a188:	2301      	movs	r3, #1
 800a18a:	e7f0      	b.n	800a16e <_vfiprintf_r+0x1da>
 800a18c:	ab03      	add	r3, sp, #12
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	462a      	mov	r2, r5
 800a192:	4b16      	ldr	r3, [pc, #88]	; (800a1ec <_vfiprintf_r+0x258>)
 800a194:	a904      	add	r1, sp, #16
 800a196:	4630      	mov	r0, r6
 800a198:	f7fd fc9a 	bl	8007ad0 <_printf_float>
 800a19c:	4607      	mov	r7, r0
 800a19e:	1c78      	adds	r0, r7, #1
 800a1a0:	d1d6      	bne.n	800a150 <_vfiprintf_r+0x1bc>
 800a1a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1a4:	07d9      	lsls	r1, r3, #31
 800a1a6:	d405      	bmi.n	800a1b4 <_vfiprintf_r+0x220>
 800a1a8:	89ab      	ldrh	r3, [r5, #12]
 800a1aa:	059a      	lsls	r2, r3, #22
 800a1ac:	d402      	bmi.n	800a1b4 <_vfiprintf_r+0x220>
 800a1ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1b0:	f7ff f9de 	bl	8009570 <__retarget_lock_release_recursive>
 800a1b4:	89ab      	ldrh	r3, [r5, #12]
 800a1b6:	065b      	lsls	r3, r3, #25
 800a1b8:	f53f af12 	bmi.w	8009fe0 <_vfiprintf_r+0x4c>
 800a1bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1be:	e711      	b.n	8009fe4 <_vfiprintf_r+0x50>
 800a1c0:	ab03      	add	r3, sp, #12
 800a1c2:	9300      	str	r3, [sp, #0]
 800a1c4:	462a      	mov	r2, r5
 800a1c6:	4b09      	ldr	r3, [pc, #36]	; (800a1ec <_vfiprintf_r+0x258>)
 800a1c8:	a904      	add	r1, sp, #16
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	f7fd ff24 	bl	8008018 <_printf_i>
 800a1d0:	e7e4      	b.n	800a19c <_vfiprintf_r+0x208>
 800a1d2:	bf00      	nop
 800a1d4:	0800a6e0 	.word	0x0800a6e0
 800a1d8:	0800a700 	.word	0x0800a700
 800a1dc:	0800a6c0 	.word	0x0800a6c0
 800a1e0:	0800a87c 	.word	0x0800a87c
 800a1e4:	0800a886 	.word	0x0800a886
 800a1e8:	08007ad1 	.word	0x08007ad1
 800a1ec:	08009f6f 	.word	0x08009f6f
 800a1f0:	0800a882 	.word	0x0800a882

0800a1f4 <_sbrk_r>:
 800a1f4:	b538      	push	{r3, r4, r5, lr}
 800a1f6:	4d06      	ldr	r5, [pc, #24]	; (800a210 <_sbrk_r+0x1c>)
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	4608      	mov	r0, r1
 800a1fe:	602b      	str	r3, [r5, #0]
 800a200:	f7f8 fae6 	bl	80027d0 <_sbrk>
 800a204:	1c43      	adds	r3, r0, #1
 800a206:	d102      	bne.n	800a20e <_sbrk_r+0x1a>
 800a208:	682b      	ldr	r3, [r5, #0]
 800a20a:	b103      	cbz	r3, 800a20e <_sbrk_r+0x1a>
 800a20c:	6023      	str	r3, [r4, #0]
 800a20e:	bd38      	pop	{r3, r4, r5, pc}
 800a210:	200003f4 	.word	0x200003f4

0800a214 <__sread>:
 800a214:	b510      	push	{r4, lr}
 800a216:	460c      	mov	r4, r1
 800a218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a21c:	f000 f8e2 	bl	800a3e4 <_read_r>
 800a220:	2800      	cmp	r0, #0
 800a222:	bfab      	itete	ge
 800a224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a226:	89a3      	ldrhlt	r3, [r4, #12]
 800a228:	181b      	addge	r3, r3, r0
 800a22a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a22e:	bfac      	ite	ge
 800a230:	6563      	strge	r3, [r4, #84]	; 0x54
 800a232:	81a3      	strhlt	r3, [r4, #12]
 800a234:	bd10      	pop	{r4, pc}

0800a236 <__swrite>:
 800a236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a23a:	461f      	mov	r7, r3
 800a23c:	898b      	ldrh	r3, [r1, #12]
 800a23e:	05db      	lsls	r3, r3, #23
 800a240:	4605      	mov	r5, r0
 800a242:	460c      	mov	r4, r1
 800a244:	4616      	mov	r6, r2
 800a246:	d505      	bpl.n	800a254 <__swrite+0x1e>
 800a248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a24c:	2302      	movs	r3, #2
 800a24e:	2200      	movs	r2, #0
 800a250:	f000 f898 	bl	800a384 <_lseek_r>
 800a254:	89a3      	ldrh	r3, [r4, #12]
 800a256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a25a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a25e:	81a3      	strh	r3, [r4, #12]
 800a260:	4632      	mov	r2, r6
 800a262:	463b      	mov	r3, r7
 800a264:	4628      	mov	r0, r5
 800a266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a26a:	f000 b817 	b.w	800a29c <_write_r>

0800a26e <__sseek>:
 800a26e:	b510      	push	{r4, lr}
 800a270:	460c      	mov	r4, r1
 800a272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a276:	f000 f885 	bl	800a384 <_lseek_r>
 800a27a:	1c43      	adds	r3, r0, #1
 800a27c:	89a3      	ldrh	r3, [r4, #12]
 800a27e:	bf15      	itete	ne
 800a280:	6560      	strne	r0, [r4, #84]	; 0x54
 800a282:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a286:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a28a:	81a3      	strheq	r3, [r4, #12]
 800a28c:	bf18      	it	ne
 800a28e:	81a3      	strhne	r3, [r4, #12]
 800a290:	bd10      	pop	{r4, pc}

0800a292 <__sclose>:
 800a292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a296:	f000 b831 	b.w	800a2fc <_close_r>
	...

0800a29c <_write_r>:
 800a29c:	b538      	push	{r3, r4, r5, lr}
 800a29e:	4d07      	ldr	r5, [pc, #28]	; (800a2bc <_write_r+0x20>)
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	4608      	mov	r0, r1
 800a2a4:	4611      	mov	r1, r2
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	602a      	str	r2, [r5, #0]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	f7f8 fa3f 	bl	800272e <_write>
 800a2b0:	1c43      	adds	r3, r0, #1
 800a2b2:	d102      	bne.n	800a2ba <_write_r+0x1e>
 800a2b4:	682b      	ldr	r3, [r5, #0]
 800a2b6:	b103      	cbz	r3, 800a2ba <_write_r+0x1e>
 800a2b8:	6023      	str	r3, [r4, #0]
 800a2ba:	bd38      	pop	{r3, r4, r5, pc}
 800a2bc:	200003f4 	.word	0x200003f4

0800a2c0 <__assert_func>:
 800a2c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2c2:	4614      	mov	r4, r2
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	4b09      	ldr	r3, [pc, #36]	; (800a2ec <__assert_func+0x2c>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4605      	mov	r5, r0
 800a2cc:	68d8      	ldr	r0, [r3, #12]
 800a2ce:	b14c      	cbz	r4, 800a2e4 <__assert_func+0x24>
 800a2d0:	4b07      	ldr	r3, [pc, #28]	; (800a2f0 <__assert_func+0x30>)
 800a2d2:	9100      	str	r1, [sp, #0]
 800a2d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2d8:	4906      	ldr	r1, [pc, #24]	; (800a2f4 <__assert_func+0x34>)
 800a2da:	462b      	mov	r3, r5
 800a2dc:	f000 f81e 	bl	800a31c <fiprintf>
 800a2e0:	f000 f89f 	bl	800a422 <abort>
 800a2e4:	4b04      	ldr	r3, [pc, #16]	; (800a2f8 <__assert_func+0x38>)
 800a2e6:	461c      	mov	r4, r3
 800a2e8:	e7f3      	b.n	800a2d2 <__assert_func+0x12>
 800a2ea:	bf00      	nop
 800a2ec:	2000000c 	.word	0x2000000c
 800a2f0:	0800a88d 	.word	0x0800a88d
 800a2f4:	0800a89a 	.word	0x0800a89a
 800a2f8:	0800a8c8 	.word	0x0800a8c8

0800a2fc <_close_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4d06      	ldr	r5, [pc, #24]	; (800a318 <_close_r+0x1c>)
 800a300:	2300      	movs	r3, #0
 800a302:	4604      	mov	r4, r0
 800a304:	4608      	mov	r0, r1
 800a306:	602b      	str	r3, [r5, #0]
 800a308:	f7f8 fa2d 	bl	8002766 <_close>
 800a30c:	1c43      	adds	r3, r0, #1
 800a30e:	d102      	bne.n	800a316 <_close_r+0x1a>
 800a310:	682b      	ldr	r3, [r5, #0]
 800a312:	b103      	cbz	r3, 800a316 <_close_r+0x1a>
 800a314:	6023      	str	r3, [r4, #0]
 800a316:	bd38      	pop	{r3, r4, r5, pc}
 800a318:	200003f4 	.word	0x200003f4

0800a31c <fiprintf>:
 800a31c:	b40e      	push	{r1, r2, r3}
 800a31e:	b503      	push	{r0, r1, lr}
 800a320:	4601      	mov	r1, r0
 800a322:	ab03      	add	r3, sp, #12
 800a324:	4805      	ldr	r0, [pc, #20]	; (800a33c <fiprintf+0x20>)
 800a326:	f853 2b04 	ldr.w	r2, [r3], #4
 800a32a:	6800      	ldr	r0, [r0, #0]
 800a32c:	9301      	str	r3, [sp, #4]
 800a32e:	f7ff fe31 	bl	8009f94 <_vfiprintf_r>
 800a332:	b002      	add	sp, #8
 800a334:	f85d eb04 	ldr.w	lr, [sp], #4
 800a338:	b003      	add	sp, #12
 800a33a:	4770      	bx	lr
 800a33c:	2000000c 	.word	0x2000000c

0800a340 <_fstat_r>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	4d07      	ldr	r5, [pc, #28]	; (800a360 <_fstat_r+0x20>)
 800a344:	2300      	movs	r3, #0
 800a346:	4604      	mov	r4, r0
 800a348:	4608      	mov	r0, r1
 800a34a:	4611      	mov	r1, r2
 800a34c:	602b      	str	r3, [r5, #0]
 800a34e:	f7f8 fa16 	bl	800277e <_fstat>
 800a352:	1c43      	adds	r3, r0, #1
 800a354:	d102      	bne.n	800a35c <_fstat_r+0x1c>
 800a356:	682b      	ldr	r3, [r5, #0]
 800a358:	b103      	cbz	r3, 800a35c <_fstat_r+0x1c>
 800a35a:	6023      	str	r3, [r4, #0]
 800a35c:	bd38      	pop	{r3, r4, r5, pc}
 800a35e:	bf00      	nop
 800a360:	200003f4 	.word	0x200003f4

0800a364 <_isatty_r>:
 800a364:	b538      	push	{r3, r4, r5, lr}
 800a366:	4d06      	ldr	r5, [pc, #24]	; (800a380 <_isatty_r+0x1c>)
 800a368:	2300      	movs	r3, #0
 800a36a:	4604      	mov	r4, r0
 800a36c:	4608      	mov	r0, r1
 800a36e:	602b      	str	r3, [r5, #0]
 800a370:	f7f8 fa15 	bl	800279e <_isatty>
 800a374:	1c43      	adds	r3, r0, #1
 800a376:	d102      	bne.n	800a37e <_isatty_r+0x1a>
 800a378:	682b      	ldr	r3, [r5, #0]
 800a37a:	b103      	cbz	r3, 800a37e <_isatty_r+0x1a>
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	bd38      	pop	{r3, r4, r5, pc}
 800a380:	200003f4 	.word	0x200003f4

0800a384 <_lseek_r>:
 800a384:	b538      	push	{r3, r4, r5, lr}
 800a386:	4d07      	ldr	r5, [pc, #28]	; (800a3a4 <_lseek_r+0x20>)
 800a388:	4604      	mov	r4, r0
 800a38a:	4608      	mov	r0, r1
 800a38c:	4611      	mov	r1, r2
 800a38e:	2200      	movs	r2, #0
 800a390:	602a      	str	r2, [r5, #0]
 800a392:	461a      	mov	r2, r3
 800a394:	f7f8 fa0e 	bl	80027b4 <_lseek>
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	d102      	bne.n	800a3a2 <_lseek_r+0x1e>
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	b103      	cbz	r3, 800a3a2 <_lseek_r+0x1e>
 800a3a0:	6023      	str	r3, [r4, #0]
 800a3a2:	bd38      	pop	{r3, r4, r5, pc}
 800a3a4:	200003f4 	.word	0x200003f4

0800a3a8 <__ascii_mbtowc>:
 800a3a8:	b082      	sub	sp, #8
 800a3aa:	b901      	cbnz	r1, 800a3ae <__ascii_mbtowc+0x6>
 800a3ac:	a901      	add	r1, sp, #4
 800a3ae:	b142      	cbz	r2, 800a3c2 <__ascii_mbtowc+0x1a>
 800a3b0:	b14b      	cbz	r3, 800a3c6 <__ascii_mbtowc+0x1e>
 800a3b2:	7813      	ldrb	r3, [r2, #0]
 800a3b4:	600b      	str	r3, [r1, #0]
 800a3b6:	7812      	ldrb	r2, [r2, #0]
 800a3b8:	1e10      	subs	r0, r2, #0
 800a3ba:	bf18      	it	ne
 800a3bc:	2001      	movne	r0, #1
 800a3be:	b002      	add	sp, #8
 800a3c0:	4770      	bx	lr
 800a3c2:	4610      	mov	r0, r2
 800a3c4:	e7fb      	b.n	800a3be <__ascii_mbtowc+0x16>
 800a3c6:	f06f 0001 	mvn.w	r0, #1
 800a3ca:	e7f8      	b.n	800a3be <__ascii_mbtowc+0x16>

0800a3cc <__malloc_lock>:
 800a3cc:	4801      	ldr	r0, [pc, #4]	; (800a3d4 <__malloc_lock+0x8>)
 800a3ce:	f7ff b8ce 	b.w	800956e <__retarget_lock_acquire_recursive>
 800a3d2:	bf00      	nop
 800a3d4:	200003e8 	.word	0x200003e8

0800a3d8 <__malloc_unlock>:
 800a3d8:	4801      	ldr	r0, [pc, #4]	; (800a3e0 <__malloc_unlock+0x8>)
 800a3da:	f7ff b8c9 	b.w	8009570 <__retarget_lock_release_recursive>
 800a3de:	bf00      	nop
 800a3e0:	200003e8 	.word	0x200003e8

0800a3e4 <_read_r>:
 800a3e4:	b538      	push	{r3, r4, r5, lr}
 800a3e6:	4d07      	ldr	r5, [pc, #28]	; (800a404 <_read_r+0x20>)
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	4608      	mov	r0, r1
 800a3ec:	4611      	mov	r1, r2
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	602a      	str	r2, [r5, #0]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	f7f8 f97e 	bl	80026f4 <_read>
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	d102      	bne.n	800a402 <_read_r+0x1e>
 800a3fc:	682b      	ldr	r3, [r5, #0]
 800a3fe:	b103      	cbz	r3, 800a402 <_read_r+0x1e>
 800a400:	6023      	str	r3, [r4, #0]
 800a402:	bd38      	pop	{r3, r4, r5, pc}
 800a404:	200003f4 	.word	0x200003f4

0800a408 <__ascii_wctomb>:
 800a408:	b149      	cbz	r1, 800a41e <__ascii_wctomb+0x16>
 800a40a:	2aff      	cmp	r2, #255	; 0xff
 800a40c:	bf85      	ittet	hi
 800a40e:	238a      	movhi	r3, #138	; 0x8a
 800a410:	6003      	strhi	r3, [r0, #0]
 800a412:	700a      	strbls	r2, [r1, #0]
 800a414:	f04f 30ff 	movhi.w	r0, #4294967295
 800a418:	bf98      	it	ls
 800a41a:	2001      	movls	r0, #1
 800a41c:	4770      	bx	lr
 800a41e:	4608      	mov	r0, r1
 800a420:	4770      	bx	lr

0800a422 <abort>:
 800a422:	b508      	push	{r3, lr}
 800a424:	2006      	movs	r0, #6
 800a426:	f000 f82b 	bl	800a480 <raise>
 800a42a:	2001      	movs	r0, #1
 800a42c:	f7f8 f958 	bl	80026e0 <_exit>

0800a430 <_raise_r>:
 800a430:	291f      	cmp	r1, #31
 800a432:	b538      	push	{r3, r4, r5, lr}
 800a434:	4604      	mov	r4, r0
 800a436:	460d      	mov	r5, r1
 800a438:	d904      	bls.n	800a444 <_raise_r+0x14>
 800a43a:	2316      	movs	r3, #22
 800a43c:	6003      	str	r3, [r0, #0]
 800a43e:	f04f 30ff 	mov.w	r0, #4294967295
 800a442:	bd38      	pop	{r3, r4, r5, pc}
 800a444:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a446:	b112      	cbz	r2, 800a44e <_raise_r+0x1e>
 800a448:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a44c:	b94b      	cbnz	r3, 800a462 <_raise_r+0x32>
 800a44e:	4620      	mov	r0, r4
 800a450:	f000 f830 	bl	800a4b4 <_getpid_r>
 800a454:	462a      	mov	r2, r5
 800a456:	4601      	mov	r1, r0
 800a458:	4620      	mov	r0, r4
 800a45a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a45e:	f000 b817 	b.w	800a490 <_kill_r>
 800a462:	2b01      	cmp	r3, #1
 800a464:	d00a      	beq.n	800a47c <_raise_r+0x4c>
 800a466:	1c59      	adds	r1, r3, #1
 800a468:	d103      	bne.n	800a472 <_raise_r+0x42>
 800a46a:	2316      	movs	r3, #22
 800a46c:	6003      	str	r3, [r0, #0]
 800a46e:	2001      	movs	r0, #1
 800a470:	e7e7      	b.n	800a442 <_raise_r+0x12>
 800a472:	2400      	movs	r4, #0
 800a474:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a478:	4628      	mov	r0, r5
 800a47a:	4798      	blx	r3
 800a47c:	2000      	movs	r0, #0
 800a47e:	e7e0      	b.n	800a442 <_raise_r+0x12>

0800a480 <raise>:
 800a480:	4b02      	ldr	r3, [pc, #8]	; (800a48c <raise+0xc>)
 800a482:	4601      	mov	r1, r0
 800a484:	6818      	ldr	r0, [r3, #0]
 800a486:	f7ff bfd3 	b.w	800a430 <_raise_r>
 800a48a:	bf00      	nop
 800a48c:	2000000c 	.word	0x2000000c

0800a490 <_kill_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4d07      	ldr	r5, [pc, #28]	; (800a4b0 <_kill_r+0x20>)
 800a494:	2300      	movs	r3, #0
 800a496:	4604      	mov	r4, r0
 800a498:	4608      	mov	r0, r1
 800a49a:	4611      	mov	r1, r2
 800a49c:	602b      	str	r3, [r5, #0]
 800a49e:	f7f8 f90f 	bl	80026c0 <_kill>
 800a4a2:	1c43      	adds	r3, r0, #1
 800a4a4:	d102      	bne.n	800a4ac <_kill_r+0x1c>
 800a4a6:	682b      	ldr	r3, [r5, #0]
 800a4a8:	b103      	cbz	r3, 800a4ac <_kill_r+0x1c>
 800a4aa:	6023      	str	r3, [r4, #0]
 800a4ac:	bd38      	pop	{r3, r4, r5, pc}
 800a4ae:	bf00      	nop
 800a4b0:	200003f4 	.word	0x200003f4

0800a4b4 <_getpid_r>:
 800a4b4:	f7f8 b8fc 	b.w	80026b0 <_getpid>

0800a4b8 <_init>:
 800a4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ba:	bf00      	nop
 800a4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4be:	bc08      	pop	{r3}
 800a4c0:	469e      	mov	lr, r3
 800a4c2:	4770      	bx	lr

0800a4c4 <_fini>:
 800a4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c6:	bf00      	nop
 800a4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ca:	bc08      	pop	{r3}
 800a4cc:	469e      	mov	lr, r3
 800a4ce:	4770      	bx	lr
